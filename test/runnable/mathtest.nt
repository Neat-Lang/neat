module mathtest;

macro import std.macro.assert;

import std.algorithm;
import std.math;

void main() {
    mut int i = 1;
    assert(i++ == 1);
    assert(++i == 3);
    assert(i-- == 3);
    assert(--i == 1);
    assert(-i == -1);
    assert(2 + 3 * 4 == 14);
    assert(15 % 4 == 3);
    assert((-10 .. 10).map(x => x % 5).array ==
        [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]);
    assert(2 << 2 == 8);
    assert(5 & 3 == 1);
    assert(5 | 3 == 7);
    long l = 1_000_000_000_000;
    assert(l == cast(long) 1_000_000 * 1_000_000);
    assert(abs(sin(Ï€)) <= 0.0001);
    assert(1000.0 == 1_000.0);
    int a = 2, b = 3;
    int id(int i) => i;
    assert((a * b).id == 6);
    i = 24;
    i %= 10;
    assert(i == 4);
    assert(int.max == 0x7fff_ffff);
    assert(int.min == 0x8000_0000);
    assert(long.max == 0x7fff_ffff_ffff_ffff);
    assert(long.min == 0x8000_0000_0000_0000);
}
