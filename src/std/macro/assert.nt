module std.macro.assert;

macro import std.macro.quasiquoting;

import package(compiler).neat.base;

class ASTAssertion : ASTStatement
{
    ASTSymbol test;

    string exprText;

    this(this.test, this.exprText, this.locRange) { }

    (Expression | fail Error) symbolTest(Context context, ASTSymbol sym) {
        auto context = context.withNamespace(context.compiler.exprAlias(
                context.namespace, "identName", context.compiler.stringLiteral(
                    context.platform, .repr(sym, context))));

        return (context.compiler.$expr "$identName = $(cast(int) $sym)")
            .compile(context)?.instanceOf(Expression).notNull;
    }

    (nullable Expression | fail Error) binopTest(mut Context context, ASTSymbol left, string op, ASTSymbol right) {
        void set(string name, Symbol value) {
            context = context.withNamespace(
                context.compiler.exprAlias(context.namespace, name, value));
        }
        (ASTSymbol left, string op, ASTSymbol right) binop = (left, op, right);
        string leftStr = .repr(binop.left, context), rightStr = .repr(binop.right, context);
        set("leftStr", context.compiler.stringLiteral(context.platform, leftStr));
        set("rightStr", context.compiler.stringLiteral(context.platform, rightStr));
        auto
            left = binop.left.compile(context)?.instanceOf(Expression),
            right = binop.right.compile(context)?.instanceOf(Expression);
        if (!left || !right) return null;
        set("left", left);
        set("right", right);

        if (binop.op == "&&") {
            auto leftRecurse = dispatch(context, binop.left)?;
            auto rightRecurse = dispatch(context, binop.right)?;
            if (!leftRecurse || !rightRecurse) return null;
            set("leftRecurse", leftRecurse);
            set("rightRecurse", rightRecurse);

            return (context.compiler.$expr ({
                mut string ret;
                if (!left) ret = leftStr ~ " failed, because " ~ leftRecurse;
                else ret = rightStr ~ " failed, because " ~ rightRecurse;
                ret;
            })).compile(context)?.instanceOf(Expression);
        }
        if (binop.op == "||") {
            auto leftRecurse = dispatch(context, binop.left)?;
            auto rightRecurse = dispatch(context, binop.right)?;
            if (!leftRecurse || !rightRecurse) return null;
            set("leftRecurse", leftRecurse);
            set("rightRecurse", rightRecurse);

            return (context.compiler.$expr ({
                mut string ret;
                if (left) ret = rightStr ~ " failed, because " ~ rightRecurse;
                else if (right) ret = leftStr ~ " failed, because " ~ leftRecurse;
                else ret = leftStr ~ " failed (because " ~ leftRecurse ~ ") and "
                    ~ rightStr ~ " failed (because " ~ rightRecurse ~ ")";
                ret;
            })).compile(context)?.instanceOf(Expression);
        }
        bool isString(Type type) {
            context.compiler.isArrayType(type).case {
                Type elementType:
                    context.compiler.isBasicType(elementType).case {
                        string type:
                            return type == "char";
                        (:none): return false;
                    }
                (:none): return false;
            }
        }
        bool isFloat(Type type) {
            context.compiler.isBasicType(type).case {
                string type:
                    return type == "float";
                (:none):
                    return false;
            }
        }
        bool isLongCastable(Type type) {
            context.compiler.isBasicType(type).case {
                string type:
                    return type == "int" || type == "long" || type == "char" || type == "short";
                (:none):
                    return false;
            }
        }
        if (left.type.isLongCastable && right.type.isLongCastable) {
            context.compiler.destructAstNumberLiteral(binop.right).case {
                long value:
                    return (context.compiler.$expr ({
                        import package(compiler).neat.runtime : ltoa;
                        leftStr ~ " = " ~ ltoa(cast(long) left);
                    })).compile(context)?.instanceOf(Expression);
                (:none): {}
            }
            return (context.compiler.$expr ({
                import package(compiler).neat.runtime : ltoa;
                leftStr ~ " = " ~ ltoa(cast(long) left)
                ~ " and " ~ rightStr ~ " = " ~ ltoa(cast(long) right);
            })).compile(context)?.instanceOf(Expression);
        }
        if (left.type.isFloat && right.type.isFloat) {
            return (context.compiler.$expr ({
                import package(compiler).neat.runtime : ftoa;
                leftStr ~ " = " ~ ftoa(left)
                ~ " and " ~ rightStr ~ " = " ~ ftoa(right);
            })).compile(context)?.instanceOf(Expression);
        }
        if (left.type.isString && right.type.isString) {
            context.compiler.destructAstStringLiteral(binop.right).case {
                string text:
                    return (
                        context.compiler.$expr leftStr ~ " = \"" ~ left ~ "\""
                    ).compile(context)?.instanceOf(Expression);
                (:none): {}
            }
            return (
                context.compiler.$expr
                    leftStr ~ " = \"" ~ left ~ "\""
                    ~ " and " ~ rightStr ~ " = \"" ~ right ~ "\""
            ).compile(context)?.instanceOf(Expression);
        }
        return null;
    }

    (nullable Expression | fail Error) negTest(mut Context context, ASTSymbol next)
    {
        void set(string name, Symbol value) {
            context = context.withNamespace(
                context.compiler.exprAlias(context.namespace, name, value));
        }

        auto nextRecurse = dispatch(context, next)?;
        if (!nextRecurse) return null;
        set("nextRecurse", nextRecurse);
        string nextStr = .repr(next, context);
        set("nextStr", context.compiler.stringLiteral(context.platform, nextStr));

        return (
            context.compiler.$expr nextRecurse ~ " was true"
        ).compile(context)?.instanceOf(Expression);
    }

    (nullable Expression | fail Error) dispatch(Context context, ASTSymbol sym) {
        context.compiler.destructAstIdentifier(sym).case {
            string ident: return symbolTest(context, sym);
            (:none): {}
        }
        context.compiler.destructAstMember(sym).case {
            (ASTSymbol base, string member): return symbolTest(context, sym);
            (:none): {}
        }
        context.compiler.destructAstBinaryOp(sym).case {
            (ASTSymbol left, string op, ASTSymbol right):
                return binopTest(context, left, op, right);
            (:none): {}
        }
        context.compiler.destructAstNegation(sym).case {
            ASTSymbol next:
                return negTest(context, next);
            (:none): {}
        }
        return null;
    }

    override (StatementCompileResult | fail Error) compile(Context context)
    {
        mut Context context = context;

        auto ifFailed = dispatch(context, test)?;
        if (auto ifFailed = ifFailed) {
            string failedMsg = locRange.repr ~ ": assertion failed: " ~ exprText ~ ", because ";
            context = context.withNamespace(context.compiler.exprAlias(
                    context.namespace, "ifFailed", ifFailed));
            context = context.withNamespace(context.compiler.exprAlias(
                    context.namespace,
                    "failedMsg",
                    context.compiler.stringLiteral(context.platform, failedMsg)));
            auto assertTest = context.compiler.$stmt {
                import neat.runtime : assert, print;
                if (!$test) {
                    print(failedMsg ~ ifFailed);
                    assert(false);
                }
            };
            auto assertTestStmt = assertTest.compile(context)?;
            return StatementCompileResult(assertTestStmt.statement, context.namespace);
        }
        string failedMsg = locRange.repr ~ ": assertion failed: '" ~ exprText ~ "' was false";
        context = context.withNamespace(context.compiler.exprAlias(
                context.namespace,
                "failedMsg",
                context.compiler.stringLiteral(context.platform, failedMsg)));
        auto assertTest = context.compiler.$stmt {
            import neat.runtime : assert, print;
            if (!$test) {
                print(failedMsg);
                assert(false);
            }
        };
        auto assertTestStmt = assertTest.compile(context)?;
        return StatementCompileResult(assertTestStmt.statement, context.namespace);
    }

    override ASTSymbol quote(Quoter quoter) {
        with (quoter.compiler) return astNewExpression(
            astIdentifier("ASTAssertion", __RANGE__), [
                this.test.quote(quoter),
                astStringLiteral(this.exprText, __RANGE__),
                quoter.quoteLocRange(this.locRange)], __RANGE__);
    }
}

version (firstpassmacro) {
    (long | :none) destructAstNumberLiteral(CompilerBase compiler, ASTSymbol sym) {
        return :none;
    }
}

string repr(ASTSymbol sym, Context context) {
    import neat.runtime : assert;
    assert(!!sym);
    context.compiler.destructAstIdentifier(sym).case {
        string ident: return ident;
        (:none): {}
    }
    context.compiler.destructAstMember(sym).case {
        (ASTSymbol base, string member): repr(base, context) ~ "." ~ member;
        (:none): {}
    }
    context.compiler.destructAstBinaryOp(sym).case {
        (ASTSymbol left, string op, ASTSymbol right):
            return "(" ~ repr(left, context) ~ " $op " ~ repr(right, context) ~ ")";
        (:none): {}
    }
    version (firstpassmacro) {} else {
        context.compiler.destructAstCast(sym).case {
            (ASTSymbol target, ASTSymbol value):
                return "cast(" ~ repr(target, context) ~ ") " ~ repr(value, context);
            (:none): {}
        }
    }
    context.compiler.destructAstNegation(sym).case {
        ASTSymbol next: return "!" ~ repr(next, context);
        (:none): {}
    }
    context.compiler.destructAstNumberLiteral(sym).case {
        long value: return "$value";
        (:none): {}
    }
    context.compiler.destructAstStringLiteral(sym).case {
        string text: return "\"$text\"";
        (:none): {}
    }
    return "TODO";
}

class ParseAssert : Macro
{
    this() { }
    override void apply(MacroArgs args) {
        if (auto args = args.instanceOf(ParseStatementArgs)) {
            args.statement = this.parse(args.parser, args.lexicalContext);
        }
    }

    (nullable ASTStatement | fail Error) parse(Parser parser, LexicalContext context) {
        parser.begin;
        version (firstpassmacro) parser.strip?;
        else parser.strip;
        if (!parser.accept("assert")?)
        {
            parser.revert;
            return null;
        }
        if (!parser.accept("(")?)
        {
            parser.revert;
            return null;
        }
        parser.commit;
        auto exprStartFrom = parser.from?;
        auto exprStart = parser.text;
        auto expression = context.compiler.parseExpression(parser, context)?.notNull;
        auto exprEnd = parser.text;
        auto exprText = exprStart[0 .. exprStart.length - exprEnd.length];

        auto exprRange = parser.to(exprStartFrom);
        parser.expect(")")?;
        parser.expect(";")?;

        return new ASTAssertion(expression, exprText, exprRange);
    }
}

void assertMacro(MacroState macroState)
{
    macroState.addMacro(new ParseAssert);
}

macro(assertMacro);
