module neat.vectors;

macro import package(compiler).std.macro.listcomprehension;
macro import package(compiler).std.macro.quasiquoting;

import backend.base;
import helpers;
import neat.base;
import neat.expr;
import neat.util;
import package(compiler).std.string;
import polyhash;

class ASTVectorType : ASTSymbol
{
    ASTSymbol elementType;

    int count;

    this(this.elementType, this.count, this.locRange) { }

    override (Type | fail Error) compile(Context context)
    {
        return new VectorType(
            this.elementType.compile(context)?.beType(this.locRange)?, count);
    }
}

class VectorMember : Expression
{
    Expression base;

    int index;

    VectorType vectorType;

    this(this.base, this.index)
    {
        if (auto vectorType = this.base.type.instanceOf(VectorType))
            this.vectorType = vectorType;
        else assert(false);
        this.type = this.vectorType.elementType;
        this.info = this.base.info;
    }

    override int emit(Generator output)
    {
        return output.fun.field(vectorType.emit(output.platform), base.emit(output), index);
    }

    override void hash(Hash hash)
    {
        hash.adds("VectorMember");
        base.hash(hash);
        hash.addl(index);
    }
    override string repr() return "$(base.repr)[$index]";
}

class VectorMemberReference : Reference
{
    Reference base;

    int index;

    VectorType vectorType;

    this(this.base, this.index)
    {
        if (auto vectorType = this.base.type.instanceOf(VectorType))
            this.vectorType = vectorType;
        else assert(false);
        this.type = this.vectorType.elementType;
        this.info = this.base.info;
    }

    override int emit(Generator output)
    {
        return output.fun.load(this.type.emit(output.platform), this.emitLocation(output));
    }

    override int emitLocation(Generator output)
    {
        int reg = this.base.emitLocation(output);

        return output.fun.fieldOffset(this.base.type.emit(output.platform), reg, this.index);
    }

    override void hash(Hash hash)
    {
        hash.adds("VectorMember");
        base.hash(hash);
        hash.addl(index);
    }

    override string repr() return "$(base.repr)[$index]";
}

class VectorType : Type, Hashable
{
    Type elementType;

    int length;

    this(this.elementType, this.length) {
        this.zeroInitializable = this.elementType.zeroInitializable;
    }

    override BackendType emit(Platform platform) {
        // TODO BackendVectorType
        // TODO [element for 0 .. length]
        BackendType elementType = this.elementType.emit(platform);
        mut BackendType[] members;
        for (i in 0 .. length) members ~= elementType;
        return new BackendStructType(members);
    }

    override bool same(Type other) {
        // TODO
        // return other.instanceOf(VectorType)?.(element.same(this.element) && length == this.length);
        if (auto vt = other.instanceOf(VectorType))
            return elementType.same(vt.elementType) && length == vt.length;
        return false;
    }

    override string mangle() {
        return "vector_$(length)_$(elementType.mangle)";
    }

    override string repr() {
        return "Vector(" ~ elementType.repr ~ ", " ~ itoa(length) ~ ")";
    }

    override void hash(Hash hash) {
        hash.adds("Vector");
        elementType.hash(hash);
        hash.addl(length);
    }

    override (nullable Symbol | fail Error) accessMember(
        Context context, nullable Expression base, string field, Protection _, LocRange locRange)
    {
        if (base !is null && field.startsWith("_")) {
            auto index = field[1 .. $].atoi;
            context.assert2(field == "_$index", locRange, "_number expected for field access")?;
            return new VectorMember(base.notNull, index);
        }
        // TODO part of type? third parameter?
        (nullable Expression | fail Error) do_(Expression base) {
            string coords1 = "uv", coords2 = "xyzw", coords3 = "rgba";
            mut Expression[] members;
            int indexIn(char ch, string str) {
                return [first cast(int) i for i, ch2 in str where ch == ch2 else -1];
            }
            for (char ch in field) {
                if (ch.indexIn(coords1) != -1)
                    members ~= new VectorMember(base, ch.indexIn(coords1));
                else if (ch.indexIn(coords2) != -1)
                    members ~= new VectorMember(base, ch.indexIn(coords2));
                else if (ch.indexIn(coords3) != -1)
                    members ~= new VectorMember(base, ch.indexIn(coords3));
                else return null;
            }
            if (members.length == 1)
                return members[0];
            return (new VectorType(elementType, cast(int) members.length)).mkVector(context, locRange, members);
        }
        if (auto base = base)
            return context.compiler.exprWithTemporaryExpr(context.getUniqueId, base, &do_);
        return null;
    }

    override (nullable Expression | fail Error) index(
        Context context, Expression base, Expression index, LocRange locRange)
    {
        if (auto intLiteral = index.instanceOf(IntLiteral))
        {
            return new VectorMember(base, intLiteral.value);
        }
        context.assert2(false, locRange, "vector index expression must be literal")?;
    }

    override (nullable Expression | fail Error) binaryOp(
        Context context, string op, Expression lhs, Expression rhs, LocRange locRange)
    {
        auto lhsVectorType = lhs.type.instanceOf(VectorType);
        auto rhsVectorType = rhs.type.instanceOf(VectorType);
        if (lhsVectorType && rhsVectorType) {
            locRange.assert(lhsVectorType.length == rhsVectorType.length,
                () => "vectors have different size")?;
        }
        locRange.assert(!!lhsVectorType, () => "lhs must be vector (TODO)")?;
        if (op == "==" || op == ">" || op == "<" || op == ">=" || op == "<=") {
            Expression getRight(int index) {
                if (rhsVectorType) return new VectorMember(rhs, index);
                return rhs;
            }
            (Expression | fail Error) getRightConverted(Type lhsType, int index) {
                Expression rhs = getRight(index);
                if (auto converted = .implicitConvertTo(context, rhs, lhsType, locRange)?) {
                    return converted;
                }
                return rhs;
            }
            mut nullable Expression andList;
            for (i in 0 .. lhsVectorType.length) {
                auto leftMember = new VectorMember(lhs, cast(int) i);
                auto rightMember = getRightConverted(leftMember.type, cast(int) i)?;
                auto test = context.compiler.binaryOp(op, context, leftMember, rightMember, locRange)?;
                if (auto left = andList) andList = new BoolAnd(left, test);
                else andList = test;
            }
            return andList;
        }
        (nullable Expression | fail Error) do1(Expression lhs) {
            (nullable Expression | fail Error) do2(Expression rhs) {
                Expression getRight(int index) {
                    if (rhsVectorType) return new VectorMember(rhs, index);
                    return rhs;
                }
                (Expression | fail Error) getRightConverted(Type lhsType, int index) {
                    Expression rhs = getRight(index);
                    if (auto converted = .implicitConvertTo(context, rhs, lhsType, locRange)?) {
                        return converted;
                    }
                    return rhs;
                }
                mut Expression[] members;
                for (i in 0 .. lhsVectorType.length) {
                    auto leftMember = new VectorMember(lhs, cast(int) i);
                    auto rightMember = getRightConverted(leftMember.type, cast(int) i)?;
                    members ~= context.compiler.binaryOp(op, context, leftMember, rightMember, locRange)?;
                }
                return mkVector(context, locRange, members);
            }
            return context.compiler.exprWithTemporaryExpr(context.getUniqueId, rhs, &do2);
        }
        return context.compiler.exprWithTemporaryExpr(context.getUniqueId, lhs, &do1);
    }

    override (nullable Expression | fail Error) call(Context context, LocRange locRange, ASTArgument[] args)
    {
        locRange.assert(
            args.length == this.length || args.length == 1,
            () => "invalid number of args for vector constructor")?;

        // TODO arg name validation
        auto argExprs = [
            arg.sym.compile(context)?.beExpressionImplCall(context, arg.locRange)?
            for arg in args];

        // TODO a better way to generically construct types backed by BackendStructType
        if (argExprs.length == 1) {
            auto result = new PairedTemporary(this, Lifetime.gifted, context.getUniqueId);
            mut Statement initialize = new UninitializeTemporaryStatement(result);
            (nullable Expression | fail Error) do1(Expression arg) {
                (Expression | fail Error) do2(Expression arg) {
                    auto arg = expectImplicitConvertTo(context, arg, elementType, args[0].locRange)?;
                    for (i in 0 .. this.length) {
                        auto field = new VectorMemberReference(result, cast(int) i);
                        auto stmt = context.compiler.assignStatement(field, arg);

                        initialize = context.compiler.sequence(initialize, stmt);
                    }
                    return context.compiler.statementExpression(initialize, result);
                }
                return context.compiler.consume(context, arg, &do2);
            }
            return context.compiler.exprWithTemporaryExpr(context.getUniqueId, argExprs[0], &do1);
        } else {
            return mkVector(context, locRange, argExprs);
        }
    }

    // consumes "args"
    (Expression | fail Error) mkVector(Context context, LocRange locRange, Expression[] args) {
        auto result = new PairedTemporary(this, Lifetime.gifted, context.getUniqueId);
        mut Statement initialize = new UninitializeTemporaryStatement(result);
        for (i in 0 .. this.length) {
            auto arg = expectImplicitConvertTo(context, args[i], elementType, locRange)?;
            auto field = new VectorMemberReference(result, cast(int) i);
            auto stmt = context.compiler.move(context, field, arg, locRange)?;

            initialize = context.compiler.sequence(initialize, stmt);
        }
        return context.compiler.statementExpression(initialize, result);
    }


    override (ASTSymbol | fail Error) hash(CompilerBase compiler, ASTSymbol value) {
        // very much like structs
        mut ASTStatement[] parts;
        for (i in 0 .. this.length) {
            // FIXME sumtype
            auto iSym = compiler.astNumberLiteral(i, __RANGE__);
            parts ~= compiler.$stmt {
                hash ^= __hash($value[$iSym]);
                hash *= 0x01000193;
            };
        }
        auto partsStmt = compiler.astSequence(parts, __RANGE__);
        return compiler.$expr ({
            // fnv composition
            mut int hash = 0x811c9dc5;
            $stmt partsStmt;
            if (hash < 0) hash = -hash;
            hash;
        });
    }
}

