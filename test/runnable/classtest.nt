module classtest;

macro import std.macro.assert;

extern(C) void print(string);

void main()
{
    Class1 class1 = new Class1;
    assert(class1.getValue() == 5);
    Class2 class2 = new Class2(6);
    assert(class2.getValue() == 6);
    Class1 class2_as_1 = class2; // TODO new Class2(6)
    assert(class2_as_1 == class2);
    assert(class2_as_1.getValue() == 6);
    assert(!!class2_as_1.instanceOf(Class1));
    assert(!!class2_as_1.instanceOf(Class2));
    if (class2_as_1.instanceOf(Class3)) print("something is very wrong.");
    assert(!class2_as_1.instanceOf(Class3));
    auto class3b = new Class3b(7);
    assert(class3b.a == 7);
    test2;
    test3;
    test4;
    test5;
    assert(Class10.a == 5);
}

class Class1
{
    this() { }
    int value() { return 5; }
    int getValue() { return this.value(); }
}

class Class2 : Class1
{
    int a;
    this(this.a) { }
    override int value() { return this.a; }
}

class Class3 : Class2
{
    Class3 parent;
    this(this.a) { }
    override int value() { return super.value + 4; }
}

class Class3b : Class2
{
    this(int a) { super(a); }
}

class Class4a { Class4b partner; }
class Class4b { Class4a partner; }

void test2()
{
    assert((new Class3(5)).value == 9);
}

class Class5 {
    this() { }

    import std.string : replace;

    string test() { return "Hello World".replace(" ", "_"); }
}

void test3()
{
    assert((new Class5).test == "Hello_World");
}

abstract class Class6 {
    abstract int foo();
}

class Class7 : Class6 {
    override int foo() { return 5; }
    this() { }
}

void test4() {
    assert((new Class7).foo == 5);
}

class Class8
{
    int x;
    this(this.x = 5) { }
}

void test5() {
    assert((new Class8).x == 5);
    assert((new Class8()).x == 5);
    assert((new Class8(3)).x == 3);
}

interface Intf
{
    void foo();
}

abstract class Class9 : Intf
{
}

class Class10
{
    alias a = 5;
}
