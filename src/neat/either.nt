module neat.either;

macro import std.macro.quasiquoting;

import backend.base;
import helpers;
import neat.base;
import neat.expr;
import neat.hash;
import neat.types;
import neat.util;

/**
 * Note: Either field offset is member index + 1!
 * This way, the uninitialized state can be detected and caught.
 * (It isn't yet, though.)
 */

/**
 * What is 'fail'?
 * A "failing member" is a member of an Either decl that represents a failure of the function.
 * When extracting a result from the call, "failing" members are considered falsy and excluded.
 */
struct ASTEitherDeclEntry
{
    LocRange locRange;

    bool fail;

    ASTSymbol symbol;
}

class ASTEitherDecl : ASTSymbol
{
    ASTEitherDeclEntry[] partTypes;

    this(this.partTypes) { }

    override (Type | fail Error) compile(Context context)
    {
        auto partTypes = new (bool fail, Type)[](this.partTypes.length);
        for (i, partType in this.partTypes) {
            auto type = partType.symbol.compile(context)?.beType(partType.locRange)?;
            partTypes[i] = (partType.fail, type);
        }

        return new Either(partTypes);
    }

    override string repr() {
        string repr(bool fail, ASTSymbol sym) {
            if (fail) return "fail $(sym.repr)";
            return sym.repr;
        }
        mut string parts;
        for (type in partTypes) {
            if (!parts.empty)
                parts ~= " | ";
            parts ~= repr(type.fail, type.symbol);
        }
        return "($parts)";
    }

    override ASTSymbol quote(Quoter quoter) {
        with (quoter.compiler) {
            mut ASTSymbol[] quotedParts;
            for (entry in this.partTypes) {
                quotedParts ~= astTupleLiteral([
                    entry.symbol.quote(quoter),
                    astBoolLiteral(entry.fail, __RANGE__),
                    quoter.quoteLocRange(entry.locRange),
                ], __RANGE__);
            }
            auto typeHint = astTupleType([
                ("symbol", astIdentifier("ASTSymbol", __RANGE__)),
                ("fail", astBasicType("bool", __RANGE__)),
                ("locRange", astIdentifier("LocRange", __RANGE__)),
            ], __RANGE__);
            return quoter.compilerCall("astEitherType", [
                astArrayLiteralTypeHint(typeHint, quotedParts, this.locRange),
            ], locRange);
        }
    }
}

class EitherExpr : Expression
{
    Either either;

    Expression value;

    int offset;

    this(this.either, this.value, this.offset) {
        this.type = this.either;
        // consume value's lifetime
        this.info = this.value.info;
    }

    override int emit(Generator generator)
    {
        int value = this.value.emit(generator);

        BackendType eitherType = either.emit(generator.platform);
        int reg = generator.fun.staticAlloca(eitherType);
        int offsetTarget = generator.fun.fieldOffset(eitherType, reg, 0);
        int offsetValue = generator.fun.intLiteral(offset + 1);
        int rawValueTarget = generator.fun.fieldOffset(eitherType, reg, 1);
        BackendType backendValueType = either.types[offset].type.emit(generator.platform);
        int valueTarget = generator.fun.bitcast(rawValueTarget, new BackendPointerType(backendValueType));

        generator.fun.store(new BackendIntType, offsetTarget, offsetValue);
        generator.fun.store(backendValueType, valueTarget, value);

        return generator.fun.load(eitherType, reg);
    }

    override void hash(Hash hash) { hash.adds("EitherExpr"); value.hash(hash); hash.addl(offset); }
    override string repr() return "$(either.repr)($(value.repr))";
}

class EitherType : Expression
{
    Expression value;

    this(this.value) {
        this.type = new Integer;
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator generator)
    {
        auto eitherType = this.value.type.emit(generator.platform);
        int eitherValue = this.value.emit(generator);
        return generator.fun.field(eitherType, eitherValue, 0);
    }

    override void hash(Hash hash) { hash.adds("EitherType"); value.hash(hash); }
    override string repr() return "($(value.repr)).__type";
}

class EitherTypeReference : Reference
{
    Reference base;

    this(this.base) {
        this.type = new Integer;
        this.mutable = false; // should not be mutated by users
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emitLocation(Generator output)
    {
        auto eitherType = this.base.type.emit(output.platform);
        int baseptr = this.base.emitLocation(output);
        return output.fun.fieldOffset(eitherType, baseptr, 0);
    }

    override int emit(Generator output)
    {
        return output.fun.load(this.type.emit(output.platform), this.emitLocation(output));
    }

    override void hash(Hash hash) { hash.adds("EitherTypeReference"); base.hash(hash); }
    override string repr() return "($(base.repr)).__type";
}

class EitherReference : Reference
{
    Reference base;

    int offset;

    this(this.base, this.offset) {
        this.type = this.base.type.instanceOf(Either).types[this.offset].type;
        this.mutable = false;
        // EitherReference should not participate in memory management
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emitLocation(Generator output)
    {
        BackendType eitherType = this.base.type.emit(output.platform);
        int eitherPtr = this.base.emitLocation(output);
        int eitherUnionPtr = output.fun.fieldOffset(eitherType, eitherPtr, 1);
        BackendType backendValueType = this.type.emit(output.platform);
        int valuePtr = output.fun.bitcast(eitherUnionPtr, new BackendPointerType(backendValueType));

        return valuePtr;
    }

    override int emit(Generator output)
    {
        return output.fun.load(
            this.type.emit(output.platform),
            emitLocation(output));
    }

    override void hash(Hash hash) { hash.adds("EitherReference"); base.hash(hash); hash.addl(offset); }
    override string repr() return "($(base.repr)).__case$offset";
}

class EitherMember : Expression
{
    Expression value;

    int offset;

    this(this.value, this.offset) {
        this.type = this.value.type.instanceOf(Either).types[this.offset].type;
        this.info = this.value.info;
    }

    override int emit(Generator generator)
    {
        BackendType eitherType = this.value.type.emit(generator.platform);
        int eitherValuePtr = generator.fun.staticAlloca(eitherType);

        int eitherValue = this.value.emit(generator);
        generator.fun.store(eitherType, eitherValuePtr, eitherValue);

        int eitherUnionPtr = generator.fun.fieldOffset(eitherType, eitherValuePtr, 1);
        // load the union value
        BackendType backendValueType = this.type.emit(generator.platform);
        int valuePtr = generator.fun.bitcast(eitherUnionPtr, new BackendPointerType(backendValueType));
        return generator.fun.load(backendValueType, valuePtr);
    }

    override void hash(Hash hash) { hash.adds("EitherMember"); value.hash(hash); hash.addl(offset); }
    override string repr() return "($(value.repr)).__case$offset";
}

class Either : Type
{
    (bool fail, Type type)[] types;

    this(this.types) {
        this.zeroInitializable = false;
        this.hasElaborateCopyConstructor = false;
        for (entry in this.types) if (entry.type.hasElaborateCopyConstructor) {
            this.hasElaborateCopyConstructor = true;
            break;
        }
    }

    override BackendType emit(Platform platform) {
        mut int size = 0;
        mut int alignment = 1;
        for (pair in this.types) {
            auto backendType = pair.type.emit(platform);
            int memberSize = backendType.size(platform);
            int memberAlignment = backendType.alignment(platform);

            if (memberSize > size) size = memberSize;
            if (memberAlignment > alignment) alignment = memberAlignment;
        }
        auto parts = new BackendType[](2);
        parts[0] = new BackendIntType;
        parts[1] = new BackendSpacerType(size, alignment);
        return new BackendStructType(parts);
    }

    override nullable Expression implicitConvertFrom(Context context, Expression source)
    {
        for (int i, entry in this.types) {
            if (entry.type.same(source.type)) return new EitherExpr(this, source, i);
        }
        for (int i, entry in this.types) {
            if (auto converted = context.compiler.implicitConvertTo(context, source, entry.type))
                return new EitherExpr(this, converted, i);
        }
        return null;
    }

    override nullable Expression implicitConvertTo(Context context, Expression source, Type targetType)
    {
        // Check that every member can be converted.
        for (int i, _ in this.types) {
            auto member = new EitherMember(source, i);
            auto converted = context.compiler.implicitConvertTo(context, member, targetType);
            if (!converted) return null;
        }
        (nullable Expression | fail Error) do1(Expression source) {
            (nullable Statement | fail Error) do2(Reference target) {
                mut nullable Statement ifTree = null;
                auto sourceType = new EitherType(source);
                for (int i, type in this.types) {
                    auto member = new EitherMember(source, i);
                    auto converted = context.compiler.implicitConvertTo(context, member, targetType).notNull;
                    Expression test = context.compiler.binaryOp(
                        "==", context, sourceType, context.compiler.intLiteral(i + 1), __RANGE__)?;
                    Statement assign = context.compiler.assignStatement(target, converted);
                    ifTree = context.compiler.ifStatement(test, assign, ifTree);
                }
                return ifTree;
            }
            // TODO settle ownership
            return context.compiler.exprWithScratchspace(context.getLabel, targetType, false, &do2);
        }
        context.compiler.exprWithTemporaryExpr(context.getLabel, source, &do1).case {
            nullable Expression expr: return expr;
            Error: assert(false);
        }
    }

    // Either trivially converts to target if all types trivially convert.
    override bool triviallyConvertsTo(Type target)
    {
        auto otherEither = target.instanceOf(Either);
        if (!otherEither || otherEither.types.length != types.length)
            return false;
        for (i in 0 .. types.length)
            if (!types[i].type.triviallyConvertsTo(otherEither.types[i].type))
                return false;
        return true;
    }

    override bool same(Type type) {
        auto other = type.instanceOf(Either);
        if (!other || types.length != other.types.length)
            return false;
        for (i, type in types)
            if (!type.type.same(other.types[i].type))
                return false;
        return true;
    }

    override string mangle() {
        mut string ret = "either";
        for (i, type in types)
            ret ~= "_" ~ type.type.mangle();
        return ret;
    }

    override string repr() {
        mut string ret = "(";
        for (i, entry in types) {
            if (i) ret ~= " | ";
            ret ~= entry.type.repr();
        }
        ret ~= ")";
        return ret;
    }

    override void hash(Hash hash) {
        hash.adds("Either");
        hash.addl(types.length);
        for (entry in types)
            entry.type.hash(hash);
    }

    /**
     * Called to create a copy of an expression.
     */
    override (Expression | fail Error) copy(Context context, Expression source) {
        if (!this.hasElaborateCopyConstructor) {
            return source;
        }
        (nullable Expression | fail Error) do_(Expression source) {
            mut (int, Expression)[] branches;
            for (int i, entry in types) {
                auto sourceMember = new EitherMember(source, i);
                auto newExpr = new EitherExpr(this, sourceMember.type.copy(context, sourceMember)?, i);
                branches ~= (i + 1, newExpr);
            }
            auto sourceType = new EitherType(source);
            return new SwitchExpr(source.type, ExprInfo(Lifetime.gifted), sourceType, branches, default_=source);
        }
        return context.compiler.exprWithTemporaryExpr(context.getLabel, source, &do_)?.notNull;
    }

    /**
     * Called when a scoped expression goes out of scope.
     */
    override nullable Statement endLifetime(Context context, Expression expr)
    {
        (nullable Statement | fail Error) do_(Expression expr) {
            auto valueType = new EitherType(expr);

            mut nullable Statement ifTree;
            for (int i, entry in types) {
                auto member = new EitherMember(expr, i);

                if (auto destroy = entry.type.endLifetime(context, member))
                {
                    Expression test = context.compiler.binaryOp(
                        "==", context, valueType, context.compiler.intLiteral(i + 1), __RANGE__)?;
                    ifTree = context.compiler.ifStatement(test, destroy, ifTree);
                }
            }

            return ifTree;
        }
        context.compiler.stmtWithTemporaryExpr(
            context.getLabel,
            expr,
            &do_
        ).case {
            nullable Statement stmt: return stmt;
            Error: assert(false);
        }
    }

    override (nullable Expression | fail Error) binaryOp(
        Context context, string op, Expression lhs, Expression rhs, LocRange locRange)
    {
        if (op == "==") {
            mut auto rhs = rhs;
            if (auto converted = context.compiler.implicitConvertTo(context, rhs, lhs.type)) {
                rhs = converted;
            } else {
                return null;
            }

            (nullable Expression | fail Error) do1(Expression lhs) {
                (nullable Expression | fail Error) do2(Expression rhs) {
                    auto lhsType = new EitherType(lhs);
                    auto rhsType = new EitherType(rhs);
                    auto typeEq = context.compiler.astBinaryOp(
                        "==", new ASTSymbolHelper(lhsType), new ASTSymbolHelper(rhsType), __RANGE__);
                    mut ASTEitherCaseExprCase[] eqCases;
                    for (i, entry in types) {
                        auto rhsMember = new EitherMember(rhs, cast(int) i);
                        auto memberEq = context.compiler.astBinaryOp(
                            "==",
                            context.compiler.astIdentifier("a", __RANGE__),
                            new ASTSymbolHelper(rhsMember), __RANGE__);

                        eqCases ~= ASTEitherCaseExprCase(
                            __RANGE__, new ASTSymbolHelper(entry.type), "a", fail=false, memberEq);
                    }
                    auto eqTest = new ASTEitherCaseExpr(__RANGE__, new ASTSymbolHelper(lhs), eqCases);
                    auto combinedExpr = context.compiler.astBinaryOp("&&", typeEq, eqTest, __RANGE__);

                    return combinedExpr.compile(context)?.beExpression(locRange)?;
                }
                return context.compiler.exprWithTemporaryExpr(context.getLabel, rhs, &do2);
            }
            return context.compiler.exprWithTemporaryExpr(context.getLabel, lhs, &do1);
        }
        return null;
    }
}

/// FIXME move to expr.nt
/// Pick one expression from the available branches based on the value of sample (an int32).
class SwitchExpr : Expression
{
    Expression sample;

    Expression default_;

    (int case_, Expression expr)[] branches;

    this(this.type, this.info, this.sample, this.branches, this.default_) {}

    override int emit(Generator output)
    {
        string label = output.fun.getLabel;
        string dest = label ~ "_done";
        string defaultLabel = label ~ "_default";
        mut string[] branchLabels;
        mut (int, string)[] targets;
        for (i, branch in branches) {
            auto brLabel = label ~ "_br$i";
            branchLabels ~= brLabel;
            targets ~= (branch.case_, brLabel);
        }

        auto resultType = this.type.emit(output.platform);
        if (auto phiFun = output.fun.instanceOf(PhiCapable)) {
            int sample = this.sample.emit(output);
            output.fun.switch_(sample, targets, defaultLabel);
            mut (string pred, int reg)[] sourceRegs;
            for (i, branch in branches) {
                output.fun.setLabel(branchLabels[i]);
                int reg = branch.expr.emit(output);
                sourceRegs ~= (output.fun.getCurrentLabel, reg);
                output.fun.branch(dest);
            }
            output.fun.setLabel(defaultLabel);
            auto defaultReg = default_.emit(output);
            sourceRegs ~= (output.fun.getCurrentLabel, defaultReg);
            output.fun.branch(dest);
            output.fun.setLabel(dest);
            return phiFun.phi(resultType, sourceRegs);
        } else {
            int target = output.fun.staticAlloca(resultType);
            int sample = this.sample.emit(output);
            output.fun.switch_(sample, targets, defaultLabel);
            for (i, branch in branches) {
                output.fun.setLabel(branchLabels[i]);
                int reg = branch.expr.emit(output);
                output.fun.store(resultType, target, reg);
                output.fun.branch(dest);
            }
            output.fun.setLabel(defaultLabel);
            auto defaultReg = default_.emit(output);
            output.fun.store(resultType, target, defaultReg);
            output.fun.branch(dest);
            output.fun.setLabel(dest);
            return output.fun.load(resultType, target);
        }
    }

    override void hash(Hash hash) {
        hash.adds("switch");
        hash.addl(branches.length);
        for (branch in branches) {
            hash.addl(branch.case_);
            branch.expr.hash(hash);
        }
    }

    override string repr() { return "switch(...)"; }
}

/**
 * a.case(T t: 5, U u: 6)
 */
class ASTEitherCaseExpr : ASTSymbol
{
    ASTSymbol base;

    ASTEitherCaseExprCase[] cases;

    // For internal use: promise to use every member at most once. Lets us maintain gifted semantics.
    bool singleUse;

    this(this.locRange, this.base, this.cases) { }

    override (Expression | fail Error) compile(Context context) {
        auto baseExpr = base.compile(context)?.beExpressionImplCall(context, locRange)?;
        auto either = baseExpr.type.instanceOf(Either);

        if (!either) {
            // oh wait, it's a simple case expression after all...
            mut ASTExprCaseExprCase[] cases;
            for (case_ in this.cases) cases ~= case_.reinterpretAsExprCase(context)?;
            return compileExprCaseExpr(context, baseExpr, cases);
        }

        auto baseExprTemp = new PairedTemporaryExpr(
            baseExpr.type, baseExpr.info.lifetime if singleUse else Lifetime.permanent, context.getLabel);
        Statement baseExprInit = new InitializeTemporaryExprStatement(baseExprTemp, baseExpr);

        bool[] handled = new bool[](either.types.length);
        int[] matchIndexes = new int[](this.cases.length);
        for (i, _ in matchIndexes) matchIndexes[i] = -1;

        // TODO implicitConvertTo should only require Type - ie. return a Expression function(Expression).
        mut Type[] resultTypes;
        void mergeType(LocRange locRange, Type exprType) {
            // TODO centralize!
            import neat.bottom : Bottom;
            if (exprType.instanceOf(Bottom)) return;
            for (resultType in resultTypes)
                if (resultType.same(exprType)) return;
            resultTypes ~= exprType;
        }
        for (i, case_ in this.cases) {
            auto caseLoc = case_.locRange;
            auto caseType = case_.type.compile(context)?.beType(caseLoc)?;

            mut int matchIndex = -1;
            for (int k, eitherType in either.types) {
                if (caseType.same(eitherType.type)) {
                    caseLoc.assert(matchIndex == -1, "either type $(eitherType.type.repr) matched twice")?;
                    matchIndex = k;
                }
            }
            if (matchIndex == -1) {
                // look for weaker match
                for (int k, eitherType in either.types) {
                    if (eitherType.type.triviallyConvertsTo(caseType)) {
                        caseLoc.assert(matchIndex == -1, "either type $(eitherType.type.repr) matched twice")?;
                        matchIndex = k;
                    }
                }
            }
            caseLoc.assert(matchIndex != -1, "Type is not listed in Either!")?;
            handled[matchIndex] = true;
            matchIndexes[i] = matchIndex;

            auto namespace = context.compiler.variableDeclaration(
                context.namespace, case_.identifier, caseType, mut=false, borrowed=false, false);
            auto subContext = context.withNamespace(namespace);

            Expression expr = case_.expr.compile(subContext)?.beExpressionImplCall(context, caseLoc)?;
            mergeType(caseLoc, expr.type);
        }

        for (i, handled in handled) {
            if (!handled) {
                // print("type $(either.types[i].type.repr) not handled, default type");
                // return locRange.fail("Type " ~ either.types[i].type.repr() ~ " not handled!");
                // silently pass through
                mergeType(__RANGE__, either.types[i].type);
            }
        }

        assert(resultTypes.length > 0);
        mut uninitialized Type mergeType;
        if (resultTypes.length == 1) mergeType = resultTypes[0];
        else {
            mut (bool fail, Type)[] members;
            for (type in resultTypes) members ~= (false, type);
            mergeType = new Either(members);
        }
        // as ASTReturn
        mut uninitialized PairedTemporary resultVal;
        if (!singleUse)
            resultVal = new PairedTemporary(mergeType, Lifetime.gifted, context.getLabel);
        else
            resultVal = new PairedTemporary(mergeType, baseExpr.info.lifetime, context.getLabel);
        Statement initResultVal = new UninitializeTemporaryStatement(resultVal);
        mut nullable Statement ifTree;

        (void | fail Error) handleCase(ASTEitherCaseExprCase case_, int matchIndex)
        {
            auto caseLoc = case_.locRange;
            Type type = case_.type.compile(context)?.beType(caseLoc)?;

            mut Statement[] thenSteps;

            bool cleanup = baseExpr.info.lifetime == Lifetime.gifted;
            auto castMember = context.compiler.trivialCastTo(type, new EitherMember(baseExprTemp, matchIndex));

            mut Context context = context;
            mut uninitialized Reference variable;
            if (!singleUse) {
                auto namespace = context.compiler.variableDeclaration(
                    context.namespace, case_.identifier, type, mut=false, borrowed=!cleanup, false);
                context = context.withNamespace(namespace);
                variable = namespace.accessDecl(context);
                // Borrow the case base.
                thenSteps ~= context.compiler.assignStatement(variable, castMember);
            } else {
                auto namespace = context.compiler.symbolAlias(
                    context.namespace, case_.identifier, castMember);
                context = context.withNamespace(namespace);
            }
            Expression userExpr = case_.expr.compile(context)?
                .beExpressionImplCall(context, caseLoc)?;
            (Statement | fail Error) userStmt() {
                Expression expr = context.compiler.expectImplicitConvertTo(context, userExpr, mergeType, caseLoc)?;
                return context.compiler.move(context, resultVal, expr);
            }
            thenSteps ~= userStmt?;
            if (cleanup && !singleUse) {
                if (auto destroy = variable.type.endLifetime(context, variable)) {
                    thenSteps ~= destroy;
                }
            }
            Statement then = context.compiler.sequenceStatement(thenSteps);
            Expression test = context.compiler.binaryOp(
                "==", context, new EitherType(baseExprTemp), context.compiler.intLiteral(matchIndex + 1), locRange)?;

            ifTree = context.compiler.ifStatement(test, then, ifTree);
        }

        for (i, case_ in this.cases) {
            int matchIndex = matchIndexes[i];

            assert(matchIndex != -1);

            handleCase(case_, matchIndex)?;
        }
        for (int i, handled in handled) {
            if (!handled) {
                // generate passthrough expr
                auto passthroughCase = ASTEitherCaseExprCase(
                    __RANGE__,
                    new ASTSymbolHelper(either.types[i].type),
                    "a",
                    fail=false,
                    new ASTIdentifier("a", moduleLevel=false, __RANGE__));
                handleCase(passthroughCase, i)?;
            }
        }
        assert(!!ifTree);

        return context.compiler.statementExpression(
            context.compiler.sequenceStatement([baseExprInit, initResultVal, ifTree.notNull]), resultVal);
    }

    override ASTSymbol quote(Quoter quoter) {
        with (quoter.compiler) {
            mut ASTSymbol[] quotedCases;
            for (case_ in this.cases) {
                quotedCases ~= astCall(
                    astIdentifier("ASTEitherCaseExprCase", __RANGE__), [
                        quoter.quoteLocRange(case_.locRange),
                        case_.type.quote(quoter),
                        astStringLiteral(case_.identifier, __RANGE__),
                        astBoolLiteral(case_.fail, __RANGE__),
                        case_.expr.quote(quoter)], __RANGE__);
            }
            auto typeHint = astIdentifier("ASTEitherCaseExprCase", __RANGE__);
            return quoter.compilerCall("astEitherCaseExpr", [
                this.base.quote(quoter),
                astArrayLiteralTypeHint(typeHint, quotedCases, this.locRange),
            ], locRange);
        }
    }
}

// expr.case(value: value, value: value)
private (Expression | fail Error) compileExprCaseExpr(Context context, Expression baseExpr, ASTExprCaseExprCase[] cases)
{
    bool cleanUp = baseExpr.info.lifetime == Lifetime.gifted;
    auto baseExprTemp = new PairedTemporaryExpr(
        baseExpr.type, Lifetime.permanent, context.getLabel);
    Statement baseExprInit = new InitializeTemporaryExprStatement(baseExprTemp, baseExpr);
    mut Type[] resultTypes;
    void mergeType(LocRange locRange, Type exprType) {
        // TODO centralize!
        import neat.bottom : Bottom;
        if (exprType.instanceOf(Bottom)) return;
        for (resultType in resultTypes)
            if (resultType.same(exprType)) return;
        resultTypes ~= exprType;
    }
    for (case_ in cases) {
        Expression expr = case_.expr.compile(context)?.beExpressionImplCall(context, case_.locRange)?;
        mergeType(case_.locRange, expr.type);
    }

    assert(resultTypes.length > 0);
    mut uninitialized Type mergeType;
    if (resultTypes.length == 1) mergeType = resultTypes[0];
    else {
        mut (bool fail, Type)[] members;
        for (type in resultTypes) members ~= (false, type);
        mergeType = new Either(members);
    }

    PairedTemporary resultVal = new PairedTemporary(mergeType, Lifetime.gifted, context.getLabel);
    Statement initResultVal = new UninitializeTemporaryStatement(resultVal);

    mut nullable Statement ifTree = (context.compiler.$stmt {
        import package(compiler).neat.runtime.stdlib : exit;

        print("Error: unhandled value in case expression");
        exit(1);
    }).compile(context)?.statement;
    for (case_ in cases) {
        Expression caseExpr = case_.expr.compile(context)?.beExpressionImplCall(context, case_.locRange)?;
        Expression cmpExpr = case_.value.compile(context)?.beExpressionImplCall(context, case_.locRange)?;
        Expression convCmpExpr = context.compiler.expectImplicitConvertTo(
            context, cmpExpr, baseExprTemp.type, case_.locRange)?;
        (Statement | fail Error) thenStmt() {
            Expression thenExpr = context.compiler.expectImplicitConvertTo(
                context, caseExpr, mergeType, case_.locRange)?;
            return context.compiler.move(context, resultVal, thenExpr);
        }
        mut nullable Statement cleanup;
        if (cleanUp) {
            if (auto destroy = baseExprTemp.type.endLifetime(context, baseExprTemp)) {
                cleanup = destroy;
            }
        }
        auto then = context.compiler.sequence(thenStmt?, cleanup);

        Expression test = context.compiler.binaryOp(
            "==", context, baseExprTemp, convCmpExpr, case_.locRange)?;
        ifTree = context.compiler.ifStatement(test, then, ifTree);
    }

    assert(!!ifTree);

    return context.compiler.statementExpression(
        context.compiler.sequenceStatement([baseExprInit, initResultVal, ifTree.notNull]), resultVal);
}

(nullable ASTSymbol | fail Error) parseCaseExpr(Parser parser, LexicalContext lexicalContext, ASTSymbol current)
{
    parser.begin;
    if (!(parser.accept(".")? && parser.acceptIdentifier("case")? && parser.accept("(")?))
    {
        parser.revert;
        return null;
    }
    auto from = parser.from?;
    parser.commit;

    mut ASTEitherCaseExprCase[] cases;
    while (!parser.accept(")")?)
    {
        if (cases.length) parser.expect(",")?;
        if (parser.accept(")")?) break; // .case(a, b,)
        auto caseFrom = parser.from?;
        mut bool parsedType;
        (ASTSymbol | fail Error) type() {
            if (auto ret = lexicalContext.compiler.parseType(parser, lexicalContext)?) {
                parsedType = true;
                return ret;
            }
            if (auto ret = lexicalContext.compiler.parseExpression(parser, lexicalContext)?)
                return ret;
            parser.to(caseFrom).assert(false, "case type or expression expected")?;
        }
        auto type = type?;
        mut string identifier;
        if (parsedType) identifier = parser.parseIdentifier?;
        parser.expect(":")?;
        ASTSymbol expr = lexicalContext.compiler.parseExpression(parser, lexicalContext)?
            .notNull;
        cases ~= ASTEitherCaseExprCase(parser.to(caseFrom), type, identifier, false, expr);
    }
    return new ASTEitherCaseExpr(parser.to(from), current, cases);
}

/**
 * a.case {
 *   T t: foo;
 *   U u: { bar; }
 * }
 */
class ASTEitherCaseStmt : ASTStatement
{
    ASTSymbol base;

    ASTEitherCaseStmtCase[] cases;

    nullable ASTStatement default_;

    this(this.locRange, this.base, this.cases, this.default_) { }

    override (StatementCompileResult | fail Error) compile(Context context) {
        auto baseExpr = base.compile(context)?
            .beExpressionImplCall(context, locRange)?;
        // FIXME
        // locRange.assert(baseExpr.info.lifetime != Lifetime.gifted, "TODO: Either base expr must not be gifted");
        auto baseType = baseExpr.type;
        auto either = baseType.instanceOf(Either);

        locRange.assert(!!either, "Expected Either for case expression")?;

        (nullable Statement | fail Error) do_(Expression baseExpr) {
            bool[] handled = new bool[](either.types.length);
            mut nullable Statement ifTree = null;
            for (case_ in this.cases) {
                Type type = case_.type.compile(context)?.beType(case_.locRange)?;

                mut int matched = -1;
                for (int k, entry in either.types) {
                    if (type.same(entry.type)) {
                        case_.locRange.assert(matched == -1, "either type " ~ type.repr() ~ " matched twice")?;
                        matched = k;
                    }
                }
                if (matched == -1) {
                    // look for weaker match
                    for (int k, entry in either.types) {
                        if (entry.type.triviallyConvertsTo(type)) {
                            case_.locRange.assert(matched == -1, "either type " ~ type.repr() ~ " matched twice")?;
                            matched = k;
                        }
                    }
                }
                case_.locRange.assert(matched != -1, "Type is not listed in Either!")?;
                handled[matched] = true;

                with (context.compiler) {
                    auto namespace = variableDeclaration(
                        context.namespace, case_.identifier, type, mut=false, borrowed=true, false);
                    Reference variable = namespace.accessDecl(context);
                    auto member = trivialCastTo(type, new EitherMember(baseExpr, matched));
                    Statement assignment = assignStatement(variable, member);
                    auto userStmtPair = case_.stmt.compile(context.withNamespace(namespace))?;
                    Statement then = sequenceStatement([assignment, userStmtPair.statement]);
                    Expression test = binaryOp(
                        "==", context, new EitherType(baseExpr), intLiteral(matched + 1), this.locRange)?;

                    ifTree = ifStatement(test, then, ifTree);
                }
            }
            for (int i, handled in handled) with (context.compiler) {
                if (auto default_ = this.default_) {
                    if (!handled) {
                        auto defaultPair = default_.compile(context)?;
                        Expression test = binaryOp(
                            "==", context, new EitherType(baseExpr), intLiteral(i + 1), this.locRange)?;
                        ifTree = ifStatement(test, defaultPair.statement, ifTree);
                    }
                } else if (!handled) {
                    return locRange.fail("Type " ~ either.types[i].type.repr() ~ " not handled!");
                }
            }
            return ifTree;
        }
        return StatementCompileResult(
            context.compiler.stmtWithTemporaryExpr(context.getLabel, baseExpr, &do_)?.notNull,
            context.namespace);
    }

    override ASTSymbol quote(Quoter quoter) {
        with (quoter.compiler) {
            mut ASTSymbol[] quotedCases;
            for (case_ in this.cases) {
                quotedCases ~= astCall(
                    astIdentifier("ASTEitherCaseStmtCase", __RANGE__), [
                        quoter.quoteLocRange(case_.locRange),
                        case_.type.quote(quoter),
                        astStringLiteral(case_.identifier, __RANGE__),
                        case_.stmt.quote(quoter)], __RANGE__);
            }
            ASTSymbol quote(nullable ASTStatement either) {
                // FIXME support with() access from nested function
                if (auto either = either) return either.quote(quoter);
                else return quoter.compiler.astIdentifier("null", __RANGE__);
            }
            auto typeHint = astIdentifier("ASTEitherCaseStmtCase", __RANGE__);
            return quoter.compilerCall("astEitherCaseStmt", [
                this.base.quote(quoter),
                astArrayLiteralTypeHint(typeHint, quotedCases, this.locRange),
                quote(this.default_),
            ], locRange);
        }
    }
}

(nullable ASTStatement | fail Error) parseEitherCaseStmt(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    auto expr = lexicalContext.compiler.parseExpressionLeaf(parser, lexicalContext)?;
    if (!expr) {
        parser.revert;
        return null;
    }
    auto member = expr.instanceOf(ASTMemberBase);
    auto from = parser.from?;
    if (!member || member.member != "case" || !parser.accept("{")?) {
        parser.revert;
        return null;
    }
    auto locRange = parser.to(from);
    parser.commit;

    mut ASTEitherCaseStmtCase[] cases;
    mut nullable ASTStatement default_ = null;
    while (!parser.accept("}")?) {
        auto caseFrom = parser.from?;
        if (parser.accept("default")?) {
            parser.expect(":")?;
            if (default_) {
                return parser.fail("cannot have more than one default block");
            }
            auto stmt = parseEitherBlock(parser, lexicalContext)?;
            default_ = stmt;
            continue;
        }

        auto type = lexicalContext.compiler.parseType(parser, lexicalContext)?;
        parser.assert_(!!type, "case type expected")?;
        // identifier can be empty
        string identifier = parser.parseIdentifier?;
        parser.expect(":")?;
        auto caseLocRange = parser.to(caseFrom);
        auto stmt = parseEitherBlock(parser, lexicalContext)?;
        cases ~= ASTEitherCaseStmtCase(caseLocRange, type.notNull, identifier, stmt);
    }
    return new ASTEitherCaseStmt(locRange, member.base, cases, default_);
}

(ASTStatement | fail Error) parseEitherBlock(Parser parser, LexicalContext lexicalContext)
{
    auto from = parser.from?;
    mut ASTStatement[] stmts;
    while (true) {
        parser.begin;
        bool end = parser.accept("}")?;
        parser.revert;
        if (end) break;
        // are we seeing a new block?
        parser.begin;
        // FIXME better to discard errors here?
        auto type = lexicalContext.compiler.parseType(parser, lexicalContext)?;
        parser.parseIdentifier?;
        // no .accept(): we do not permit whitespace before ':'
        bool newBlock = !parser.hard_eof && parser.text.front == ":"[0];
        parser.revert;
        if (newBlock) break;
        ASTStatement stmt = lexicalContext.compiler.parseStatement(parser, lexicalContext)?;
        stmts ~= stmt;
    }
    return lexicalContext.compiler.astScope(stmts, parser.to(from));
}
