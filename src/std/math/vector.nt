module std.math.vector;

macro import std.macro.assert;

import std.math;

// TODO generate documentation for aliases
alias vec2f = Vector(float, 2);
alias vec3f = Vector(float, 3);
alias vec4f = Vector(float, 4);

/// Compute the cross product of two vectors.
vec3f cross(vec3f a, vec3f b) {
    return a.yzx * b.zxy - a.zxy * b.yzx;
}

/// Return a normalized vector; that is, a vector with length 1.
vec3f normal(vec3f v) {
    return v / v.length;
}

unittest {
    assert(vec3f(2, 0, 0).normal == vec3f(1, 0, 0));
}

/// Return the length of the vector.
float length(vec2f v) {
    vec2f v2 = v * v;
    return sqrt(v2.x + v2.y);
}

/// Return the length of the vector.
float length(vec3f v) {
    vec3f v2 = v * v;
    return sqrt(v2.x + v2.y + v2.z);
}

/// Return the angle between two vectors in radians.
float angle(vec3f a, vec3f b) {
    auto prod = a * b;
    return acos(prod.x + prod.y + prod.z);
}
