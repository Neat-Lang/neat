module neat.lexer;

macro import package(compiler).std.macro.assert;

import neat.base;
import package(compiler).std.file;
import package(compiler).std.stdio;

struct Token {
    TokenType type;
    int pos;
    int row, col;
    string toString() return "<$(row+1):$(col+1): $type>";
}

(Token[] | Error) tokenize(string text, mut int row=0, mut int col=0) {
    mut auto result = new Token mut[](text.length + 1);
    mut size_t resultPos = 0;
    mut int pos = 0;
    mut int parenLevel = 0;
    mut int[] stringParenLevels;
    void stepRow(int dist, int cols) {
        pos += dist;
        col += cols;
    }
    void stepRow1() {
        stepRow(1, 1);
    }
    void stepNewline() {
        pos++;
        row++;
        col = 0;
    }
    void stepUtf8() {
        // FIXME return stepRow
        if (text[pos] < 0b1000_0000) { stepRow(1, 1); return; }
        if (text[pos] < 0b1110_0000) { stepRow(2, 1); return; }
        if (text[pos] < 0b1111_0000) { stepRow(3, 1); return; }
        stepRow(4, 1);
        return;
    }
    void addTokenInplace(TokenType type) {
        result[resultPos] = Token(type, pos, row, col);
        resultPos++;
    }
    void addToken(TokenType type, bool newline=false) {
        addTokenInplace(type);
        if (newline) stepNewline;
        else stepRow1;
    }
    auto isIdentStarter = ch => ch.isAlpha || ch == '_' || ch.isUtf8MbStart;
    auto isIdentMiddle = ch => ch.isAlnum || ch == '_' || ch.isUtf8MbStart;
    void stepStringLiteral(bool literalString=false, char terminator='"', TokenType quoteToken=TokenType.doubleQuote) {
        while (pos < text.length && text[pos] != terminator) {
            if (literalString) {
                if (text[pos] == '\n') stepNewline;
                else stepUtf8;
                continue;
            }
            if (pos < text.length - 1 && text[pos .. pos + 2] == "\$(") {
                stringParenLevels ~= parenLevel++;
                addToken(TokenType.formatQuoteStart);
                addToken(TokenType.lparen);
                return;
            }
            if (text[pos] == '$') {
                addToken(TokenType.formatQuoteStart);
                if (pos < text.length && text[pos].isIdentStarter) {
                    addToken(TokenType.identifier);
                    while (pos < text.length && text[pos].isIdentMiddle)
                        pos++;
                }
                if (pos < text.length && text[pos] != '"')
                    addTokenInplace(TokenType.stringLiteral);
                continue;
            }
            if (pos < text.length - 1 && text[pos] == '\\') {
                // skip escaped character
                stepRow1;
            }
            if (text[pos] == '\n') stepNewline;
            else stepUtf8;
        }
        if (pos < text.length)
            addToken(quoteToken);
    }
    while (pos < text.length) {
        auto ch = text[pos];
        if (ch.isIdentStarter) {
            addTokenInplace(TokenType.identifier);
            stepUtf8;
            while (pos < text.length && text[pos].isIdentMiddle)
                stepUtf8;
        }
        else if (ch.isWhitespace) {
            addToken(TokenType.whitespace, newline=text[pos] == '\n');
            while (pos < text.length && text[pos].isWhitespace) {
                if (text[pos] == '\n') stepNewline;
                else stepRow1;
            }
        }
        else if (ch.isNumeric) {
            addToken(TokenType.number);
            while (pos < text.length && (text[pos].isNumeric || text[pos] == '_'))
                stepRow1;
        }
        else if (ch == '/' && pos + 1 < text.length && text[pos + 1] == '/') {
            addToken(TokenType.comment);
            stepRow(1, 1);
            while (pos < text.length && text[pos] != '\n')
                stepRow1;
        }
        else if (ch == '/' && pos + 1 < text.length && text[pos + 1] == '*') {
            addToken(TokenType.comment);
            stepRow(1, 1);
            mut int depth = 1;
            while (pos + 1 < text.length) {
                if (text[pos .. pos + 2] == "/*") {
                    depth++;
                    stepRow(2, 2);
                } else if (text[pos .. pos + 2] == "*/") {
                    depth--;
                    stepRow(2, 2);
                    if (depth == 0) break;
                } else if (text[pos] == '\n') stepNewline;
                else stepUtf8;
            }
        }
        else if (ch == '\'') {
            addToken(TokenType.singleQuote);
            if (pos < text.length && text[pos] != '\'')
                addTokenInplace(TokenType.charLiteral);
            while (pos < text.length && text[pos] != '\'') {
                if (pos < text.length - 1 && text[pos] == '\\') {
                    // skip escaped character
                    stepRow1;
                }
                stepUtf8;
            }
            addToken(TokenType.singleQuote);
        }
        else if (ch == '"') {
            addToken(TokenType.doubleQuote);
            if (pos < text.length && text[pos] != '"')
                addTokenInplace(TokenType.stringLiteral);
            stepStringLiteral;
        }
        else if (ch == '`') {
            addToken(TokenType.backtick);
            if (pos < text.length && text[pos] != '`')
                addTokenInplace(TokenType.stringLiteral);
            stepStringLiteral(literalString=true, terminator='`', quoteToken=TokenType.backtick);
        }
        else if (ch == '(') {
            addToken(TokenType.lparen);
            parenLevel++;
        }
        else if (ch == ')') {
            addToken(TokenType.rparen);
            parenLevel--;
            if (!stringParenLevels.empty && stringParenLevels[$ - 1] == parenLevel) {
                addTokenInplace(TokenType.stringLiteral);
                stringParenLevels = stringParenLevels[0 .. $ - 1];
                stepStringLiteral;
            }
        }
        else if (ch == '.') addToken(TokenType.dot);
        else if (ch == ',') addToken(TokenType.comma);
        else if (ch == '`') addToken(TokenType.backtick);
        else if (ch == ':') addToken(TokenType.colon);
        else if (ch == ';') addToken(TokenType.semicolon);
        else if (ch == '<') addToken(TokenType.smaller);
        else if (ch == '>') addToken(TokenType.greater);
        else if (ch == '=') addToken(TokenType.equal);
        else if (ch == '!') addToken(TokenType.exclamationmark);
        else if (ch == '?') addToken(TokenType.questionmark);
        else if (ch == '$') addToken(TokenType.dollar);
        else if (ch == '[') addToken(TokenType.lsquarebracket);
        else if (ch == ']') addToken(TokenType.rsquarebracket);
        else if (ch == '{') addToken(TokenType.lcurlybracket);
        else if (ch == '}') addToken(TokenType.rcurlybracket);
        else if (ch == '+') addToken(TokenType.plus);
        else if (ch == '-') addToken(TokenType.minus);
        else if (ch == '*') addToken(TokenType.asterisk);
        else if (ch == '/') addToken(TokenType.slash);
        else if (ch == '\\') addToken(TokenType.backslash);
        else if (ch == '^') addToken(TokenType.circumflex);
        else if (ch == '%') addToken(TokenType.percent);
        else if (ch == '~') addToken(TokenType.tilde);
        else if (ch == '&') addToken(TokenType.ampersand);
        else if (ch == '|') addToken(TokenType.bar);
        else if (ch == '#') addToken(TokenType.hash);
        else {
            print("TODO $(cast(int) ch)");
            assert(false);
        }
    }
    addTokenInplace(TokenType.end);
    return result[0 .. resultPos].dup.freeze;
}

bool isAlpha(char ch) return ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z';
bool isNumeric(char ch) return ch >= '0' && ch <= '9';
bool isAlnum(char ch) return ch.isAlpha || ch.isNumeric;
bool isWhitespace(char ch) return ch == ' ' || ch == '\t' || ch == '\r' || ch == '\n';
bool isUtf8MbStart(char ch) return ch >= 0x80;

private (string | Error) annotate(string text) {
    import package(compiler).std.string : split;

    mut auto tokens = text.tokenize?;
    mut string annot;
    mut int pos = 0;

    while (pos < text.length) {
        while (!tokens.empty && tokens[0].pos < pos)
            tokens = tokens[1 .. $];
        if (!tokens.empty && tokens[0].pos == pos)
            annot ~= tokens[0].type.toString.front + 'A' - 'a';
        else
            annot ~= " ";
        if (text[pos] < 0b1000_0000) pos += 1;
        else if (text[pos] < 0b1110_0000) pos += 2;
        else if (text[pos] < 0b1111_0000) pos += 3;
        else pos += 4;
    }
    return annot;
}

unittest {
    assert(
        "assert(sin(Ï€) == 0);".annotate ==
        "I     LI  LIRWEEWNRS");
}

