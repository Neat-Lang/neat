/*******************************************************************************************
*
*   raylib [shapes] example - Colors palette
*
*   Example originally created with raylib 1.0, last time updated with raylib 2.5
*
*   Example licensed under an unmodified zlib/libpng license, which is an OSI-certified,
*   BSD-like license that allows static linking with closed source software
*
*   Copyright (c) 2014-2022 Ramon Santamaria (@raysan5)
*
********************************************************************************************/

module raylib;

macro import std.macro.cimport;
macro import std.macro.listcomprehension;

import c_header("raylib.h");
pragma(lib, "raylib");
pragma(lib, "glfw");
pragma(lib, "m");
pragma(lib, "pthread");

alias vec2f = Vector(float, 2);

void main() {
  int screenWidth = 1600;
  int screenHeight = 900;

  InitWindow(screenWidth, screenHeight, "raylib [shapes] example - colors palette");

  auto colors = [
    DARKGRAY, MAROON, ORANGE, DARKGREEN, DARKBLUE, DARKPURPLE, DARKBROWN,
    GRAY, RED, GOLD, LIME, BLUE, VIOLET, BROWN, LIGHTGRAY, PINK, YELLOW,
    GREEN, SKYBLUE, PURPLE, BEIGE,
  ];

  auto colorNames = [
    "DARKGRAY", "MAROON", "ORANGE", "DARKGREEN", "DARKBLUE", "DARKPURPLE",
    "DARKBROWN", "GRAY", "RED", "GOLD", "LIME", "BLUE", "VIOLET", "BROWN",
    "LIGHTGRAY", "PINK", "YELLOW", "GREEN", "SKYBLUE", "PURPLE", "BEIGE",
  ];

  mut Rectangle[] colorsRecs;
  for (mut int i = 0; i < colors.length; i++) {
    colorsRecs ~= Rectangle(
      x=40.0f + 200.0f * (i%7) + 20.0f * (i%7),
      y=160.0f + 200.0f * (i/7) + 20.0f * (i/7),
      width=200.0f,
      height=200.0f,
    );
  }

  int mut[] colorState = [0 for c in colors].dup;

  SetTargetFPS(60);

  while (!WindowShouldClose) {
      auto mousePoint = GetMousePosition.toVec;

      for (i in 0 .. colors.length) {
        if (CheckCollisionPointRec(mousePoint.fromVec, colorsRecs[i])) colorState[i] = 1;
        else colorState[i] = 0;
      }

      BeginDrawing;

        ClearBackground(RAYWHITE);

        DrawText("raylib colors palette", 56, 84, 40, BLACK);
        DrawText("press SPACE to see all colors", GetScreenWidth - 360, GetScreenHeight - 80, 20, GRAY);

        for (i in 0 .. colors.length) {
          float fade = 0.6f if colorState[i] else 1.0f;
          DrawRectangleRec(colorsRecs[i], Fade(colors[i], fade));

          if (IsKeyDown(KEY_SPACE) || colorState[i]) {
            DrawRectangle(
              cast(int)colorsRecs[i].x,
              cast(int)(colorsRecs[i].y + colorsRecs[i].height - 52),
              cast(int)colorsRecs[i].width,
              40,
              BLACK,
            );
            DrawRectangleLinesEx(colorsRecs[i], 6, Fade(BLACK, 0.3f));
            DrawText(
              colorNames[i].ptr,
              cast(int)(colorsRecs[i].x + colorsRecs[i].width - MeasureText(colorNames[i].ptr, 20) - 24),
              cast(int)(colorsRecs[i].y + colorsRecs[i].height - 40),
              20,
              colors[i],
            );
          }
        }

      EndDrawing;
  }
  CloseWindow;
}

vec2f toVec(Vector2 v) { return vec2f(v.x, v.y); }
Vector2 fromVec(vec2f v) { return Vector2(v.x, v.y); }

Color LIGHTGRAY() { return color(200, 200, 200, 255); }
Color GRAY() { return color(130, 130, 130, 255); }
Color DARKGRAY() { return color(80, 80, 80, 255); }
Color YELLOW() { return color(253, 249, 0, 255); }
Color GOLD() { return color(255, 203, 0, 255); }
Color ORANGE() { return color(255, 161, 0, 255); }
Color PINK() { return color(255, 109, 194, 255); }
Color RED() { return color(230, 41, 55, 255); }
Color MAROON() { return color(190, 33, 55, 255); }
Color GREEN() { return color(0, 228, 48, 255); }
Color LIME() { return color(0, 158, 47, 255); }
Color DARKGREEN() { return color(0, 117, 44, 255); }
Color SKYBLUE() { return color(102, 191, 255, 255); }
Color BLUE() { return color(0, 121, 241, 255); }
Color DARKBLUE() { return color(0, 82, 172, 255); }
Color PURPLE() { return color(200, 122, 255, 255); }
Color VIOLET() { return color(135, 60, 190, 255); }
Color DARKPURPLE() { return color(112, 31, 126, 255); }
Color BEIGE() { return color(211, 176, 131, 255); }
Color BROWN() { return color(127, 106, 79, 255); }
Color DARKBROWN() { return color(76, 63, 47, 255); }

Color WHITE() { return color(255, 255, 255, 255); }
Color BLACK() { return color(0, 0, 0, 255); }
Color BLANK() { return color(0, 0, 0, 0); }
Color MAGENTA() { return color(255, 0, 255, 255); }
Color RAYWHITE() { return color(245, 245, 245, 255); }
Color color(int r, int g, int b, int a) { return Color(cast(char) r, cast(char) g, cast(char) b, cast(char) a); }
