module heap_fun;

import neat.runtime : assert, print;

void main() {
    test_delegates;
    test_lambdas;
}

void test_delegates() {
    mut int delegate()[] dgs;
    int delegate() test(int i) {
        int nest() => i;
        return new &nest;
    }
    for (i in 0 .. 10) dgs ~= test(i);
    for (i in 0 .. 10) assert(dgs[i]() == i);
}

void test_lambdas() {
    mut Producer!int[] lambdas;
    Producer!int test(int i) {
        return lambdaAction(new () => i);
    }
    for (i in 0 .. 10) lambdas ~= test(i);
    for (i in 0 .. 10) assert(lambdas[i].call() == i);
}

interface Producer(T) {
    T call();
}

LambdaAction!T lambdaAction(T)(T lambda) {
    return new LambdaAction!T(lambda);
}

class LambdaAction(T) : Producer!int {
    T lambda;
    this(this.lambda) {}
    override int call() { return lambda(); }
}
