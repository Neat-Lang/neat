module neat.types;

import backend.base;
import helpers;
import neat.base;
import neat.util;
import package(compiler).std.thread;
import polyhash;

class Character : Type
{
    BackendType type;

    this() {
        this.type = new BackendCharType;
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other)
    {
        return !!other.instanceOf(Character);
    }

    override string repr() { return "char"; }

    override string mangle() { return "char"; }

    override void hash(Hash hash) { hash.adds("char"); }
}

class UByte : Type
{
    BackendType type;

    this() {
        this.type = new BackendCharType;
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other)
    {
        return !!other.instanceOf(UByte);
    }

    override string repr() { return "ubyte"; }

    override string mangle() { return "ubyte"; }

    override void hash(Hash hash) { hash.adds("ubyte"); }
}

class Boolean : Type
{
    BackendType type;
    this() {
        // FIXME transition
        // this.type = new BackendCharType;
        this.type = new BackendIntType;
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Boolean); }

    override string repr() { return "bool"; }

    override string mangle() { return "bool"; }

    override void hash(Hash hash) { hash.adds("bool"); }
}

class Integer : Type
{
    BackendType type;
    this() {
        this.type = new BackendIntType;
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Integer); }

    override (nullable Symbol | fail Error) accessMember(
        Context context, nullable Expression base, string field, Protection protection, LocRange locRange)
    {
        if (base) return null;
        if (field == "max") return context.compiler.intLiteral(0x7fff_ffff);
        if (field == "min") return context.compiler.intLiteral(0x8000_0000);
        return null;
    }


    override string repr() { return "int"; }

    override string mangle() { return "int"; }

    override void hash(Hash hash) { hash.adds("int"); }
}

class Long : Type
{
    BackendType type;
    this() {
        this.type = new BackendLongType;
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Long); }

    override string repr() { return "long"; }

    override string mangle() { return "long"; }

    override void hash(Hash hash) { hash.adds("long"); }
}

class Short : Type
{
    BackendType type;
    this() {
        this.type = new BackendShortType;
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Short); }

    override string repr() { return "short"; }

    override string mangle() { return "short"; }

    override void hash(Hash hash) { hash.adds("short"); }
}

class Float : Type
{
    BackendType type;
    this() {
        this.type = new BackendFloatType;
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Float); }

    override string repr() { return "float"; }

    override string mangle() { return "float"; }

    override void hash(Hash hash) { hash.adds("float"); }
}

class Double : Type
{
    BackendType type;
    this() {
        this.type = new BackendDoubleType;
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Double); }

    override string repr() { return "double"; }

    override string mangle() { return "double"; }

    override void hash(Hash hash) { hash.adds("double"); }
}

class ASTPointer : ASTSymbol
{
    ASTSymbol subType;

    this(this.subType, this.locRange) { }

    override (Type | fail Error) compile(Context context)
    {
        Type subType = subType.compile(context)?.beType(this.locRange)?;

        return new Pointer(subType);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astPointer", [subType.quote(quoter)], locRange);
    }

    override string repr() { return subType.repr ~ "*"; }
}

class ASTTypeof : ASTSymbol
{
    ASTSymbol value;

    this(this.value, this.locRange) { }

    override (Type | fail Error) compile(Context context)
    {
        auto scope_ = new TypeofScope(context.namespace, context.namespace.isContextScope);
        auto context = context.withNamespace(scope_);
        return this.value.compile(context)?.beExpressionImplCall(context, this.locRange)?.type;
    }

    override string repr() {
        return "typeof($(this.value.repr))";
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astTypeOf", [value.quote(quoter)], locRange);
    }
}

class TypeofScope : Namespace, Returnable, Declarable
{
    this(this.parent, this.isContextScope) { }

    override LatentVariable declare(string name, Type[] frame, bool mut, bool borrowed, Platform platform)
    {
        return new StubLatentVariable(frame[$ - 1]);
    }

    override string mangle() { return ""; } // Doesn't matter.

    override (Type | fail Error) mergeReturn(Context context, Expression ret, LocRange locRange) {
        return ret.type;
    }

    override (nullable Symbol | fail Error) lookup
    (string name, Context context, LookupReason reason, LocRange locRange)
    {
        return this.parent.lookup(name, context, reason, locRange)?;
    }

    override string repr() => "typeof()";
}

class StubLatentVariable : LatentVariable
{
    Type type_;

    this(this.type_) { }

    override Type type() => this.type_;

    override Expression localStackFrame(Context context) {
        return new NullExpr(new Void);
    }

    override Reference access(Context context) {
        return context.compiler.dereference(new NullExpr(new Pointer(this.type)));
    }
}

// hook type parsing
class TypeMacroArgs : MacroArgs
{
    Parser parser;
    LexicalContext lexicalContext;
    (nullable ASTSymbol | fail Error) astType; // out
    this(this.parser, this.lexicalContext) {
        this.astType = null;
    }
    override bool done() { return this.astType.case(nullable ASTSymbol sym: !!sym, Error: true); }
}

class ASTFunctionPointer : ASTSymbol
{
    ASTSymbol ret;

    ASTSymbol[] params;

    this(this.ret, this.params, this.locRange) { }

    override (Type | fail Error) compile(Context context)
    {
        auto ret = this.ret.compile(context)?.beType(this.locRange)?;
        mut Parameter[] params;
        for (param in this.params)
        {
            auto type = param.compile(context)?.beType(this.locRange)?;
            params ~= Parameter.fromType(type);
        }

        return new FunctionPointer(ret, params);
    }

    override string repr() {
        mut string res = ret.repr;
        res ~= " function(";
        for (i, p in params) {
            if (i) res ~= ", ";
            res ~= p.repr;
        }
        res ~= ")";
        return res;
    }

    override ASTSymbol quote(Quoter quoter) {
        mut ASTSymbol[] quotedParams;
        for (param in params)
            quotedParams ~= param.quote(quoter);
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTFunctionPointer", __RANGE__), [
                this.ret.quote(quoter),
                quoter.compiler.astArrayLiteral(quotedParams, __RANGE__),
                quoter.quoteLocRange(this.locRange)], __RANGE__);
    }
}

class FunctionPointer : Type
{
    Type ret;

    Parameter[] params;

    (BackendType type, Platform platform) backendCache;

    Mutex mutex;

    this(this.ret, this.params) {
        // FIXME "nullable" qualifier
        this.zeroInitializable = true;
        this.mutex = new Mutex;
    }

    override BackendType emit(Platform platform)
    {
        with (this.mutex.locked) {
            // TODO somehow memoize FunctionPointer?
            if (!backendCache.type || backendCache.platform !is platform) {
                auto params = new BackendType[](this.params.length);
                for (i, param in this.params) params[i] = param.type.emit(platform);
                backendCache.type = new BackendFunctionPointerType(this.ret.emit(platform), params, variadic=false);
            }
            return backendCache.type;
        }
    }

    override bool same(Type other)
    {
        if (auto otherPtr = other.instanceOf(FunctionPointer)) {
            if (!this.ret.same(otherPtr.ret)) return false;
            if (this.params.length != otherPtr.params.length) return false;
            for (i, param in this.params)
                if (!param.type.same(otherPtr.params[i].type)) return false;
            return true;
        }
        return false;
    }

    override string repr() {
        mut string ret = this.ret.repr ~ "(";
        for (i, param in this.params) {
            if (i) ret ~= ", ";
            ret ~= param.type.repr;
            if (param.name.length > 0)
                ret ~= " " ~ param.name;
        }
        return ret ~ ")";
    }

    override string mangle() {
        // return "fp_" ~ this.ret.repr ~ "_" ~ this.params.map!repr.join("_");
        mut string ret = "fp_" ~ this.ret.repr;
        for (i, param in this.params)
            ret ~= "_" ~ param.type.mangle;
        return ret;
    }

    override void hash(Hash hash) {
        hash.adds("funcptr");
        ret.hash(hash);
        hash.addl(params.length);
        for (i, param in params)
            param.type.hash(hash);
    }
}

class ASTNestedFunctionPointer : ASTSymbol
{
    ASTSymbol ret;

    bool copyable;

    ASTSymbol[] params;

    this(this.ret, this.copyable, this.params, this.locRange) { }

    override (Type | fail Error) compile(Context context)
    {
        Type ret = this.ret.compile(context)?.beType(this.locRange)?;
        mut Type[] params;
        for (arg in this.params) {
            params ~= arg.compile(context)?.beType(arg.locRange)?;
        }

        return new NestedFunctionPointer(ret, copyable, params);
    }

    override string repr() {
        mut string res = ret.repr;
        res ~= " delegate(";
        for (i, p in params) {
            if (i) res ~= ", ";
            res ~= p.repr;
        }
        res ~= ")";
        return res;
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTNestedFunctionPointer'!"); assert(false); }
}

/**
 * { void *base; void *data; Ret(Args...) funcptr; }
 * base is held in reserve for when we reference count delegates
 * TODO: remove base, didn't need it after all
 * void delegate!() is uncopyable, and the type of nested functions in stack functions
 */
class NestedFunctionPointer : Type
{
    Type ret;

    Type[] params;

    bool copyable;

    this(this.ret, this.copyable, this.params) {
        // FIXME nullable qualifier
        this.zeroInitializable = true;
    }

    override (Expression | fail Error) copy(Context context, Expression source, LocRange locRange)
    {
        if (copyable)
            return source;
        context.assert2(false, locRange, "cannot copy uncopyable delegate type")?;
    }

    override BackendType emit(Platform platform) {
        auto params = new BackendType[](this.params.length + 1);
        params[0] = platform.voidp;
        for (i, param in this.params) params[i + 1] = param.emit(platform);
        auto fp = new BackendFunctionPointerType(this.ret.emit(platform), params, variadic=false);
        return new BackendStructType([platform.voidp, platform.voidp, fp]);
    }

    override bool same(Type other) {
        if (auto otherPtr = other.instanceOf(NestedFunctionPointer)) {
            if (!this.ret.same(otherPtr.ret)) return false;
            if (copyable != otherPtr.copyable) return false;
            if (this.params.length != otherPtr.params.length) return false;
            for (i, param in this.params)
                if (!param.same(otherPtr.params[i])) return false;
            return true;
        }
        return false;
    }

    override nullable Expression implicitConvertTo(Context context, Expression source, Type target)
    {
        // TODO
        // auto otherPtr = target.instanceOf(NestedFunctionPointer).case(null: return null);
        if (!target.instanceOf(NestedFunctionPointer)) return null;
        auto otherPtr = target.instanceOf(NestedFunctionPointer).notNull;
        if (!this.ret.same(otherPtr.ret)) return null;
        if (this.params.length != otherPtr.params.length) return null;
        for (i, param in this.params)
            if (!param.same(otherPtr.params[i])) return null;

        // this is the important bit: noncopyable doesn't implconv to copyable.
        if (!copyable && otherPtr.copyable) return null;

        return context.compiler.castTo(target, source);
    }

    override string repr() {
        mut string ret = this.ret.repr ~ " delegate";
        if (!copyable) ret ~= "!";
        ret ~= "(";
        for (i, param in this.params) {
            if (i) ret ~= ", ";
            ret ~= param.repr;
        }
        return ret ~ ")";
    }

    override string mangle() {
        // return "dg_" ~ this.ret.repr ~ "_" ~ this.params.map!repr.join("_");
        mut string ret = "dg_";
        if (copyable) ret ~= "copyable_";
        ret ~= this.ret.mangle;
        for (param in this.params)
            ret ~= "_" ~ param.mangle;
        return ret;
    }

    override void hash(Hash hash) {
        hash.adds("dgptr");
        hash.addl(copyable);
        ret.hash(hash);
        hash.addl(params.length);
        for (param in this.params)
            param.hash(hash);
    }
}

Type nativeWordType(Platform platform)
{
    BackendType type = platform.nativeWordType;
    if (type.instanceOf(BackendIntType)) return new Integer;
    if (type.instanceOf(BackendLongType)) return new Long;
    assert(false);
}
