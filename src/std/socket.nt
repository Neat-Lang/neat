// thanks for the busywork, gpt3.5!
module std.socket;

// FIXME move into std.
import neat.base : LocRange;
import std.error;
import std.stream;

class SocketError : Error {
}

(Socket | fail SocketError) connect(string host, short port) {
    import std.string : toStringz;

    int handle = socket(AF_INET, SOCK_STREAM, 0);
    if (handle == -1) {
        return new SocketError("Failed to create socket: $errnoStr", __RANGE__);
    }

    hostent* hostInfo = gethostbyname(host.toStringz);
    if (hostInfo is null) {
        return new SocketError("Failed to resolve host: $errnoStr", __RANGE__);
    }

    auto addr = sockaddr_in(AF_INET, htons(port), in_addr((cast(int*)(hostInfo.h_addr_list[0]))[0]), 0);

    if (connect(handle, &addr, sizeof(sockaddr_in)) == -1) {
        return new SocketError("Failed to connect to host: $errnoStr", __RANGE__);
    }

    return new Socket(handle);
}

// This is a good candidate for "non-empty array" type once we have that.
class Socket : Source!(ubyte[]), Sink!(ubyte[])
{
    private int handle;

    private ubyte[] recvBuf;

    // package this(this.handle) { }
    public this(this.handle) { }

    public (void | fail SocketError) send(mut ubyte[] data) {
        while (!data.empty) {
            auto result = .send(this.handle, data.ptr, data.length, 0);
            if (result == -1) {
                return new SocketError("Failed to send data", __RANGE__);
            }
            data = data[result .. $];
        }
    }

    public override (void | Error) put(ubyte[] data) {
        send(data)?;
    }

    public (ubyte[] | fail SocketError) receive(ubyte[] buffer) {
        auto result = recv(this.handle, buffer.ptr, buffer.length, 0);
        if (result == -1) {
            return new SocketError("Failed to receive data", __RANGE__);
        }

        return buffer[0 .. result];
    }

    public override (ubyte[] | :else | Error) get() {
        if (this.recvBuf.empty) this.recvBuf = new ubyte[](4096);
        auto result = receive(this.recvBuf)?;
        if (result.empty) return :else;
        return result;
    }

    void close() {
        .close(this.handle);
    }
}

alias AF_INET = 2;
alias SOCK_STREAM = 1;

struct hostent {
    char* h_name;
    char** h_aliases;
    int h_addrtype;
    int h_length;
    char** h_addr_list;
}

struct in_addr {
    int s_addr;
}

struct sockaddr_in {
    short sin_family;
    short sin_port;
    in_addr sin_addr;
    long padding;
}

extern(C) int socket(int domain, int type, int protocol);
extern(C) int connect(int sockfd, void* addr, int addrlen);
extern(C) hostent* gethostbyname(char* name);
extern(C) short htons(short hostshort);
extern(C) size_t send(int sockfd, void* buf, size_t len, int flags);
extern(C) size_t recv(int sockfd, void* buf, size_t len, int flags);
extern(C) void close(int fd);
extern(C) char* strerror(int errnum);
extern(C) int neat_runtime_errno();

string errnoStr() {
    import std.string : cToString;

    return cToString(strerror(neat_runtime_errno()));
}
