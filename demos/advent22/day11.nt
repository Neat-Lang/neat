module day11;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.math;
import std.stdio;
import std.string;

alias Parameter = (:old | int);
alias Op = (:mul | :add);
alias Arith = (Parameter left, Op op, Parameter right);

struct Monkey {
    int[] items;
    long inspected;
    Arith arith;
    int test, ifTrue, ifFalse;
}

long applyOp(Arith arith, int value) {
    long left = arith.left.case(int i: i, :old: value);
    long right = arith.right.case(int i: i, :old: value);
    return arith.op.case(:mul: left * right, :add: left + right);
}

Parameter parseParam(string s) {
    if (s == "old") return :old;
    return s.atoi;
}

Op parseOp(string s) => s.case("*": :mul, "+": :add);

Monkey parseMonkey(string[] block) {
    assert(block[1].startsWith("  Starting items"));
    auto items = block[1].split(": ")[1]
        .split(", ").map(a => a.atoi).array;
    assert(block[2].startsWith("  Operation: new = "));
    auto operation = block[2].split("new = ")[1]
        .split(" ")
        .(left=that[0].parseParam, op=that[1].parseOp, that[2].parseParam);
    assert(block[3].startsWith("  Test: divisible by "));
    auto div = block[3].split(" by ")[1].atoi;
    auto ifTrue = block[4].split("throw to monkey ")[1].atoi;
    auto ifFalse = block[5].split("throw to monkey ")[1].atoi;
    return Monkey(items, 0, operation, div, ifTrue, ifFalse);
}

void round(Monkey[] monkeys, bool divideByThree, int divProd) {
    for (i in 0 .. monkeys.length) with (monkeys[i]) {
        for (item in items) {
            inspected++;
            auto newWorryLevel = arith.applyOp(item) / 3 if divideByThree else arith.applyOp(item);
            auto managedWorryLevel = cast(int) (newWorryLevel % divProd);
            if (managedWorryLevel % test == 0)
                monkeys[ifTrue].items ~= managedWorryLevel;
            else
                monkeys[ifFalse].items ~= managedWorryLevel;
        }
        items = null;
    }
}

void main()
{
    auto lines = stdin.byLine.array;
    auto monkeys = lines.splitter("").map(a => a.array.parseMonkey).array;
    // "keep worry levels manageable" so operate in ring appropriate for divisor checks
    mut int divProd = 1;
    for (monkey in monkeys) divProd *= monkey.test;

    for (rounds in [20, 10000]) {
        auto monkeys2 = monkeys.dup;
        for (_ in 0 .. rounds) {
            round(monkeys2, divideByThree=(true if rounds == 20 else false), divProd=divProd);
        }
        auto monkeys2 = monkeys2.sort((a, b) => a.inspected > b.inspected);
        auto monkeyBusiness = monkeys2.(that[0].inspected * that[1].inspected);
        print("after $rounds rounds, monkey business $monkeyBusiness");
    }
}
