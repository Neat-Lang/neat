module day7;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.stdio;
import std.string;

alias Entry = (Folder, string | int, string);

class Folder {
    Entry[] entries;
    this() { }
    Folder cd(string[] path) {
        if (path.empty) return this;
        for (entry in entries) entry.case {
            (Folder fdr, string name):
                if (name == path[0]) return fdr.cd(path[1 .. $]);
            (int size, string name):
                if (name == path[0]) {
                    print("$(path[0]) is not a directory!");
                    assert(false);
                }
        }
        print("no such path: $path");
        assert(false);
    }
}

class Computer {
    string[] cwd;
    Folder root;
    this() { this.root = new Folder; }
    void goToFolder(string folder) {
        if (folder == "/") cwd = [];
        else if (folder == "..") cwd = cwd[0 .. $ - 1];
        else cwd ~= folder;
    }
    void addFiles(string[] args) {
        auto folder = root.cd(cwd);
        for (arg in args) {
            if (arg.startsWith("dir ")) {
                folder.entries ~= (new Folder, arg[4 .. $]);
            } else {
                auto parts = arg.split(" ");
                folder.entries ~= (parts[0].atoi, parts[1]);
            }
        }
    }
    void exec(string cmd, string[] args) {
        if (cmd.startsWith("cd "))
            goToFolder(cmd[3 .. $]);
        else if (cmd.startsWith("ls"))
            addFiles(args);
        else {
            print("unknown command: $cmd $args");
            assert(false);
        }
    }
}

void solve(Computer computer) {
    Folder[] allFolders() {
        Folder[] subfolders(Folder f) {
            mut Folder[] res;
            for (entry in f.entries) entry.case {
                (Folder g, string): res ~= g;
                (int sz, string): {}
            }
            return res;
        }
        Folder[] walk(Folder f) {
            return [f] ~ [join walk(g) for g in f.subfolders];
        }
        return walk(computer.root);
    }
    int size(Folder folder) {
        int walk(Entry e) {
            return e.case(
                (Folder f, string): size(f),
                (int size, string): size);
        }
        return [sum walk(e) for e in folder.entries];
    }
    auto result = [sum f.size for f in allFolders where f.size < 100000];
    print("Sum of total sizes: $result");
    int disksz = 70_000_000;
    int targetUsed = 40_000_000;
    int used = computer.root.size;
    int needToFree = used - targetUsed;
    auto result2 = [argmin(f.size) f.size for f in allFolders where f.size >= needToFree];
    print("The total size is $result2");
}

void main()
{
    auto lines = stdin.byLine.array;
    auto computer = new Computer;
    for (mut int i = 0; i < lines.length; i++) {
        auto cmd = lines[i][2 .. $];
        mut string[] args;
        while (i + 1 < lines.length && !lines[i + 1].startsWith("\$")) {
            i++;
            args ~= lines[i];
        }
        computer.exec(cmd, args);
    }
    solve(computer);
}
