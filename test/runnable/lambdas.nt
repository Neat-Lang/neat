module lambdas;

macro import std.macro.assert;

void main() {
    int i = 2;
    auto f = a => a + i;
    assert(f(5) == 7);
    assert((a => a * i)(5) == 10);
    assert(f(2.5) == 4.5);
    void foo(typeof(f) g) {
        assert(f(3.5) == 5.5);
        assert(g(4.5) == 6.5);
    }
    foo(f);
    auto add = (a, b) => a + b;
    assert(add(2, 3) == 5);
    bugRepro;
}

void bugRepro() {
    int i = 23;
    auto foo = j => i == j;
    // instantiate at stack depth 0
    foo(23);
    // instantiate at stack depth 1
    bool bar(int j) { return foo(j); }
    assert(bar(23));
}
