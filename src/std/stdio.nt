module std.stdio;

public import neat.runtime.stdlib : stdin, stdout, stderr;

/**
 * Print a string to standard output.
 */
void print(string str) {
    import neat.runtime.stdlib : fflush, printf,
        neat_runtime_lock_stdout, neat_runtime_unlock_stdout;

    neat_runtime_lock_stdout;
    printf("%.*s\n".ptr, cast(int) str.length, str.ptr);
    fflush(stdout);
    neat_runtime_unlock_stdout;
}

public LineReader byLine(void* fileHandle) {
    import neat.runtime.stdlib : free;
    mut char *lineptr;
    mut size_t n;
    auto len = getline(&lineptr, &n, fileHandle);
    if (len == -1) {
        free(lineptr);
        return LineReader(fileHandle, empty=true, front=null);
    }
    // I see no good reason why you'd ever want the newline character in there.
    auto adjLen = 0 if len == 0
        else len - 2 if lineptr[len - 2 .. len] == "\r\n"
        else len - 1 if lineptr[len - 1 .. len] == "\n"
        else len;
    // TODO auto bufCopy = lineptr[0 .. n].dup;
    auto bufCopy = new char[](adjLen);
    for (i in 0 .. adjLen) bufCopy[i] = lineptr[i];
    free(lineptr);
    return LineReader(fileHandle, empty=false, front=bufCopy);
}

private extern(C) size_t getline(char** lineptr, size_t* n, void* stream);

private struct LineReader {
    void* fileHandle;
    bool empty;
    string front;
    LineReader next() { return fileHandle.byLine; }
}
