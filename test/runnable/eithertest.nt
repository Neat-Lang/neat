module eithertest;

macro import std.macro.assert;

import std.string : itoa;

extern(C) void print(string);

(size_t | fail :notFound) find(string text, string marker) {
    for (i in 0 .. text.length - marker.length + 1) {
        if (text[i .. i + marker.length] == marker)
            return i;
    }
    return :notFound;
}

void main() {
    (int | float) either1 = 5;
    string s = either1.case(int i: "int " ~ itoa(i), float: "float");
    // should be one ref
    // TODO
    // assert(*cast(size_t*) s.base == 1);
    assert(s == "int 5");

    // case() does not need to be complete
    int test_case_default() {
        float f = either1.case(int i: return i);
        assert(false);
    }
    assert(test_case_default == 5);

    float f = 2;
    (int | float) either2 = f;
    assert(either2.case(int i: "int", float: "float") == "float");

    mut (int, int | int) either3 = (2, 2);
    either3 = 5;

    int test() {
        (int, int) remainder = either3.case(
            (int a, int b): (a, b),
            int i: return i,
        );
        assert(false);
    }
    assert(test == 5);

    mut int count;
    (:a | :b) countCalls() { count += 1; return :a; }
    countCalls.case { (:a): {} (:b): {} }
    assert(count == 1);

    ((:a | :b), (:c | :d)) test = (:a, :c);

    (:notFound | :success) test1() {
        size_t pos = "HelloWorld".find("oWo")?;
        assert(pos == 4);
        return :success;
    }
    test1.case {
        (:notFound): assert(false);
        (:success): {}
    }

    :notFound test2() {
        auto pos = "HelloWorld".find("uwu")?;
        assert(false);
    }
    test2;

    ((:a | :b), int | :c) test3 = (:a, 5);

    assert(test3 == (:a, 5));

    (:a | :b) test4 = :a;
    assert(test4 == :a);

    // but case can also take a pure expression
    assert(5.case(5: "A", 6: "B") == "A");

    print("Success.");
}
