module neat.hashmap;

macro import package(compiler).std.macro.once;
macro import package(compiler).std.macro.quasiquoting;

import backend.base;
import neat.array;
import neat.base;
import neat.decl;
import neat.either;
import neat.expr;
import neat.formatstring;
import neat.runtime : assert;
import neat.statements;
import neat.struct_;
import neat.tuples;
import neat.types;
import neat.util;
import polyhash;

/**
 * Hashmaps are simpler than arrays: the hashmap value is just a pointer to the hashmap object.
 *
 * (This is because they cannot be sliced.)
 *
 * Hashmap objects have the following layout:
 * {
 *      size_t references;
 *      size_t length; // number of occupied slots
 *      size_t capacity; // number of total slots
 * }
 *
 * It is then followed directly by the hashmap data, which consists of this type:
 *
 * (Key key, Value value | :empty | :gravestone)
 */
class HashMap : Type
{
    // FIXME pending
    Type key, value;

    this(this.key, this.value) {
        this.zeroInitializable = true;
        this.hasElaborateCopyConstructor = true;
    }

    override BackendType emit(Platform platform)
    {
        return platform.voidp;
    }

    override bool same(Type other)
    {
        if (auto otherHashmap = other.instanceOf(HashMap))
            return key.same(otherHashmap.key) && value.same(otherHashmap.value);
        return false;
    }

    override string repr() { return "$(this.value.repr)[$(this.key.repr)]"; }

    override string mangle() { return "hashmap_$(this.key.mangle)_to_$(this.value.mangle)"; }

    override void hash(Hash hash) { hash.adds("hashmap"); this.key.hash(hash); this.value.hash(hash); }

    override (Expression | fail Error) copy(Context context, Expression source)
    {
        auto compiler = context.compiler;
        (nullable Expression | fail Error) do_(Expression source) {
            mut auto context = context.withNamespace(context.compiler.exprAlias(context.namespace, "source", source));
            auto refCountIncFun = new FunctionDeclaration(
                "neat_runtime_refcount_inc", new Void, [
                    Parameter.simple("label", new Array(new Character, context.platform)),
                    Parameter.simple("ptr", new Pointer(new Void))]);
            context = context.withNamespace(context.compiler.exprAlias(
                        context.namespace, "neat_runtime_refcount_inc", refCountIncFun));
            // count up reference
            auto stmt = compiler.$stmt if (cast(void*) source != null) {
                neat_runtime_refcount_inc("hashmap acquire", cast(size_t*) source);
            };
            auto result = stmt.compile(context)?;
            return compiler.statementExpression(result.statement, source);
        }
        return compiler.exprWithTemporaryExpr(context.getUniqueId, source, &do_)?.notNull;
    }

    override nullable Statement endLifetime(Context context, Expression expr)
    {
        return context.compiler.exprStatement(releaseHashmap(context, expr));
    }

    override (nullable Symbol | fail Error) accessMember(
        Context context, nullable Expression base, string field, Protection protection, LocRange locRange)
    {
        if (auto base = base) {
            if (field == "keys") {
                return keysHashmap(context, this, base);
            }
            if (field == "values") {
                return valuesHashmap(context, this, base);
            }
            if (field == "clear") {
                return clearHashmap(context, this, base);
            }
        }
        return null;
    }

    override (nullable Expression | fail Error) callMember(
        Context context, nullable Expression base, string field, ASTArgument[] args, Protection protection, LocRange locRange)
    {
        if (auto base = base) {
            if (field == "set") {
                locRange.assert(args.length == 2, "hashmap.set() expects key, value")?;
                auto key = args[0].sym.compile(context)?.beExpressionImplCall(context, args[0].locRange)?;
                auto value = args[1].sym.compile(context)?.beExpressionImplCall(context, args[1].locRange)?;
                auto keyConv = expectImplicitConvertTo(context, key, this.key, args[0].locRange)?;
                auto valueConv = expectImplicitConvertTo(context, value, this.value, args[1].locRange)?;
                auto set = setHashmap(context, this, base, keyConv, valueConv, locRange)?;
                return context.compiler.statementExpression(set, context.compiler.voidLiteral);
            }
            if (field == "get") {
                locRange.assert(args.length == 2, "hashmap.get() expects two parameters, key and default")?;
                auto key = args[0].sym.compile(context)?.beExpressionImplCall(context, args[0].locRange)?;
                auto deflt = args[1].sym.compile(context)?.beExpressionImplCall(context, args[1].locRange)?;
                return getHashmapDefault(context, locRange, this, base, key, deflt, insert=false);
            }
            if (field == "require") {
                locRange.assert(args.length == 2, "hashmap.require() expects two parameters, key and default")?;
                auto key = args[0].sym.compile(context)?.beExpressionImplCall(context, args[0].locRange)?;
                auto deflt = args[1].sym.compile(context)?.beExpressionImplCall(context, args[1].locRange)?;
                return getHashmapDefault(context, locRange, this, base, key, deflt, insert=true);
            }
            if (field == "has") {
                locRange.assert(args.length == 1, "hashmap.has() expects one parameter, key")?;
                auto key = args[0].sym.compile(context)?.beExpressionImplCall(context, args[0].locRange)?;
                return hasKeyHashmap(context, this, base, key);
            }
            if (field == "resize") {
                auto newsize = args[0].sym.compile(context)?.beExpressionImplCall(context, args[0].locRange)?;
                return resizeHashmap(context, this, base, newsize);
            }
            if (field == "remove") {
                locRange.assert(args.length == 1, "hashmap.remove() expects one parameter, key")?;
                auto key = args[0].sym.compile(context)?.beExpressionImplCall(context, args[0].locRange)?;
                return removeKeyHashmap(context, this, base, key);
            }
            if (field == "clear") {
                locRange.assert(args.length == 0, "hashmap.clear() expects no parameters")?;
                return clearHashmap(context, this, base);
            }
        } else {
            if (field == "allocate") {
                locRange.assert(args.length == 1, "hashmap.allocate() expects one parameter, size")?;
                auto size = args[0].sym.compile(context)?.beExpressionImplCall(context, args[0].locRange)?;
                auto sizeT = expectImplicitConvertTo(context, size, context.nativeWordType, args[0].locRange)?;
                return allocateHashmap(context, this, sizeT);
            }
            if (field == "hash") {
                locRange.assert(args.length == 1, "hashmap.hash() expects one parameter, key")?;
                auto key = args[0].sym.compile(context)?.beExpressionImplCall(context, args[0].locRange)?;
                return hashFun(context, locRange, this, key);
            }
        }
        return null;
    }

    override (nullable Expression | fail Error) index(
        Context context, Expression base, Expression index, LocRange locRange)
    {
        auto indexConv = expectImplicitConvertTo(context, index, this.key, locRange)?;
        return getHashmap(context, this, base, indexConv);
    }

    override (nullable Statement | fail Error) indexAssignment(
        Context context, Expression base, Expression index, Expression value, LocRange locRange)
    {
        auto indexConv = expectImplicitConvertTo(context, index, this.key, locRange)?;
        auto valueConv = expectImplicitConvertTo(context, value, this.value, locRange)?;
        return setHashmap(context, this, base, indexConv, valueConv, locRange);
    }
}

private ASTSymbol hashWrap(Context context, HashMap hashmap, ASTSymbol value) {
    auto keyType = new ASTSymbolHelper(hashmap.key), valueType = new ASTSymbolHelper(hashmap.value);
    return context.compiler.$expr ({
        0; // remove at your own risk
        alias Key = $keyType;
        alias Value = $valueType;
        struct HashMapBase {
            size_t references;
            size_t length;
            size_t capacity;
        }
        alias HashMapRow = (Key key, Value value | :empty | :gravestone);
        $value;
    });
}

private (Expression | fail Error) hashFun(Context context, LocRange locRange, HashMap hashmap, Expression key) {
    Parameter[] params = [
        Parameter.simple("key", key.type)];

    bool isString = key.type.same(new Array(new Character, context.platform));
    bool isInt = key.type.same(once new Integer) || key.type.same(once new Long);
    if (!isString && !isInt) {
        return locRange.fail("TODO: hash() of $(key.type.repr)");
    }
    // TODO proper unsigned types
    ASTSymbol hashfn() {
        if (isString) {
            return context.compiler.$expr ({
                // fnv hash
                mut int hash = 0x811c9dc5;
                for (auto ch in key) {
                    hash ^= cast(int) ch;
                    hash *= 0x01000193;
                }
                if (hash < 0) hash = -hash;
                hash;
            });
        }
        if (isInt) {
            // knuth hash
            return context.compiler.$expr ({
                mut int hash = key * cast(int) 2654435761;
                if (hash < 0) hash = -hash;
                hash;
            });
        }
        locRange.hardCheck(false, "internal error");
    }
    ASTStatement body_() {
        return context.compiler.(
            astExpressionStmt(astReturn(hashWrap(context, hashmap, hashfn), __RANGE__), __RANGE__));
    }

    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_hash", context.nativeWordType, params, &body_);

    return context.compiler.mkCall(fn, [key], __RANGE__);
}

private Expression allocateHashmap(Context context, HashMap hashmap, Expression size) {
    Parameter[] params = [
        Parameter.simple("size", context.nativeWordType)];

    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            auto bytesize = sizeof(HashMapBase) + sizeof(HashMapRow) * size;
            auto ret = neat_runtime_alloc(bytesize);
            auto base = cast(HashMapBase*) ret;
            base.references = 1;
            base.length = 0;
            base.capacity = size;
            auto rows = cast(HashMapRow*) &base[1];
            for (auto i in 0 .. size)
                rows[i] = :empty;
            cast(Value[Key]) base;
        });
        return context.compiler.(
            astExpressionStmt(astReturn(hashWrap(context, hashmap, expr), __RANGE__), __RANGE__));
    }

    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_allocate", hashmap, params, &body_);

    return context.compiler.mkCall(fn, [size], __RANGE__);
}

private Expression resizeHashmap(Context context, HashMap hashmap, Expression base, Expression newsize) {
    (Expression | fail Error) do_(Expression base) {
        return plainResizeHashmap(context, hashmap, base, newsize);
    }
    context.compiler.consume(context, base, &do_).case {
        Expression e: return e;
        Error err: assert(false);
    }
}

private Expression plainResizeHashmap(Context context, HashMap hashmap, Expression base, Expression newsize) {
    Parameter[] params = [
        Parameter.simple("base", hashmap),
        Parameter.simple("newsize", context.nativeWordType)];

    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            auto data = cast(HashMapBase*) base;
            auto rows = cast(HashMapRow*) &data[1];
            // FIXME
            alias T = Value[Key];
            mut auto newHashmap = T.allocate(newsize);
            for (i in 0 .. data.capacity) {
                0; // remove at your peril
                rows[i].case {
                    (:empty): continue;
                    (:gravestone): continue;
                    (Key key, Value value): newHashmap.set(key, value);
                }
            }
            newHashmap;
        });
        return context.compiler.(
            astExpressionStmt(astReturn(hashWrap(context, hashmap, expr), __RANGE__), __RANGE__));
    }

    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_resize", hashmap, params, &body_);

    return context.compiler.mkCall(fn, [base, newsize], __RANGE__);
}

private (Statement | fail Error) setHashmap(
    Context context, HashMap hashmap, Expression base, Expression key, Expression value, LocRange locRange)
{
    auto baseRef = base.instanceOf(Reference);
    locRange.assert(!!baseRef && baseRef.mutable, "target of hashmap assignment must be mutable")?;
    auto baseRef = baseRef.notNull;
    // we temporize value first thing, because evaluating value may change the addresss of the hashmap.
    (nullable Statement | fail Error) do3(Expression value) {
        // Then key, same reason.
        (nullable Statement | fail Error) do2(Expression key) {
            // mark value for consumption.
            Statement do1(Expression value) {
                return plainSetHashmap(context, hashmap, baseRef, key, value);
            }
            return context.compiler.consumeStmt(context, value, &do1);
        }
        return context.compiler.stmtWithTemporaryExpr(context.getUniqueId, key, &do2);
    }
    return context.compiler.stmtWithTemporaryExpr(context.getUniqueId, value, &do3).case(
        nullable Statement st: st.notNull, Error err: err);
}

private Statement plainSetHashmap(Context context, HashMap hashmap, Reference base, Expression key, Expression value) {
    Parameter[] params = [
        Parameter.simple("base", hashmap),
        Parameter.simple("key", hashmap.key),
        Parameter.simple("value", hashmap.value)];

    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            // FIXME
            alias T = Value[Key];
            auto hash = T.hash(key);
            mut auto data = cast(HashMapBase*) base;
            if (!data) {
                auto newHashmap = T.allocate(4);
                data = cast(HashMapBase*) newHashmap; // storing in a pointer
            } else if (data.length + 1 >= data.capacity / 2) {
                mut size_t newsize = data.capacity * 2;
                if (newsize < 4) newsize = 4;
                auto resized = base.resize(newsize);
                data = cast(HashMapBase*) resized;
            } else {
                // we'll return data, so make a gift
                data.references += 1;
            }
            auto rows = cast(HashMapRow*) &data[1];
            for (i in 0 .. data.capacity) {
                size_t index = (i + hash) % data.capacity; // FIXME wraparound test instead of %
                rows[index].case {
                    (:empty): {
                        data.length += 1;
                        rows[index] = (key, value);
                        return cast(T) data;
                    }
                    (:gravestone): {
                        data.length += 1;
                        rows[index] = (key, value);
                        return cast(T) data;
                    }
                    (Key key, Value value) existingEntry: {
                        if (key == existingEntry.key)
                        {
                            rows[index] = (key, value);
                            return cast(T) data;
                        }
                        continue;
                    }
                }
            }
            int* ip = null; *ip = *ip;
            // TODO
            // assert(false); // No space even after resize.
            0; // expr result value. TODO void literal
        });
        return new ASTExprStatement(hashWrap(context, hashmap, expr), __RANGE__);
    }

    (nullable Statement | fail Error) do_(Expression callTemp) {
        with (context.compiler) {
            auto assign = assignStatement(base, callTemp);
            if (auto endLifetime = hashmap.endLifetime(context, base)) {
                return sequence(endLifetime, assign);
            }
            return assign;
        }
    }

    with (context.compiler) {
        auto fn = createRuntimeFunction(
            context, "hashmap_set", hashmap, params, &body_);

        auto call = mkCall(fn, [base, key, value], __RANGE__);
        stmtWithTemporaryExpr(context.getUniqueId, call, &do_).case {
            nullable Statement stmt: return stmt.notNull;
            Error err: assert(false);
        }
    }
}

private Expression getHashmap(Context context, HashMap hashmap, Expression base, Expression key) {
    Parameter[] params = [
        Parameter.simple("base", hashmap),
        Parameter.simple("key", hashmap.key)];

    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            // FIXME
            alias T = Value[Key];
            auto hash = T.hash(key);
            mut auto data = cast(HashMapBase*) base;
            if (!data) {
                // FIXME extern(C) assert
                // FIXME Maybe
                int* ip = null; *ip = *ip;
            }
            auto rows = cast(HashMapRow*) &data[1];
            for (i in 0 .. data.capacity) {
                // FIXME wraparound test instead of %
                size_t index = (i + hash) % data.capacity;
                rows[index].case {
                    (:empty): {
                        // FIXME assert
                        int* ip = null; *ip = *ip;
                    }
                    (:gravestone): {}
                    (Key key, Value value) existingEntry: {
                        if (key == existingEntry.key) return existingEntry.value;
                    }
                }
            }
            int* ip = null; *ip = *ip;
            // TODO
            // assert(false); // No space even after resize.
            0; // expr result value. TODO void literal
        });
        return new ASTExprStatement(hashWrap(context, hashmap, expr), __RANGE__);
    }

    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_get", hashmap.value, params, &body_);

    return context.compiler.mkCall(fn, [base, key], __RANGE__);
}

private Expression removeKeyHashmap(Context context, HashMap hashmap, Expression base, Expression key) {
    Parameter[] params = [
        Parameter.simple("base", hashmap),
        Parameter.simple("key", hashmap.key)];

    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            // FIXME
            alias T = Value[Key];
            auto hash = T.hash(key);
            mut auto data = cast(HashMapBase*) base;
            if (!data) return false;
            auto rows = cast(HashMapRow*) &data[1];
            for (i in 0 .. data.capacity) {
                // FIXME wraparound test instead of %
                size_t index = (i + hash) % data.capacity;
                rows[index].case {
                    (:empty): return false;
                    (:gravestone): {}
                    (Key key, Value value) entry: {
                        if (key == entry.key) {
                            data.length -= 1;
                            rows[index] = :gravestone;
                            return true;
                        }
                    }
                }
            }
            int* ip = null; *ip = *ip;
            // TODO
            // assert(false); // hashmap was completely full, this should never happen
            0; // expr result value. TODO bottom literal
        });
        return new ASTExprStatement(hashWrap(context, hashmap, expr), __RANGE__);
    }

    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_remove", new Boolean, params, &body_);

    return context.compiler.mkCall(fn, [base, key], __RANGE__);
}

private Expression clearHashmap(Context context, HashMap hashmap, Expression base) {
    Parameter[] params = [
        Parameter.simple("base", hashmap)];

    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            // FIXME
            alias T = Value[Key];
            mut auto data = cast(HashMapBase*) base;
            if (!data) return;
            auto rows = cast(HashMapRow*) &data[1];
            for (i in 0 .. data.capacity) {
                rows[i] = :empty;
            }
            data.length = 0;
            // TODO bottom expression
            0;
        });
        return new ASTExprStatement(hashWrap(context, hashmap, expr), __RANGE__);
    }

    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_clear", new Void, params, &body_);

    return context.compiler.mkCall(fn, [base], __RANGE__);
}

private Expression hasKeyHashmap(Context context, HashMap hashmap, Expression base, Expression key) {
    Parameter[] params = [
        Parameter.simple("base", hashmap),
        Parameter.simple("key", hashmap.key)];

    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            // FIXME
            alias T = Value[Key];
            auto hash = T.hash(key);
            mut auto data = cast(HashMapBase*) base;
            if (!data) return false;
            auto rows = cast(HashMapRow*) &data[1];
            for (i in 0 .. data.capacity) {
                // FIXME wraparound test instead of %
                size_t index = (i + hash) % data.capacity;
                rows[index].case {
                    (:empty): return false;
                    (:gravestone): {}
                    (Key key, Value value) existingEntry: {
                        if (key == existingEntry.key) return true;
                    }
                }
            }
            int* ip = null; *ip = *ip;
            // TODO
            // assert(false); // hashmap was completely full, this should never happen
            0; // expr result value. TODO bottom literal
        });
        return new ASTExprStatement(hashWrap(context, hashmap, expr), __RANGE__);
    }

    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_has", new Boolean, params, &body_);

    return context.compiler.mkCall(fn, [base, key], __RANGE__);
}

public (Expression | fail Error) getHashmapDefault(
    Context context, LocRange locRange, HashMap hashmap, Expression base, Expression key, Expression deflt, bool insert)
{
    auto astValue = new ASTSymbolHelper(hashmap.value);
    auto astBase = new ASTSymbolHelper(base);
    auto astKey = new ASTSymbolHelper(key);
    auto astDeflt = new ASTSymbolHelper(deflt);
    mut ASTStatement astElse = context.compiler.$stmt ret = $astDeflt;;
    if (insert) {
        auto baseRef = base.instanceOf(Reference);
        locRange.assert(!!baseRef && baseRef.mutable, "target of hashmap assignment must be mutable")?;
        astElse = context.compiler.$stmt {
            ret = $astDeflt;
            $astBase[key] = ret;
        };
    }

    // FIXME single lookup
    auto expr = context.compiler.$expr ({
        mut uninitialized $astValue ret;
        auto key = $astKey;
        if ($astBase.has(key)) ret = $astBase[key];
        else $stmt astElse;
        ret;
    });
    (Expression | fail Error) ret() {
        return expr.compile(context)?.beExpression(__RANGE__)?;
    }
    ret.case {
        Expression expr: return expr;
        Error err: assert(false);
    }
}

public Expression releaseHashmap(Context context, Expression value) {
    auto hashmap = value.type.instanceOf(HashMap);
    __RANGE__.hardCheck(!!hashmap, "hashmap expected");
    auto hashmap = hashmap.notNull;
    Parameter[] params = [Parameter.simple("value", hashmap)];

    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            if (cast(void*) value == null) return;
            if (!neat_runtime_refcount_dec("hashmap release", cast(size_t*) value))
                return;
            auto base = cast(HashMapBase*) value;
            auto rows = cast(HashMapRow*) &base[1];
            for (i in 0 .. base.capacity) {
                rows[i].case {
                    (:empty): continue;
                    (:gravestone): continue;
                    (Key key, Value value): {
                        __destroy(key);
                        __destroy(value);
                    }
                }
                0; // Remove at your peril. (FIXME typed array literals or implcast array literals)
            }
            free(cast(void*) value);
            0; // expr result value. TODO void literal
        });
        return new ASTExprStatement(hashWrap(context, hashmap, expr), __RANGE__);
    }

    auto fn = context.compiler.createRuntimeFunction(context, "hashmap_release", new Void, params, &body_);

    return context.compiler.mkCall(fn, [value], __RANGE__);
}

private Expression keysHashmap(Context context, HashMap hashmap, Expression base) {
    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            if (cast(void*) value == null) {
                Key[] ret; return ret;
            }
            auto base = cast(HashMapBase*) value;
            auto rows = cast(HashMapRow*) &base[1];
            auto ret = new Key[](base.length);
            mut int k = 0;
            for (i in 0 .. base.capacity) {
                rows[i].case {
                    (:empty): continue;
                    (:gravestone): continue;
                    (Key key, Value value): {
                        ret[k] = key;
                        k += 1;
                    }
                }
                0;
            }
            // assert(k == base.length);
            if (k != base.length) { int* ip; *ip = *ip; }
            ret;
        });
        return context.compiler.(
            astExpressionStmt(astReturn(hashWrap(context, hashmap, expr), __RANGE__), __RANGE__));
    }

    Parameter[] params = [Parameter.simple("value", hashmap)];
    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_keys", new Array(hashmap.key, context.platform), params, &body_);

    return context.compiler.mkCall(fn, [base], __RANGE__);
}

private Expression valuesHashmap(Context context, HashMap hashmap, Expression base) {
    ASTStatement body_() {
        auto expr = context.compiler.$expr ({
            if (cast(void*) value == null) {
                Value[] ret; return ret;
            }
            auto base = cast(HashMapBase*) value;
            auto rows = cast(HashMapRow*) &base[1];
            auto ret = new Value[](base.length);
            mut int k = 0;
            for (i in 0 .. base.capacity) {
                rows[i].case {
                    :empty: continue;
                    :gravestone: continue;
                    (Key key, Value value): {
                        ret[k] = value;
                        k += 1;
                    }
                }
                0;
            }
            // assert(k == base.length);
            if (k != base.length) {
                print("logic error: $k results, but base length was tracked at $(base.length)");
                int* ip;
                *ip = *ip;
            }
            ret;
        });
        return context.compiler.(
            astExpressionStmt(astReturn(hashWrap(context, hashmap, expr), __RANGE__), __RANGE__));
    }

    Parameter[] params = [Parameter.simple("value", hashmap)];
    auto fn = context.compiler.createRuntimeFunction(
        context, "hashmap_values", new Array(hashmap.value, context.platform), params, &body_);

    return context.compiler.mkCall(fn, [base], __RANGE__);
}

class ASTHashMap : ASTSymbol
{
    ASTSymbol key, value;

    this(this.key, this.value, this.locRange) { }

    override (Type | fail Error) compile(Context context) {
        auto key = this.key.compile(context)?.beType(this.key.locRange)?;
        auto value = this.value.compile(context)?.beType(this.value.locRange)?;
        return new HashMap(key=key, value=value);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTHashMap", __RANGE__), [
                this.key.quote(quoter),
                this.value.quote(quoter),
                quoter.quoteLocRange(locRange)], __RANGE__);
    }
}
