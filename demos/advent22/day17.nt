module day17;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.math;
import std.stdio;
import std.string;

/**
 * There's a lot of performance optimization in this one.
 * It's totally unnecessary.
 * There's some magic numbers strewn in at the end and some debug statements.
 * If you know the solution to day 17, you can imagine how exulted I felt
 * when I cottoned on to the trick.
 * However, at that point I couldn't be arsed to actually implement it, so I
 * calculated the final result with a pocket calculator.
 */
void main()
{
    auto decodeJet = ch => ch.case('<': :left, '>': :right);
    auto jetPattern = stdin.byLine.front
        .map(decodeJet).array;
    auto blockHeights = [1, 3, 3, 4, 2];
    print("debug: jet pattern $(jetPattern.length)");
    auto blocks = [
        [0b0000000, 0b0000000, 0b0000000, 0b0011110],
        [0b0000000, 0b0001000, 0b0011100, 0b0001000],
        [0b0000000, 0b0000100, 0b0000100, 0b0011100],
        [0b0010000, 0b0010000, 0b0010000, 0b0010000],
        [0b0000000, 0b0000000, 0b0011000, 0b0011000]]
        .map(a => a.map(i => cast(ubyte) i).array).array;
    mut long maxHeight = 0;
    mut int jetIndex = 0;
    mut int blockIndex = 0;
    mut ubyte mut[] stack = new ubyte mut[](100_000_000);
    mut int count = 0;
    while (true) {
        mut long posY = maxHeight + 3;
        auto blockHeight = blockHeights[blockIndex];
        mut ubyte block0 = blocks[blockIndex][0];
        mut ubyte block1 = blocks[blockIndex][1];
        mut ubyte block2 = blocks[blockIndex][2];
        mut ubyte block3 = blocks[blockIndex][3];
        if (++blockIndex == blocks.length) blockIndex = 0;
        while (true) {
            jetPattern[jetIndex].case {
                :left:
                    if ((block0 | block1 | block2 | block3) & 0b1000000 == 0) {
                        auto n0 = block0 << 1, n1 = block1 << 1, n2 = block2 << 1, n3 = block3 << 1;
                        if (n0 & stack[posY + 3]
                            | n1 & stack[posY + 2]
                            | n2 & stack[posY + 1]
                            | n3 & stack[posY + 0]
                            == 0) {
                            block0 = n0; block1 = n1;
                            block2 = n2; block3 = n3;
                        }
                    }
                :right:
                    if ((block0 | block1 | block2 | block3) & 0b0000001 == 0) {
                        auto n0 = block0 >> 1, n1 = block1 >> 1, n2 = block2 >> 1, n3 = block3 >> 1;
                        if (n0 & stack[posY + 3]
                            | n1 & stack[posY + 2]
                            | n2 & stack[posY + 1]
                            | n3 & stack[posY + 0]
                            == 0) {
                            block0 = n0; block1 = n1;
                            block2 = n2; block3 = n3;
                        }
                    }
            }
            if (++jetIndex == jetPattern.length) jetIndex = 0;
            if (posY > 0 && block0 & stack[posY + 2]
                | block1 & stack[posY + 1]
                | block2 & stack[posY + 0]
                | block3 & stack[posY - 1]
                == 0) {
                posY--;
            }
            else break;
        }
        stack[(posY + 3)] |= block0;
        stack[(posY + 2)] |= block1;
        stack[(posY + 1)] |= block2;
        stack[(posY + 0)] |= block3;
        auto blockMaxHeight = posY + blockHeight;
        maxHeight = maxHeight if maxHeight > blockMaxHeight else blockMaxHeight;
        if (count < 10) {
            bool caveHas(V v) => stack[v.y] & cast(ubyte) (1 << (6 - v.x)) != 0;
            print("");
            print("--- $count ---");
            for (y in 0 .. maxHeight) {
                auto y = maxHeight - 1 - y;
                mut string line;
                for (x in 0 .. 7) line ~= "#" if caveHas(V(x, y)) else ".";
                print("|$line|");
            }
        }
        count++;
        if (count == 1875) break;
        if (jetIndex == 0 && blockIndex == 2 && count > 1732) break;
    }
    print("max height $maxHeight after $count");
}

alias V = Vector(long, 2);
