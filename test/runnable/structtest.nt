module structtest;

macro import std.macro.assert;

extern(C) void* malloc(size_t);
extern(C) void free(void*);

void main() {
    mut S s;
    s.a = 3;
    int* ap = &s.a;
    assert(*ap == 3);

    void* mem = malloc(8);
    S* sp = cast(S*) mem;
    int* ip = cast(int*) mem;
    sp.a = 5;
    sp.b = 8;
    assert(sp.a == 5);
    assert(*ip == 5);
    (*sp).a = 6;
    assert(sp[0].a == 6);

    S t = S(2, 3);
    assert(t.a == 2);
    assert(t.b == 3);
    assert(t.sum() == 5);
    free(mem);

    mut int count;
    S test() { count += 1; return S(2, 3); }
    assert(test.sum == 5);
    assert(count == 1);

    assert(S.init.sum == 5);

    assert((new A).test.i == 5);

    assert(S(3).sum == 8);

    assert(T(2, 3).((a, b)) == (3, 2));
    assert(T(3).((a, b)) == (5, 3));
}

struct S
{
    int a;
    int b = 5;
    int sum() { return a + b; }
    static S init() { return S(2, 3); }
}

struct T
{
    int a;
    int b;
    this(this.b, this.a = 5) {}
}

class A
{
    this() { }
    struct X { int i; }
    X test() {
        struct Y {
            int i;
            int get() { return i; }
        }
        Y y = Y(5);
        return X(y.get);
    }
}
