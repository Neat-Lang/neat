module overloading;

macro import std.macro.assert;

int test(int i = 2, int k = 3)
{
    assert(i == 2);
    assert(k == 3);
    return 1;
}

int test(bool b)
{
    return 2;
}

class Foo
{
    (int | string) value;
    this() { }
    this(int i) { this.value = i; }
    this(string s) { this.value = s; }
    int foo(int i) { return 1; }
    int foo(string s) { return 2; }
}

class Bar : Foo
{
    override int foo(int i) { return 3; }
    override int foo(string s) { return 4; }
}

struct S {
    this(int) {}
    this(string) {}
}

void main()
{
    assert(test(2) == 1);
    assert(test(true) == 2);
    assert(test == 1);
    assert((new Foo(3)).value == 3);
    assert((new Foo("foo")).value == "foo");
    Foo barFoo() { return new Bar; }
    assert(barFoo.foo(1) == 3);
    assert(barFoo.foo("foo") == 4);
    auto s1 = S(5);
    auto s2 = S("foo");
}
