module day5;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.math;
import std.stdio;
import std.string;

void main()
{
    auto lines = stdin.byLine.array;
    auto uncrate = word => word[1 .. 2];
    auto emptyLine = [first i for i, line in lines where line == ""];
    auto crates = lines[0 .. emptyLine - 1];
    auto crates = [[line[i*4 .. i*4+3].uncrate for i in 0 .. (line.length + 1) / 4] for line in crates];
    print("crates = $crates");
    mut auto crates = crates.rtranspose;
    auto moves = lines[emptyLine + 1 .. $]
        .map(move => move.split(" ").((count=that[1].atoi, from=that[3].atoi - 1, to=that[5].atoi - 1)))
        .array;

    auto crates1 = [line.dup for line in crates];
    void move1(int count, int from, int to) {
        for (i in 0 .. count) {
            auto entry = crates1[from][$ - 1];
            crates1[from] = crates1[from][0 .. $ - 1];
            crates1[to] ~= entry;
        }
    }
    [move1(a.count, a.from, a.to) for a in moves];
    auto tops1 = [join a[$ - 1] for a in crates1];
    print("crates on top: $tops1");

    auto crates2 = [line.dup for line in crates];
    void move2(int count, int from, int to) {
        auto stack = crates2[from][$ - count .. $];
        crates2[from] = crates2[from][0 .. $ - count];
        crates2[to] ~= stack;
    }
    [move2(a.count, a.from, a.to) for a in moves];
    auto tops2 = [join a[$ - 1] for a in crates2];
    print("crates on top: $tops2");
}

string[][] rtranspose(string[][] crates) {
    auto width = [max a.length for a in crates];
    mut string[][] result = new string[][](width);
    for (mut int i = cast(int) crates.length - 1; i >= 0; i--) {
        for (k, crate in crates[i]) if (!crate.strip.empty) {
            result[k] ~= crate;
        }
    }
    return result;
}
