// Very, very similar to neat.pragma. (Copypaste, why can't I quit you)
module neat.traits;

macro import package(compiler).std.macro.listcomprehension;

import helpers;
import neat.base;
import neat.expr;
import neat.types;
import neat.util;

(nullable ASTTrait | Error) parseTrait(Parser parser, LexicalContext lexicalContext)
{
    if (!parser.acceptIdentifier("__traits"))
        return null;
    parser.expectToken(TokenType.lparen)?;
    auto from = parser.from;
    auto trait = parser.parseIdentifier;
    auto locRange = parser.to(from);
    mut ASTSymbol[] args;
    while (parser.acceptToken(TokenType.comma)) {
        if (auto arg = lexicalContext.compiler.parseExpression(parser, lexicalContext)?)
            args ~= arg;
        else return parser.fail("expected expression argument");
    }
    parser.expectToken(TokenType.rparen)?;
    return new ASTTrait(trait, args, locRange);
}

class ASTTrait : ASTSymbol
{
    string name;

    ASTSymbol[] args;

    this(this.name, this.args, this.locRange) { }

    override (Symbol | Error) compile(Context context) {
        if (name == "hasMember") {
            this.locRange.assert(args.length == 2, () => "__traits(hasMember) expected two arguments")?;
            auto valueExpr = args[0].compile(context)?.isExpressionImplCall(context, locRange)??
                else return locRange.fail("__traits(hasMember) expected expression as first argument");
            auto stringLit = args[1].compile(context)?.instanceOf(StringLiteral)?
                else return locRange.fail("__traits(hasMember) expected string literal as second argument");

            return context.compiler.boolLiteral(.hasMember(
                context, valueExpr, stringLit.text, locRange)?);
        }
        if (name == "versionSet") {
            this.locRange.assert(args.length == 1, () => "__traits(versionSet) expected one argument")?;
            return .versionSet(
                context, args[0].compile(context)?, locRange);
        }
        return this.locRange.fail("unknown trait: \"$name\"");
    }
}

(bool | Error) hasMember(Context context, Expression value, string member, LocRange locRange) {
    return !!value.type.accessMember(context, value, member, Protection.private_, locRange)?;
}

(Symbol | Error) versionSet(Context context, Symbol name, LocRange locRange) {
    auto nameLit = name.instanceOf(StringLiteral)?
        else return locRange.fail("__traits(versionSet) expected string literal as argument");
    bool isSet = [any a == nameLit.text for a in context.platform.versions];

    return context.compiler.boolLiteral(isSet);
}
