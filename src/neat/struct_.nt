module neat.struct_;

macro import package(compiler).std.macro.listcomprehension;
macro import package(compiler).std.macro.quasiquoting;

import backend.base;
import helpers;
import neat.base;
import neat.decl;
import neat.expr;
import neat.function_;
import neat.runtime;
import neat.statements;
import neat.types;
import neat.util;
import polyhash;
import package(compiler).std.thread;

class Struct : Type, Hashable
{
    string name;

    StructMemberDeclaration[] members;

    LiftedStructMethod mut[] methods;

    // While compiling the struct, we will already reference it, but
    // some methods will be null.
    size_t validMethods;

    LocRange locRange;

    string mangledName;

    Hash preHash;

    Mutex mutex;

    // for use by cimport macro, makes type comparison look only at name
    bool externC;

    private (BackendStructType type, Platform platform) backendCache;

    StructAliasDecl[] decls;

    this(this.name, this.members, this.locRange, string manglePrefix) {
        this.mangledName = manglePrefix ~ "_struct_" ~ this.name;
        this.zeroInitializable = [
            all member.type.zeroInitializable for member in this.members];
        this.hasElaborateCopyConstructor = [
            any member.type.hasElaborateCopyConstructor for member in this.members];
        this.validMethods = this.methods.length;
        this.mutex = new Mutex;
        this.preHash = new Hash;
        this.preHash.adds("Struct");
        this.preHash.adds(mangledName);
        this.preHash.addl(members.length);
        [member.type.hash(this.preHash) for member in this.members];
        this.hasElaborateCopyConstructor = this.hasElaborateCopyConstructor || !!getCopyCtor;
    }

    override bool same(Type other) {
        if (auto otherStruct = other.instanceOf(Struct)) {
            if (externC && otherStruct.externC)
                return this.name == otherStruct.name;
            return this.mangledName == otherStruct.mangledName;
        }
        return false;
    }

    override BackendStructType emit(Platform platform)
    {
        with (this.mutex.locked) {
            if (!backendCache.type || backendCache.platform !is platform) {
                auto memberTypes = new BackendType mut[](this.members.length);
                for (i, member in this.members)
                {
                    memberTypes[i] = member.type.emit(platform);
                }
                backendCache.platform = platform;
                backendCache.type = new BackendStructType(memberTypes.freeze, internal=false);
                // FIXME figure out why references go to zero
                neat_runtime_refcount_inc2("workaround", &(cast(size_t*) backendCache.type)[1]);
            }
            return backendCache.type;
        }
    }

    override string repr() { return this.name; }

    override string mangle() {
        return this.mangledName;
    }

    override Protection protectionAt(Namespace namespace)
    {
        bool sameAsThis(Namespace current) {
            if (auto provenance = current.instanceOf(StructNamespace)) {
                if (same(provenance.struct_)) return true;
            }
            if (auto parent = current.parent) return sameAsThis(parent);
            return false;
        }
        if (sameAsThis(namespace)) return Protection.private_;
        return Protection.public_;
    }

    override (nullable Symbol | Error) accessMember(
        Context context, nullable Expression baseExpr, string member, Protection protection, LocRange locRange)
    {
        import neat.base : assert;
        bool allowed(Protection symbol) {
            int rank(Protection p) {
                if (p == Protection.public_) return 0;
                return 1;
            }
            return rank(symbol) <= rank(protection);
        }

        if (auto baseExpr = baseExpr) {
            size_t memberOffset = [
                first i for i, a in this.members
                where a.name == member && allowed(a.protection)
                else -1];
            if (memberOffset != -1) {
                if (baseExpr.info.lifetime != Lifetime.gifted) {
                    if (auto reference = baseExpr.instanceOf(Reference)) {
                        return new StructMemberReference(reference, memberOffset);
                    }
                    return new StructMember(baseExpr, memberOffset);
                }
                return context.wrapWithCleanup(baseExpr, locRange, a => new StructMember(a, memberOffset));
            }
        }
        size_t methodOffset = [
            first i for i, a in this.methods[0 .. this.validMethods]
            where a.name == member && allowed(a.protection)
            else -1];
        if (methodOffset != -1) {
            auto method = this.methods[methodOffset];
            if (method.static_) {
                locRange.assert(!baseExpr, () => "static method cannot be called on value")?;
                return method;
            } else {
                auto baseExpr = baseExpr? else return locRange.fail("non-static method cannot be called on type");
                return new StructMethod(method, baseExpr);
            }
        }
        size_t declOffset = [
            first i for i, a in this.decls
            where a.name == member/* && allowed(a.protection) TODO */
            else -1];
        if (declOffset != -1) {
            auto baseExpr = baseExpr? else return locRange.fail("alias cannot be called on type (TODO)");
            locRange.assert(
                baseExpr.info.lifetime.(that == Lifetime.lexical || that == Lifetime.ephemeral),
                () => "alias cannot be called on temporary")?;
            auto tempRef = new PairedTemporary(baseExpr.type, Lifetime.lexical, context.getUniqueId);
            auto initTemp = new InitializeTemporaryStatement(tempRef, baseExpr);
            auto tempRefPtr = context.compiler.reference(tempRef);
            auto decl = this.decls[declOffset];
            auto context = decl.structParentContext
                .withNamespace(new StructNamespace(decl.structParentContext.namespace.parent, this))
                .withFramePointer(tempRefPtr, :none);
            auto target = decl.target.compile(context)?;
            auto target = target.instanceOf(Expression)? else return target;
            return context.compiler.statementExpression(initTemp, target);
        }
        return null;
    }

    override void hash(Hash hash)
    {
        hash.applyHash(this.preHash);
    }

    nullable FunctionDeclaration getDtor()
    {
        assert(this.validMethods == this.methods.length);
        return [first method for method in this.methods where method.name == "__dtor" else null];
    }

    /**
     * copy constructor is constructor that takes an arg of this struct.
     */
    FunctionDeclaration getCopyCtor()
    {
        assert(this.validMethods == this.methods.length);
        return [first method for method in this.methods where method.isCopyCtorFor(this) else null];
    }

    nullable Statement callAutoDtor(Context context, Expression expr)
    {
        (nullable Statement | Error) do_(Expression expr) {
            auto compiler = context.compiler;
            mut Statement[] destructors;
            for (i, entry in members) {
                auto member = new StructMember(expr, i);
                if (auto destroy = entry.type.endLifetime(context, member)) {
                    destructors ~= destroy;
                }
            }
            if (!destructors.length) return null;
            return compiler.sequenceStatement(destructors);
        }
        context.compiler.stmtWithTemporaryExpr(context.getUniqueId, expr, &do_).case {
            nullable Statement stmt: return stmt;
            Error err: assert(false);
        }
    }

    override (Expression | Error) copy(Context context, Expression source, LocRange locRange) {
        auto compiler = context.compiler;

        if (FunctionDeclaration copyCtor = getCopyCtor) {
            auto temp = new PairedTemporary(source.type, Lifetime.gifted, context.getUniqueId);
            auto initTemp = new UninitializeTemporaryStatement(temp);
            Expression tempPtr = compiler.castTo(new Pointer(new Void), new ReferenceExpression(temp));
            auto call = compiler.mkCall(copyCtor, [tempPtr, source], locRange);
            auto callStmt = new ExprStatement(call);
            auto stmt = sequence(initTemp, callStmt);
            return compiler.statementExpression(stmt, temp);
        }

        if (!hasElaborateCopyConstructor)
            return source;

        (nullable Expression | Error) do_(Expression source) {
            mut Expression[] exprs;
            for (i, member in members) {
                auto sourceField = new StructMember(source, i);
                exprs ~= sourceField.type.copy(context, sourceField, locRange)?;
            }
            return new StructLiteral(this, ExprInfo(Lifetime.gifted), exprs);
        }
        return compiler.exprWithTemporaryExpr(context.getUniqueId, source, &do_)?? else die;
    }

    override nullable Statement endLifetime(Context context, Expression expr)
    {
        if (auto destructor = getDtor) {
            auto ref_ = new PairedTemporary(expr.type, expr.info.lifetime, context.getUniqueId);
            auto initRef = new InitializeTemporaryStatement(ref_, expr);
            auto refptr = new ReferenceExpression(ref_);
            Expression ptr = context.compiler.castTo(new Pointer(new Void), refptr);
            auto callDtor = new ExprStatement(context.compiler.mkCall(destructor, [ptr], this.locRange));
            return sequence(sequence(initRef, callDtor), callAutoDtor(context, ref_));
        }
        return callAutoDtor(context, expr);
    }

    override (nullable Expression | Error) call(Context context, LocRange locRange, ASTArgument[] args) {
        import neat.base : assert;
        import package(compiler).std.algorithm : all, array, map;

        auto temp = new PairedTemporary(this, Lifetime.gifted, context.getUniqueId);
        Symbol toMethod(LiftedStructMethod method) => new StructMethod(method, temp);
        nullable Symbol structCtor() {
            auto structCtors = [
                toMethod(a) for a in this.methods
                where a.name == "__ctor" && !a.isCopyCtorFor(this)];
            if (structCtors.length == 0) return null;
            if (structCtors.length == 1) return structCtors[0];
            return new Overload(structCtors);
        }
        if (auto structCtor = structCtor) {
            auto initialize = new UninitializeTemporaryStatement(temp);
            auto astStructCtor = new ASTSymbolHelper(structCtor);
            auto call = context.compiler.call(context, astStructCtor, args, locRange, false)?;
            auto initAndCall = context.compiler.sequence(
                initialize,
                context.compiler.exprStatement(call? else die));
            return context.compiler.wrap(initAndCall, temp, null);
        }

        mut ASTArgument[] args = args;
        if (args.length < this.members.length
            // TODO
            // && this.members[args.length .. $].all(a => a.default_ != null))
            && this.members[args.length .. $].all(a => a.default_?.(true) else false))
        {
            args ~= this.members[args.length .. $]
                .map(a => ASTArgument(new ASTSymbolHelper(a.default_?.expr), null, a.default_?.range) else die)
                .array;
        }

        locRange.assert(args.length == this.members.length,
            () => "invalid number of args ($(args.length)) for struct constructor; " ~
                "expected $(this.members.length)")?;
        auto params = [Parameter(
                isThisAssignment=false,
                name=member.name,
                mutable=false,
                type=member.type,
                defaultValue=null,
                __RANGE__,
            ) for member in this.members];
        auto result = validateCall(context, params, args, "$(this.name).this()", variadic=false, locRange)?.case(
            (:mismatch, Error err): return err,
            (:argCastError, Error err): return err);

        auto temp = new PairedTemporary(this, Lifetime.gifted, context.getUniqueId);
        mut Statement initialize = new UninitializeTemporaryStatement(temp);
        for (i, arg in result.args) {
            auto field = new StructMemberReference(temp, i);
            mut auto stmt = context.compiler.move(context, field, arg, args[i].locRange)?;
            if (!stmt) stmt = new AssignStatement(field, arg, locRange);

            initialize = sequence(initialize, stmt);
        }
        return new StatementExpression(initialize, temp, temp.info);
    }

    override (nullable Expression | Error) binaryOp(
        Context context, string op, Expression left, Expression right, LocRange locRange)
    {
        if (op == "==" && right.type.same(left.type)) {
            // TODO this is shit, factor expr and temporary shit out into one generic function
            (Expression | Error) do1(Expression left) {
                (Expression | Error) do2(Expression right) {
                    (nullable Expression | Error) do3(Expression left) {
                        (nullable Expression | Error) do4(Expression right) {
                            return structEqual(context, left, right, locRange);
                        }
                        return context.compiler.exprWithTemporaryExpr(context.getUniqueId, right, &do4);
                    }
                    return context.compiler.exprWithTemporaryExpr(context.getUniqueId, left, &do3)?? else die;
                }
                return context.compiler.consume(context, right, &do2);
            }
            return context.compiler.consume(context, left, &do1);
        }
        return null;
    }

    override QuarantinePolicy quarantinePolicy() {
        import package(compiler).std.algorithm : all;

        (:checked | :harmless) value() {
            if (this.members.all(a => a.type.quarantinePolicy.value == :harmless))
                return :harmless;
            return :checked;
        }
        return QuarantinePolicy(container=:transparent, value=value);
    }

    override (void | Error) checkQuarantine(Context context, LocRange locRange, QuarantineReason reason)
    {
        [member.type.checkQuarantine(context, locRange, reason)? for member in this.members];
    }

    override (ASTSymbol | Error) hash(CompilerBase compiler, ASTSymbol value)
    {
        mut ASTStatement[] parts;
        for (member in this.members) {
            auto name = compiler.astIdentifier(member.name);
            parts ~= compiler.$stmt {
                hash ^= __hash($value.$name);
                hash *= 0x01000193;
            };
        }
        auto partsStmt = compiler.astSequence(parts);
        return compiler.$expr ({
            // fnv composition
            mut int hash = 0x811c9dc5;
            $stmt partsStmt;
            if (hash < 0) hash = -hash;
            hash;
        });
    }
}

(Expression | Error) structEqual(Context context, Expression left, Expression right, LocRange locRange) {
    auto structType = left.type.instanceOf(Struct);
    mut Expression test = new IntLiteral(1);
    for (i in 0 .. structType.members.length) {
        auto leftField = new StructMember(left, i);
        auto rightField = new StructMember(right, i);
        (Expression | Error) cmp() {
            if (auto eq = leftField.type.binaryOp(context, "==", leftField, rightField, locRange)?)
                return eq;
            return new BinaryOp("==", leftField, rightField, locRange);
        }
        test = new BoolAnd(test, cmp?);
    }
    return test;
}

class StructMember : Expression
{
    Expression base;

    size_t index;

    Struct structType;

    this(this.base, this.index)
    {
        this.structType = this.base.type.instanceOf(Struct)? else die;
        this.type = this.structType.members[this.index].type;
        this.info = this.base.info;
    }

    override int emit(Generator output)
    {
        return output.fun.field(structType.emit(output.platform), base.emit(output), cast(int) index);
    }

    override void hash(Hash hash)
    {
        hash.adds("StructMember");
        base.hash(hash);
        hash.addl(index);
    }

    override string repr() { return "($(this.base.repr)).$(this.structType.members[this.index].name)"; }
}

class StructMemberReference : Reference
{
    Reference base;

    size_t index;

    Struct structType;

    this(this.base, this.index)
    {
        this.structType = this.base.type.instanceOf(Struct)? else die;
        this.type = this.structType.members[this.index].type;
        this.info = this.base.info;
        this.mutable = this.base.mutable;
    }

    override int emit(Generator output)
    {
        int locationReg = this.emitLocation(output);

        return output.fun.load(this.type.emit(output.platform), locationReg);
    }

    override int emitLocation(Generator output)
    {
        int reg = this.base.emitLocation(output);

        return output.fun.fieldOffset(this.base.type.emit(output.platform), reg, this.index);
    }

    override void hash(Hash hash)
    {
        hash.adds("StructMemberReference");
        base.hash(hash);
        hash.addl(index);
    }

    override string repr() { return "($(this.base.repr)).$(this.structType.members[this.index].name)"; }
}

struct ASTStructMethod
{
    bool static_;

    Protection protection;

    string name;

    ASTSymbol ret;

    (ASTParameter | ASTThisAssignment)[] params;

    ASTStatement body_;

    LocRange locRange;

    string comment;
}

struct StructAliasDecl
{
    string name;

    ASTSymbol target;

    Context structParentContext;
}

// Only ever use this for name lookups where 'this' exists!
class StructNamespace : Namespace
{
    Struct struct_;

    this(this.parent, this.struct_) { this.isContextScope = true; }

    override (nullable Symbol | Error) lookup(
        string name, Context context, LookupReason reason, LocRange locRange)
    {
        if (name == struct_.name) return struct_;
        // TODO early name check?
        Expression thisPtr() {
            if (auto thisPtr = context.framePointer) {
                return new PointerCast(new Pointer(this.struct_), thisPtr); // This is good code. Good code.
            }
            return new NullExpr(new Pointer(this.struct_));
        }
        if (reason != LookupReason.ufcs) {
            if (auto result = context.compiler.accessMember(
                    context, thisPtr, name, locRange, true)?)
                return result;
        }

        // TODO "outer"?
        if (!this.parent) return null;
        return this.parent.lookup(name, context.withFramePointer(null, :none), reason, locRange);
    }

    override string repr() => "StructNamespace($(struct_.name))";
}

class StructMethod : LateSymbol
{
    LiftedStructMethod fun;

    Expression baseExpr;

    /**
     * Structs aren't rc tracked, so don't allow refcounting struct methods.
     */
    this(this.fun, this.baseExpr) { this.refcounted = false; }

    override LateSymbolResult resolve(Context context) {
        auto funcPtr = new FunctionReference(this.fun);

        if (auto reference = baseExpr.instanceOf(Reference)) {
            auto firstArg = new PointerCast(new Pointer(new Void), context.compiler.reference(reference));
            return LateSymbolResult(setup=null, funcPtr=funcPtr, firstArg=firstArg, teardown=null);
        }

        // FIXME: this looks wrong...
        mut uninitialized Lifetime tempLifetime;
        if (this.baseExpr.info.lifetime == Lifetime.gifted) tempLifetime = Lifetime.gifted;
        else tempLifetime = Lifetime.lexical;

        auto tmpBaseExpr = new PairedTemporary(baseExpr.type, tempLifetime, context.getUniqueId);
        auto setup = new InitializeTemporaryStatement(tmpBaseExpr, baseExpr);
        auto firstArg = new PointerCast(new Pointer(new Void), context.compiler.reference(tmpBaseExpr));

        mut nullable Statement teardown = null;
        if (baseExpr.info.lifetime == Lifetime.gifted) {
            teardown = baseExpr.type.endLifetime(context, tmpBaseExpr);
        }

        return LateSymbolResult(setup=setup, funcPtr=funcPtr, firstArg=firstArg, teardown=teardown);
    }
    override string repr() return "TODO StructMethod";
}

// Lifted struct method (function with an additional parameter)
class LiftedStructMethod : Function
{
    Protection protection;

    bool static_;

    string structName;

    this(Struct structType, nullable Namespace namespace, this.static_, this.protection, this.name,
         this.retWIP, this.params, this.statement, this.macroState, this.locRange=__CALLER__)
    {
        // TODO super()
        auto structNamespace = new StructNamespace(namespace, structType);
        if (!this.static_) {
            auto ptr = new Pointer(structType);

            this.hasThisArg = true;
            this.contextType = ptr;
        }
        this.parent = structNamespace;
        this.structName = structType.name;
        this.superMagic = :none;
        resetMangleCache;
    }

    override string manglePrefix() {
        return "$(this.parent.mangle)_$(structName)";
    }
}

// TODO generalize all this
class ASTStructVersionBlock
{
    string name;
    ASTStructEntry[] then, else_;
    this(this.name, this.then, this.else_) { }
}

class ASTStructStaticIf
{
    ASTSymbol condition;
    ASTStructEntry[] then, else_;
    this(this.condition, this.then, this.else_) { }
}

alias ASTStructEntry = (ASTStructMember | ASTStructMethod | ASTAliasDecl
    | ASTStructVersionBlock | ASTStructStaticIf);

class ASTStructDecl : ASTSymbolDeclaration
{
    string comment;

    ASTStructEntry[] entries;

    bool externC;

    this(this.name, this.entries, this.locRange=__CALLER__) { }

    override (Struct | Error) compileSymbol(Context context) {
        mut StructMemberDeclaration[] members;
        mut ASTStructMethod[] methods;
        mut StructAliasDecl[] decls;
        (void | Error) walk(ASTStructEntry entry) {
            entry.case {
                ASTStructMember member:
                    members ~= new StructMemberDeclaration(
                        member.name, member.protection,
                        member.type.compile(context)?.beType(this.locRange)?,
                        (
                            member.default_?.compile(context)?.beExpressionImplCall(context, member.default_?.locRange)?,
                            member.default_?.locRange) else null);
                ASTStructVersionBlock ver:
                    if ([any a == ver.name for a in context.platform.versions]) {
                        [walk(entry)? for entry in ver.then];
                    } else {
                        [walk(entry)? for entry in ver.else_];
                    }
                ASTStructMethod method:
                    methods ~= method;
                ASTAliasDecl decl:
                    auto name = decl.name.name(context.warmContext);
                    decls ~= StructAliasDecl(name, decl.target, context);
                ASTStructStaticIf staticIf:
                    auto tern = staticTruthy(context, staticIf.condition);

                    tern.case {
                        bool b: {
                            if (b)
                                [walk(entry)? for entry in staticIf.then];
                            else
                                [walk(entry)? for entry in staticIf.else_];
                        }
                        (:unknown): {
                            return this.locRange.fail("cannot statically evaluate condition: "
                                ~ staticIf.condition.repr);
                        }
                        Error err: return err;
                    }
            }
        }
        [walk(a)? for a in this.entries];

        auto name = this.name.name(context.warmContext);
        auto struct_ = new Struct(name, members, this.locRange, context.namespace.mangle);
        struct_.externC = this.externC;
        // make S visible in struct S {}
        auto structNamespace = new StructNamespace(
            context.namespace, struct_);
        auto structContext = context.withNamespace(structNamespace);
        struct_.methods = new LiftedStructMethod mut[](methods.length);

        for (i, method in methods) {
            auto methodParams = new Parameter mut[](method.params.length);
            auto paramContext = structContext.withLabelPrefix(
                "$(context.namespace.mangle)_$(struct_.name)_$(method.name)");

            for (k, param in method.params) {
                param.case {
                    ASTParameter param:
                        methodParams[k] = .compile(param, paramContext)?;
                    ASTThisAssignment param:
                        auto type = [first m.type for m in members where m.name == param.name
                            else return param.locRange.fail("no such member: $(param.name)")];
                        methodParams[k] = .compile(param, type, paramContext)?;
                }
            }

            // It's nice to be able to reference the method
            // parameters in a typeof() in the return type.
            auto returnTypeNamespace = new ReturnTypeNamespace(
                structContext.namespace, methodParams.freeze);
            auto returnTypeContext = structContext.withNamespace(returnTypeNamespace);

            struct_.methods[i] = new LiftedStructMethod(
                struct_,
                context.namespace,
                method.static_,
                method.protection,
                method.name,
                method.ret.compile(structContext)?.beType(this.locRange)?,
                methodParams.freeze,
                method.body_,
                context.macroState,
                method.locRange);
            struct_.validMethods = i + 1;
        }
        struct_.decls = decls;

        for (method in struct_.methods) {
            context.compilingModule.track(method);
        }

        return struct_;
    }

    override string repr() { return this.name.repr; }
}

class StructLiteral : Expression
{
    Expression[] members;

    this(this.type, this.info, this.members) {
        auto struct_ = this.type.instanceOf(Struct)? else die;
        assert(this.members.length == struct_.members.length);
    }

    override int emit(Generator output) {
        auto type = this.type.emit(output.platform);
        return output.fun.structLiteral(
            type,
            [member.emit(output) for member in members]);
    }

    override void hash(Hash hash) {
        hash.adds("StructLiteral");
        [member.hash(hash) for member in members];
    }

    override string repr() {
        return "{" ~ [join with ", " member.repr for member in members] ~ "}";
    }
}

(nullable ASTDeclaration | Error) parseStructDecl(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    auto comment = parser.parseLastComment;
    auto from = parser.from;
    if (parser.parseIdentifier != "struct") {
        parser.revert;
        return null;
    }
    auto name = lexicalContext.compiler.parseIdentifierSymbol(parser, lexicalContext)??
        else ({ parser.revert; return null; });
    (nullable ASTSymbolDeclaration | Error) parseRest() {
        auto locRange = parser.to(from);
        mut ASTStructEntry[] entries;
        parser.expectToken(TokenType.lcurlybracket)?;
        while (!parser.acceptToken(TokenType.rcurlybracket)) {
            auto entry = parseStructEntry(parser, lexicalContext)?;
            entries ~= entry;
        }
        // FIXME transition to constructor that takes comment (constructor overloading?)
        auto decl = new ASTStructDecl(name, entries, locRange);
        decl.comment = comment;
        return decl;
    }
    if (auto ret = lexicalContext.compiler.parseTemplateStub(parser, lexicalContext, name, comment, &parseRest)?) {
        parser.commit;
        return ret;
    }
    parser.commit;
    return parseRest?;
}

(ASTStructEntry[] | Error) parseStructBlock(Parser parser, LexicalContext lexicalContext) {
    mut ASTStructEntry[] entries;
    if (parser.acceptToken(TokenType.lcurlybracket)) {
        while (!parser.acceptToken(TokenType.rcurlybracket)) {
            auto entry = parser.parseStructEntry(lexicalContext)?;
            entries ~= entry;
        }
    } else {
        auto entry = parser.parseStructEntry(lexicalContext)?;
        entries ~= entry;
    }
    return entries;
}

(ASTStructEntry[] | Error) parseStructEntry(Parser parser, LexicalContext lexicalContext)
{
    import neat.base : assert;
    // FIXME merge version into static if via __traits(versionSet)
    if (parser.acceptIdentifier("version")) {
        parser.expectToken(TokenType.lparen)?;
        string versionStr = parser.parseIdentifier;
        parser.expectToken(TokenType.rparen)?;
        ASTStructEntry[] then = parser.parseStructBlock(lexicalContext)?;
        mut ASTStructEntry[] else_;
        if (parser.acceptIdentifier("else")) {
            else_ = parser.parseStructBlock(lexicalContext)?;
        }
        // FIXME explicitly type hinted literal
        ASTStructEntry result = new ASTStructVersionBlock(versionStr, then, else_);
        return [result];
    }
    parser.begin;
    auto comment = parser.parseLastComment;
    if (parser.acceptIdentifier("static") && parser.acceptIdentifier("if")) {
        parser.commit;
        parser.expectToken(TokenType.lparen)?;
        auto cond = lexicalContext.compiler.parseExpression(parser, lexicalContext)??
            else return parser.fail("static if condition expected");
        parser.expectToken(TokenType.rparen)?;
        ASTStructEntry[] then = parser.parseStructBlock(lexicalContext)?;
        mut ASTStructEntry[] else_;
        if (parser.acceptIdentifier("else")) {
            else_ = parser.parseStructBlock(lexicalContext)?;
        }
        // FIXME explicitly type hinted literal
        ASTStructEntry result = new ASTStructStaticIf(cond, then, else_);
        return [result];
    }
    parser.revert;
    mut ASTStructEntry[] entries;
    mut bool static_ = false;
    mut nullable ASTSymbol memberType;
    mut string memberName;
    mut Protection protection = Protection.public_;
    auto from = parser.from;
    while (true) {
        if (parser.acceptIdentifier("static")) {
            static_ = true;
            continue;
        }
        // FIXME only allow one
        // FIXME parseProtection?
        if (parser.acceptIdentifier("public")) {
            protection = Protection.public_;
            continue;
        }
        if (parser.acceptIdentifier("private")) {
            protection = Protection.private_;
            continue;
        }
        break;
    }
    if (auto aliasDecl = parseAliasDecl(parser, lexicalContext)?) {
        parser.assert_(!static_, "TODO static alias")?;
        auto aliasDecl = aliasDecl.instanceOf(ASTAliasDecl)?
            else return parser.fail("TODO template alias");
        entries ~= aliasDecl;
        return entries;
    }
    if (parser.acceptIdentifier("this"))
    {
        memberType = new ASTIdentifier("void", false);
        memberName = "__ctor";
    }
    else if (parser.acceptTokenIdentifier(TokenType.tilde, "this"))
    {
        memberType = new ASTIdentifier("void", false);
        memberName = "__dtor";
    }
    else
    {
        memberType = lexicalContext.compiler.parseType(parser, lexicalContext)?;
        if (!memberType) return parser.fail("expected member type");
        string ident = parser.parseIdentifier;
        memberName = ident;
        if (!memberName.length) return parser.fail("expected member name");
    }
    auto locRange = parser.to(from);
    if (parser.acceptToken(TokenType.lparen)) // method
    {
        auto params = parseParameterList(parser, lexicalContext, variadic=false, thisAssignment=true)?;
        assert(!params.variadic);
        parser.assert_(
            memberName != "__dtor" || params.params.length == 0, "destructor cannot take parameters")?;
        ASTStatement stmt = lexicalContext.compiler.parseFunctionBody(parser, lexicalContext)?;
        entries ~= ASTStructMethod(
            static_, protection, memberName, memberType? else die, params.params, stmt,
            locRange, comment);
    }
    else
    {
        mut nullable ASTSymbol default_ = null;
        parser.to(from).assert(!static_, () => "no static fields")?;
        (void | Error) addMember() {
            parser.assert_(memberName != "__ctor", "constructor cannot be member")?;
            parser.assert_(memberName != "__dtor", "destructor cannot be member")?;
            entries ~= (memberName, protection, memberType? else die, default_);
            default_ = null;
        }
        if (parser.acceptToken(TokenType.equal)) {
            default_ = lexicalContext.compiler.parseExpression(parser, lexicalContext)??
                else return parser.fail("field default value expected");
        }
        addMember?;
        while (!parser.acceptToken(TokenType.semicolon)) {
            parser.expectToken(TokenType.comma)?;
            if (parser.acceptToken(TokenType.semicolon)) break;
            string ident = parser.parseIdentifier;
            memberName = ident;
            if (!memberName.length) return parser.fail("expected member name");
            if (parser.acceptToken(TokenType.equal)) {
                default_ = lexicalContext.compiler.parseExpression(parser, lexicalContext)??
                    else return parser.fail("field default value expected");
            }
            addMember?;
        }
    }
    return entries;
}

bool isCopyCtorFor(LiftedStructMethod method, Struct struct_) {
    return method.name == "__ctor" && method.params.length == 1 && method.params[0].type.same(struct_);
}
