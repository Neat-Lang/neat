module neat.array;

macro import package(compiler).std.macro.hash;
macro import package(compiler).std.macro.once;
macro import package(compiler).std.macro.quasiquoting;

import backend.base;
import helpers;
import neat.base;
import neat.hash;
import neat.types;
import neat.util;

/**
 * There are two things called "array": T[] and the data structure it references.
 * We will call the first an "array value" and the second the "array object".
 *
 * Array values have the following layout:
 * {
 *      size_t length;
 *      T* ptr;
 *      T* base;
 * }
 *
 * Array objects have the following layout:
 * {
 *      size_t references;
 *      size_t capacity; // total length
 *      size_t used; // length in use (used for realloc)
 * }
 * They are then followed directly by the array data.
 */
class Array : Type
{
    (Type | PendingSymbol) pendingElementType;

    BackendType backendType;

    this(this.pendingElementType, Platform platform) {
        this.zeroInitializable = true;
        this.hasElaborateCopyConstructor = true;
        BackendType[] types = new BackendType[](3);
        types[0] = platform.nativeWordType;
        // No Element type here; there would be an infinite recursion with self-referential types like JSONValue.
        types[1] = platform.voidp;
        types[2] = platform.voidp;
        this.backendType = new BackendStructType(types);
    }

    Type elementType() {
        Type resolvePending(PendingSymbol s) {
            // BIG TODO: What exactly is supposed to happen in the Error case here?!
            // Can we find a better way to maybe avoid running into that
            // class ErrorType : Type seems like admitting defeat.
            // Maybe like a class PendingSymbolSet, that gathers them all during compilation (in context?)
            // we're gonna need context downmerging anyway, for stackframes
            s.resolve.case {
                Symbol sym: sym.beType(__RANGE__).case {
                    Type type: return type;
                    Error err: assert(false);
                }
                Error err: assert(false);
            }
        }
        return this.pendingElementType.case(
            Type t: t,
            PendingSymbol s: resolvePending(s)
        );
    }

    override BackendType emit(Platform platform)
    {
        return this.backendType;
    }

    override bool same(Type other)
    {
        if (auto otherArray = other.instanceOf(Array)) {
            return otherArray.elementType.same(this.elementType);
        }
        return false;
    }

    override string repr() { return this.elementType.repr ~ "[]"; }

    override string mangle() { return "array_" ~ this.elementType.mangle; }

    override void hash(Hash hash) {
        hash.adds("array");
        this.pendingElementType.case {
            Type t: t.hash(hash);
            PendingSymbol s: s.hash(hash);
        }
    }

    override (Expression | fail Error) copy(Context context, Expression source)
    {
        auto compiler = context.compiler;

        (nullable Expression | fail Error) do_(Expression source) {
            mut auto context = context.withNamespace(context.compiler.exprAlias(context.namespace, "source", source));
            auto refCountIncFun = new FunctionDeclaration(
                "neat_runtime_refcount_inc", new Void, [
                    Parameter.simple("label", new Array(new Character, context.platform)),
                    Parameter.simple("ptr", new Pointer(new Void))]);
            context = context.withNamespace(context.compiler.exprAlias(
                        context.namespace, "neat_runtime_refcount_inc", refCountIncFun));
            // count up reference
            auto stmt = compiler.$stmt if (source.base) {
                neat_runtime_refcount_inc("array acquire", source.base);
            };
            auto result = stmt.compile(context)?;
            return compiler.statementExpression(result.statement, source);
        }
        return compiler.exprWithTemporaryExpr(context.getUniqueId, source, &do_)?.notNull;
    }

    override nullable Statement endLifetime(Context context, Expression value)
    {
        return context.compiler.exprStatement(releaseArray(context, value));
    }

    override (nullable Symbol | fail Error) accessMember(
        Context context, nullable Expression base, string field, Protection _, LocRange locRange)
    {
        if (auto base = base) {
            if (field == "length")
                return new ArrayLength(base, context.nativeWordType);
            if (field == "ptr")
                return new ArrayPointer(this.elementType, base);
            if (field == "base")
                return new ArrayBase(base);
            if (field == "front") {
                return context.compiler.dereference(
                    new ArrayPointer(this.elementType, base));
            }
            if (field == "empty") {
                auto length = new ArrayLength(base, context.nativeWordType);

                return context.compiler.binaryOp(
                    "==", context, length, context.compiler.wordLiteral(context.platform, 0), locRange);
            }
            if (field == "next") {
                auto length = new ArrayLength(base, context.nativeWordType);

                return new ArraySlice(
                    base, context.compiler.wordLiteral(context.platform, 1), length, locRange, context.platform);
            }
            if (field == "dup") {
                return arrayDup(context, base);
            }
        }
        return null;
    }

    override (nullable Expression | fail Error) binaryOp(
        Context context, string op, Expression left, Expression right, LocRange locRange)
    {
        if (op == "==" && right.type.instanceOf(Array)) {
            (Expression | fail Error) do1(Expression left) {
                (Expression | fail Error) do2(Expression right) {
                    return arrayEqual(context, left, right);
                }
                return context.compiler.consume(context, right, &do2);
            }
            return context.compiler.consume(context, left, &do1);
        }
        return null;
    }

    override nullable Expression implicitConvertFrom(Context context, Expression source)
    {
        if (source.type.instanceOf(NullPointer) && this.zeroInitializable)
        {
            return new EmptyArrayLiteral(this);
        }
        return null;
    }

    override nullable Expression implicitConvertTo(Context context, Expression source, Type target)
    {
        if (auto targetArray = target.instanceOf(Array)) {
            if (elementType.triviallyConvertsTo(targetArray.elementType)) {
                return context.compiler.trivialCastTo(target, source);
            }
        }
        return null;
    }

    override (nullable Expression | fail Error) truthy(Context context, Expression expr, LocRange locRange)
    {
        (Expression | fail Error) do_(Expression expr) {
            return context.compiler.truthy(context, new ArrayPointer(this.elementType, expr), locRange);
        }
        return context.compiler.consume(context, expr, &do_);
    }
}

class ASTArray : ASTSymbol
{
    ASTSymbol elementType;

    this(this.elementType, this.locRange) { }

    override (Type | fail Error) compile(Context context)
    {
        auto sym = this.elementType.compile(context)?;
        if (auto pending = sym.instanceOf(PendingSymbol))
        {
            return new Array(pending, context.platform);
        }
        auto symtype = sym.beType(this.locRange)?;
        return new Array(symtype, context.platform);
    }

    override string repr() {
        return elementType.repr ~ "[]";
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astArray", [ elementType.quote(quoter) ], locRange);
    }
}

int getArrayLen(Generator output, Type arrayType, int arrayReg)
{
    return output.fun.field(arrayType.emit(output.platform), arrayReg, 0);
}

class ArrayLength : Expression
{
    Expression arrayValue;

    this(this.arrayValue, this.type) { this.info = ExprInfo(Lifetime.gifted); }

    override int emit(Generator output)
    {
        int arrayReg = this.arrayValue.emit(output);

        return getArrayLen(output, this.arrayValue.type, arrayReg);
    }

    override void hash(Hash hash) { hash.adds("ArrayLength"); this.arrayValue.hash(hash); }

    override string repr() { return "($(this.arrayValue.repr)).length"; }
}

int getArrayPtr(Generator output, Array arrayType, int arrayReg)
{
    return output.fun.bitcast(
        output.fun.field(arrayType.emit(output.platform), arrayReg, 1),
        new BackendPointerType(arrayType.elementType.emit(output.platform)));
}

(Symbol | fail Error) arrayDup(Context context, Expression base)
{
    auto base = new ASTSymbolHelper(base);
    return (context.compiler.$expr ({
        auto base = $base;
        auto result = new typeof(base)(base.length);
        for (i, var in base) result[i] = var; // TODO __emplace
        result;
    })).compile(context);
}

class ArrayPointer : Expression
{
    Type elementType;

    Expression arrayValue;

    this(this.elementType, this.arrayValue) {
        this.type = new Pointer(this.elementType);
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator output)
    {
        int arrayReg = this.arrayValue.emit(output);

        return getArrayPtr(output, this.arrayValue.type.instanceOf(Array).notNull, arrayReg);
    }

    override void hash(Hash hash) { hash.adds("ArrayPointer"); this.arrayValue.hash(hash); }

    override string repr() { return "($(this.arrayValue.repr)).ptr"; }
}

int getArrayBase(Generator output, Type arrayType, int arrayReg)
{
    return output.fun.field(arrayType.emit(output.platform), arrayReg, 2);
}

class ArrayBase : Expression
{
    Expression arrayValue;

    this(this.arrayValue) {
        this.type = once new Pointer(new Void);
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator output)
    {
        int arrayReg = this.arrayValue.emit(output);

        return getArrayBase(output, this.arrayValue.type, arrayReg);
    }

    override void hash(Hash hash) { hash.adds("ArrayBase"); this.arrayValue.hash(hash); }

    override string repr() { return "($(this.arrayValue.repr)).__base"; }
}

int makeArray(Generator output, Type elementType, int lenReg, int ptrReg, int baseReg)
{
    BackendType structType = (new Array(elementType, output.platform)).emit(output.platform);
    auto voidp = output.platform.voidp;

    return output.fun.structLiteral(structType, [
        lenReg,
        output.fun.bitcast(ptrReg, voidp),
        baseReg
    ]);
}

// TODO use this as a basis for all array-allocating expressions
class ArrayAllocation : Expression
{
    Type elementType;

    (Expression | size_t) length;

    this(this.elementType, this.length, Platform platform) {
        this.type = new Array(this.elementType, platform);
        this.info = ExprInfo(Lifetime.gifted);
    }

    override int emit(Generator output)
    {
        auto backendSizeT = output.platform.nativeWordType;
        auto voidp = output.platform.voidp;
        auto backendElementType = this.elementType.emit(output.platform);
        int elementSizeReg = output.fun.wordLiteral(output.platform, backendElementType.size(output.platform));
        int threeWordSizeReg = output.fun.wordLiteral(output.platform, backendSizeT.size(output.platform) * 3);
        int oneReg = output.fun.wordLiteral(output.platform, 1);
        int twoReg = output.fun.wordLiteral(output.platform, 2);
        int threeReg = output.fun.wordLiteral(output.platform, 3);
        int arrayLength = this.length.case(
            Expression ex: ex.emit(output),
            size_t sz: output.fun.wordLiteral(output.platform, sz));
        int arrayBytes = output.fun.binop("*", backendSizeT, arrayLength, elementSizeReg);
        int totalArrayBytes = output.fun.binop("+", backendSizeT, arrayBytes, threeWordSizeReg);
        int arrayBase = output.fun.call(voidp, "neat_runtime_alloc", [totalArrayBytes]);
        // ptr = base + 2
        int arrayPtr = output.fun.bitcast(output.fun.ptrOffset(backendSizeT, arrayBase, threeReg), voidp);
        // base[0] = refs (1)
        // base[1] = allocated length (in elements)
        // base[2] = used length (in elements, inited to allocated length)
        output.fun.call(
            once new BackendVoidType,
            "neat_runtime_refcount_set",
            [arrayBase, oneReg]);
        output.fun.store(backendSizeT, output.fun.ptrOffset(backendSizeT, arrayBase, oneReg), arrayLength);
        output.fun.store(backendSizeT, output.fun.ptrOffset(backendSizeT, arrayBase, twoReg), arrayLength);

        int arrayPtrBc = output.fun.bitcast(arrayPtr, new BackendPointerType(backendElementType));
        return makeArray(output, this.elementType, arrayLength, arrayPtrBc, arrayBase);
    }

    override void hash(Hash hash) {
        hash.adds("ArrayAllocation");
        this.length.case {
            Expression ex: ex.hash(hash);
            size_t sz: hash.addl(sz);
        }
    }

    override string repr() {
        string len = length.case(Expression e: e.repr, size_t s: "$s");
        return "new $(elementType.repr)[]($(len))";
    }
}

class ArraySlice : Expression
{
    Expression base;

    Expression lower;

    Expression upper;

    LocRange locRange;

    Array arrayType;

    this(this.base, this.lower, this.upper, this.locRange, Platform platform) {
        auto baseType = this.base.type;
        if (auto arrayType = baseType.instanceOf(Array)) {
            this.arrayType = arrayType;
        } else if (auto pointerType = baseType.instanceOf(Pointer)) {
            this.arrayType = new Array(pointerType.target, platform);
        } else {
            print("$(locRange.repr): slice of non-array/non-pointer - catch this earlier!");
            exit(1);
        }
        this.type = this.arrayType;
        this.info = this.base.info;
    }

    override int emit(Generator output)
    {
        assert(lower.type.emit(output.platform).same(output.platform.nativeWordType));
        assert(upper.type.emit(output.platform).same(output.platform.nativeWordType));

        BackendType voidp = output.platform.voidp;

        auto elementType = this.arrayType.elementType.emit(output.platform);

        int baseReg = this.base.emit(output);
        int lowerReg = this.lower.emit(output);
        int upperReg = this.upper.emit(output);
        mut int base, ptr;
        if (this.base.type.instanceOf(Array)) {
            base = getArrayBase(output, this.arrayType, baseReg);
            ptr = getArrayPtr(output, this.arrayType, baseReg);
        } else {
            base = output.fun.bitcast(output.fun.wordLiteral(output.platform, 0), voidp);
            ptr = baseReg;
        }
        // ptr = ptr + lower
        int newPtr = output.fun.ptrOffset(elementType, ptr, lowerReg);
        // len = upper - lower
        int newLen = output.fun.binop(
            "-", output.platform.nativeWordType,
            upperReg, lowerReg);

        // TODO acquire ref
        return makeArray(output, this.arrayType.elementType, newLen, newPtr, base);
    }

    override void hash(Hash hash) {
        hash.adds("ArraySlice");
        base.hash(hash);
        lower.hash(hash);
        upper.hash(hash);
    }
    override string repr() return "$(base.repr)[$(lower.repr) .. $(upper.repr)]";
}

Expression arrayEqual(Context context, Expression left, Expression right) {
    auto compiler = context.compiler;

    Array leftArray = left.type.instanceOf(Array).notNull;
    Array rightArray = right.type.instanceOf(Array).notNull;

    Parameter[] params = [
        Parameter.simple("left", leftArray),
        Parameter.simple("right", rightArray),
    ];

    ASTStatement body_()
    {
        if (leftArray.elementType.same(once new Character)
            && rightArray.elementType.same(once new Character)) {
            return compiler.$stmt {
                import package(compiler).neat.runtime.stdlib : memcmp;

                if (left.length != right.length) return false;
                return memcmp(left.ptr, right.ptr, left.length) == 0;
            };
        }
        return compiler.$stmt {
            if (left.length != right.length) return false;
            for (i in 0 .. left.length) {
                if (left[i] != right[i]) return false;
            }
            return true;
        };
    }

    auto fn = compiler.createRuntimeFunction(context, "array_eq", new Boolean, params, &body_);

    return context.compiler.mkCall(fn, [left, right], __RANGE__);
}

Expression releaseArray(Context context, Expression value) {
    auto compiler = context.compiler;

    Array array = value.type.instanceOf(Array).notNull;
    Parameter[] params = [Parameter.simple("value", array)];

    ASTStatement body_()
    {
        return compiler.$stmt {
            if (!value.base) return;
            if (!neat_runtime_refcount_dec("array release", value.base))
                return;
            for (i in 0 .. value.length) {
                __destroy(value[i]);
            }
            free(value.base);
        };
    }

    auto fn = compiler.createRuntimeFunction(context, "arrayrelease", new Void, params, &body_);

    return context.compiler.mkCall(fn, [value], __RANGE__);
}

(Expression | fail Error) arrayCat(Context context, mut Expression left, mut Expression right, LocRange locRange) {
    auto compiler = context.compiler;

    Array leftArray = left.type.instanceOf(Array).notNull;

    mut (nullable Expression | :unknown) ltr_ = :unknown;
    nullable Expression ltr() {
        if (ltr_ == :unknown)
            ltr_ = context.compiler.implicitConvertTo(context, left, right.type);
        // TODO bottom assert
        return ltr_.case(:unknown: return null);
    }

    mut (nullable Expression | :unknown) rtl_ = :unknown;
    nullable Expression rtl() {
        if (rtl_ == :unknown)
            rtl_ = context.compiler.implicitConvertTo(context, right, left.type);
        // TODO bottom assert
        return rtl_.case(:unknown: return null);
    }

    bool sameType = left.type.same(right.type);
    bool appendElementType = leftArray.elementType.same(right.type)
        || leftArray.elementType.implicitConvertFrom(context, right);
    bool appendArrays = sameType || ltr || rtl;

    // TODO should element append really live in this function?
    // if we factor it out the logic gets a bit easier probably.
    if (!appendElementType && !appendArrays) {
        return locRange.fail("incompatible types for concat: " ~ left.type.repr ~ " and " ~ right.type.repr);
    }

    (Expression left, Expression right) merge() {
        if (sameType || appendElementType) return (left, right);
        if (auto rtl = rtl) return (left, rtl);
        return (ltr.notNull, right);
    }
    auto = merge;

    ASTStatement body_() {
        if (appendElementType) {
            return compiler.$stmt {
                if (left.base) {
                    size_t prevCap = (cast(size_t*) left.base)[1];
                    size_t* prevUsed = &(cast(size_t*) left.base)[2];
                    auto prevFrontier = &(cast(typeof(left.ptr)) &(cast(size_t*) left.base)[3])[*prevUsed];
                    if (&left.ptr[left.length] is prevFrontier && *prevUsed < prevCap) {
                        *prevUsed += 1;
                        prevFrontier[0] = right;
                        return left[0 .. $ + 1];
                    }
                }
                auto result = new typeof(left)(left.length * 2 + 1);
                for (i, src in left) result[i] = src;
                result[left.length] = right;
                // used
                (cast(size_t*) result.base)[2] = left.length + 1;
                return result[0 .. left.length + 1];
            };
        } else if (appendArrays) {
            return compiler.$stmt {
                // TODO don't try freeing result[i] on move-into
                auto newLength = left.length + right.length;
                if (left.base) {
                    size_t prevCap = (cast(size_t*) left.base)[1];
                    size_t* prevUsed = &(cast(size_t*) left.base)[2];
                    auto prevFrontier = &(cast(typeof(left.ptr)) &(cast(size_t*) left.base)[3])[*prevUsed];
                    if (&left.ptr[left.length] is prevFrontier && *prevUsed + right.length <= prevCap) {
                        *prevUsed += right.length;
                        for (i, value in right) prevFrontier[i] = value;
                        return left[0 .. newLength];
                    }
                }
                auto result = new typeof(left)(left.length * 2 + right.length);
                for (i, value in left) result[i] = value;
                for (i, value in right) result[left.length + i] = value;
                (cast(size_t*) result.base)[2] = newLength;
                return result[0 .. newLength];
            };
        } else assert(false);
    }
    Parameter[] params = [
        Parameter.simple("left", left.type),
        Parameter.simple("right", right.type)];
    auto fn = compiler.createRuntimeFunction(context, "arrayCat", left.type, params, &body_);
    auto astFn = new ASTSymbolHelper(fn);
    auto astLeft = new ASTSymbolHelper(left);
    auto astRight = new ASTSymbolHelper(right);

    return compiler.call(
            context, astFn, [
                ASTArgument(astLeft, "", __RANGE__), ASTArgument(astRight, "", __RANGE__)],
            locRange, false)?
        .notNull;
}

(Statement | fail Error) arrayCatAssign(Context context, Reference left, Expression right, LocRange locRange) {
    auto compiler = context.compiler;

    Array leftArray = left.type.instanceOf(Array).notNull;
    bool appendElementType = leftArray.elementType.same(right.type)
        || leftArray.elementType.implicitConvertFrom(context, right);
    bool appendArrays = leftArray.same(right.type);

    if (!appendElementType && !appendArrays) {
        return locRange.fail("incompatible types for '~=': " ~ leftArray.repr ~ " and " ~ right.type.repr);
    }

    ASTStatement body_() {
        if (appendElementType) {
            return compiler.$stmt {
                if (leftp.base) {
                    size_t prevRefs = (cast(size_t*) leftp.base)[0];
                    size_t prevCap = (cast(size_t*) leftp.base)[1];
                    size_t* prevUsed = &(cast(size_t*) leftp.base)[2];
                    auto prevFrontier = &(cast(typeof(leftp.ptr)) &(cast(size_t*) leftp.base)[3])[*prevUsed];
                    if (&leftp.ptr[leftp.length] is prevFrontier && *prevUsed < prevCap) {
                        *prevUsed += 1;
                        prevFrontier[0] = __take(right);
                        *leftp = (*leftp)[0 .. $ + 1];
                        return;
                    }
                    if (prevRefs == 1) {
                        auto result = new typeof(*leftp)(leftp.length * 2 + 1);
                        for (i, src in *leftp) result[i] = __take(src);
                        result[leftp.length] = __take(right);
                        // used
                        (cast(size_t*) result.base)[2] = leftp.length + 1;
                        free(leftp.base);
                        (cast(void**) leftp)[2] = null;
                        *leftp = result[0 .. leftp.length + 1];
                        return;
                    }
                }
                auto result = new typeof(*leftp)(leftp.length * 2 + 1);
                for (i, src in *leftp) result[i] = src;
                result[leftp.length] = __take(right);
                // used
                (cast(size_t*) result.base)[2] = leftp.length + 1;
                *leftp = result[0 .. leftp.length + 1];
            };
        } else if (appendArrays) {
            return compiler.$stmt {
                // TODO don't try freeing result[i] on move-into
                auto newLength = leftp.length + right.length;
                if (leftp.base) {
                    size_t prevCap = (cast(size_t*) leftp.base)[1];
                    size_t* prevUsed = &(cast(size_t*) leftp.base)[2];
                    auto prevFrontier = &(cast(typeof(leftp.ptr)) &(cast(size_t*) leftp.base)[3])[*prevUsed];
                    if (&leftp.ptr[leftp.length] is prevFrontier && *prevUsed + right.length <= prevCap) {
                        *prevUsed += right.length;
                        for (i, value in right) prevFrontier[i] = value;
                        *leftp = (*leftp)[0 .. newLength];
                        return;
                    }
                }
                auto result = new typeof(*leftp)(leftp.length * 2 + right.length);
                for (i, value in *leftp) result[i] = value;
                for (i, value in right) result[leftp.length + i] = value;
                (cast(size_t*) result.base)[2] = newLength;
                *leftp = result[0 .. newLength];
            };
        } else assert(false);
    }
    Parameter[] params = [
        Parameter.simple("leftp", new Pointer(leftArray)),
        Parameter.simple("right", right.type)];
    auto fn = compiler.createRuntimeFunction(context, "arrayCatAssign", new Void, params, &body_);
    auto astFn = new ASTSymbolHelper(fn);
    auto astLeftPtr = new ASTSymbolHelper(compiler.reference(left));
    mut ASTSymbol astRight = new ASTSymbolHelper(right);
    if (appendElementType) {
        if (right.info.lifetime == Lifetime.gifted)
            astRight = new ASTOverrideLifetime(astRight, Lifetime.lexical, __RANGE__);
        if (right.info.lifetime == Lifetime.lexical || right.info.lifetime == Lifetime.ephemeral)
            astRight = new ASTLeakExpr(astRight, __RANGE__);
    }

    return compiler.call(
            context, astFn, [
                ASTArgument(astLeftPtr, "", __RANGE__), ASTArgument(astRight, "", __RANGE__)],
            locRange, false)?
        .notNull
        .(compiler.exprStatement(that));
}

(nullable ASTSymbol | fail Error) parseArrayLiteral(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    if (parser.acceptToken(TokenType.lsquarebracket)) { }
    else {
        parser.revert;
        return null;
    }
    mut ASTArrayLiteralElement[] values;
    while (true) {
        if (parser.acceptToken(TokenType.rsquarebracket)) break;
        auto from = parser.from;
        ASTSymbol value = lexicalContext.compiler.parseExpression(parser, lexicalContext)?
            .notNull;
        values ~= ASTArrayLiteralElement(value, parser.to(from));
        if (parser.acceptToken(TokenType.rsquarebracket)) break;
        parser.expectToken(TokenType.comma)?;
    }
    parser.commit;
    return new ASTArrayLiteral(null, values);
}

// marker: type that converts to any array type.
// type of [].
class EmptyArrayType : Type
{
    this() { this.zeroInitializable = true; }

    override BackendType emit(Platform platform) {
        return new BackendVoidType;
    }

    override bool same(Type other) {
        return !!other.instanceOf(EmptyArrayType);
    }

    override nullable Expression implicitConvertTo(Context context, Expression source, Type target)
    {
        if (target.instanceOf(Array)) {
            return new EmptyArrayLiteral(target);
        }
        return null;
    }

    override string repr() { return "typeof([])"; }
    override void hash(Hash hash) { hash.adds("EmptyArrayType"); }
}

class EmptyArrayLiteral : Expression
{
    nullable Type type_; // may be null

    this(this.type_) {
        if (auto type = this.type_) this.type = type; // Very good code.
        else this.type = new EmptyArrayType;
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator generator) {
        if (!this.type_)
            return generator.fun.voidLiteral;
        auto elementType = this.type_.instanceOf(Array).elementType;
        auto voidp = generator.platform.voidp;
        auto elementp = new BackendPointerType(elementType.emit(generator.platform));

        int len = generator.fun.wordLiteral(generator.platform, 0);
        int ptr = generator.fun.bitcast(generator.fun.intLiteral(0), elementp);
        int base = generator.fun.bitcast(generator.fun.intLiteral(0), voidp);

        return makeArray(generator, elementType, len, ptr, base);
    }

    override void hash(Hash hash) {
        hash.adds("EmptyArrayLiteral");
        if (this.type_)
            this.type_.hash(hash);
        else
            hash.adds(" generic");
    }
    override string repr() return "[]";
}

struct ASTArrayLiteralElement
{
    ASTSymbol value;

    LocRange locRange;
}

class ASTArrayLiteral : ASTSymbol
{
    nullable ASTSymbol typeHint;

    ASTArrayLiteralElement[] elements;

    this(this.typeHint, this.elements) { }

    override (Expression | fail Error) compile(Context context) {
        if (!this.elements.length)
            return new EmptyArrayLiteral(null);
        mut Expression[] values;
        for (element in this.elements)
            values ~= element.value.compile(context)?.beExpressionImplCall(context, element.locRange)?;
        (Type | fail Error) getType() {
            if (this.typeHint) {
                return this.typeHint.compile(context)?.beType(__RANGE__)?;
            }
            mut nullable Expression mergedReference;
            for (i, element in this.elements) {
                if (!mergedReference) mergedReference = values[i];
                else {
                    // TODO centralize somewhere
                    auto value = values[i];
                    auto left = context.compiler.implicitConvertTo(context, value, mergedReference.type);
                    auto right = context.compiler.implicitConvertTo(context, mergedReference.notNull, value.type);
                    if (!left && !right)
                        return element.locRange.fail("incompatible expression type");
                    else if (left && right && !left.type.same(right.type))
                        return element.locRange.fail("ambiguous expression type");
                    if (left) mergedReference = left;
                    else if (right) mergedReference = right;
                }
            }
            return mergedReference.type;
        }
        auto mergeType = getType?;
        for (i in 0 .. this.elements.length) {
            if (auto castValue = context.compiler.implicitConvertTo(context, values[i], mergeType))
                values[i] = castValue;
            else
                return this.elements[i].locRange.fail("cannot convert to shared type $(mergeType.repr)");
        }
        auto target = new ArrayAllocation(mergeType, values.length, context.platform);
        (nullable Expression | fail Error) do_(Expression target) {
            mut Statement[] moves;
            auto base = new ArrayPointer(mergeType, target);
            for (int i, value in values) {
                auto target = context.compiler.dereference(
                    context.compiler.pointerOffset(base, context.compiler.intLiteral(i)));
                moves ~= context.compiler.move(context, target, value)?;
            }
            return context.compiler.statementExpression(
                context.compiler.sequenceStatement(moves), target);
        }
        return context.compiler.exprWithTemporaryExpr(context.getUniqueId, target, &do_).case(
            nullable Expression e: e.notNull,
            Error err: err);
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTArrayLiteral'"); assert(false); }
}

/**
 * $ for length in an array index context.
 */
class ASTArrayLength : ASTSymbol
{
    this(this.locRange) { }

    override (Symbol | fail Error) compile(Context context) {
        auto surroundingArraySymbol = context.compiler.lookup(
            context, __RANGE__, LookupReason.identifier, "__array")?;
        locRange.assert(
            surroundingArraySymbol && surroundingArraySymbol.instanceOf(Expression),
            "'\$' can only be used inside an array index context")?;

        return new ArrayLength(
            surroundingArraySymbol.instanceOf(Expression).notNull,
            context.nativeWordType);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTArrayLength", locRange), [
                quoter.quoteLocRange(locRange)], locRange);
    }
}

// TODO this should be a template in the runtime
class ArrayCastExpr : Expression
{
    Expression source;

    Array target;

    this(this.source, this.target) { this.type = target; this.info = source.info; }

    override int emit(Generator generator) {
        Array sourceArray = source.type.instanceOf(Array).notNull;
        auto sourceArrayElemBk = sourceArray.elementType.emit(generator.platform);
        int sourceSize = sourceArrayElemBk.size(generator.platform);
        auto targetArrayElemBk = target.elementType.emit(generator.platform);
        int destSize = targetArrayElemBk.size(generator.platform);
        int sourceReg = source.emit(generator);
        int arrayBase = generator.getArrayBase(sourceArray, sourceReg);
        int arrayPtr = generator.getArrayPtr(sourceArray, sourceReg);

        // TODO validate length conversion matchup
        int sourceElemSzReg = generator.fun.wordLiteral(generator.platform, sourceSize);
        int destElemSzReg = generator.fun.wordLiteral(generator.platform, destSize);
        auto backendSizeT = generator.platform.nativeWordType;
        int sourceLen = generator.getArrayLen(sourceArray, sourceReg);
        int totalBytes = generator.fun.binop("*", backendSizeT, sourceLen, sourceElemSzReg);
        int newLen = generator.fun.binop("/", backendSizeT, totalBytes, destElemSzReg);

        return generator.makeArray(target.elementType, lenReg=newLen, ptrReg=arrayPtr, baseReg=arrayBase);
    }

    override void hash(Hash hash) { hash.adds("ArrayCastExpr"); source.hash(hash); target.hash(hash); }
    override string repr() { return "cast($(target.repr)) $(source.repr)"; }
}

/**
 * Even though the lifetime logic does not support this, sometimes it's
 * useful to be able to borrow an expression anyways.
 * (for instance, for (a in array) borrows a from array.
 * TODO move to compiler/expr.
 */
class ASTOverrideLifetime : ASTSymbol
{
    ASTSymbol source;

    Lifetime lifetime;

    this(this.source, this.lifetime, this.locRange) { }

    override (Symbol | fail Error) compile(Context context) {
        auto source = this.source.compile(context)?.beExpression(this.locRange)?;
        return new OverrideLifetimeExpr(source, ExprInfo(this.lifetime));
    }

    override ASTSymbol quote(Quoter quoter) {
        ASTSymbol quoteLifetime() {
            if (lifetime == Lifetime.gifted)
                return quoter.compiler.$expr Lifetime.gifted;
            if (lifetime == Lifetime.ephemeral)
                return quoter.compiler.$expr Lifetime.ephemeral;
            if (lifetime == Lifetime.lexical)
                return quoter.compiler.$expr Lifetime.lexical;
            if (lifetime == Lifetime.permanent)
                return quoter.compiler.$expr Lifetime.permament;
            if (lifetime == Lifetime.none)
                return quoter.compiler.$expr Lifetime.none;
            assert(false);
        }
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTOverrideLifetime", __RANGE__), [
                this.source.quote(quoter),
                quoteLifetime,
                quoter.quoteLocRange(this.locRange)], __RANGE__);
    }
}

/**
 * Leak a reference.
 */
class ASTLeakExpr : ASTSymbol
{
    ASTSymbol source;

    this(this.source, this.locRange) { }

    override (Symbol | fail Error) compile(Context context) {
        auto source = this.source.compile(context)?.beExpression(this.locRange)?;
        return new OverrideLifetimeExpr(source.type.copy(context, source)?, source.info);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTLeakExpr", __RANGE__), [
                this.source.quote(quoter),
                quoter.quoteLocRange(this.locRange)], __RANGE__);
    }
}
