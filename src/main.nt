module main;

macro import package(compiler).std.macro.cimport;
macro import package(compiler).std.macro.listcomprehension;

import backend.base;
import backend.c;
version (LLVMBackend) {
    import backend.llvm;
}
import helpers;
import neat.array;
import neat.base;
import neat.class_;
import neat.compiler;
import neat.docgen;
import neat.expr;
import neat.FileIdTableImpl;
import neat.function_;
import neat.packages;
import neat.stuff;
import neat.templ;
import neat.types;
import neat.unittest_;
import neat.util;
import neat.workpool;
import polyhash;
import package(compiler).std.algorithm;
import package(compiler).std.file;
import package(compiler).std.json;
import package(compiler).std.string;
import package(compiler).std.thread;
import c_header("sys/inotify.h");

extern(C) int getpid();
extern(C) void neat_runtime_system(string command);
extern(C) void neat_runtime_dlcall(string soname, string name, void* arg);
extern(C) bool neat_runtime_waitpid(int pid);
extern(C) int neat_runtime_execbg(string command, string[] arguments);
extern(C) long compiler_hash_add();
extern(C) long compiler_hash_mult();

string removeSlashes(string s) {
    mut string result;
    for (i in 0 .. s.length) {
        if (s[i .. i + 1] == "/") result = result ~ "_";
        else result = result ~ s[i .. i + 1];
    }
    return result;
}

struct BackgroundCompilation
{
    Hash hash;
    string srcFile;
    string objFile;
    int pid;
    string[] extraLibs;
}

private string getEnv(string key, string default_ = "") {
    import package(compiler).std.process : getEnv;
    auto ret = getEnv(key);
    if (!ret.empty) return ret;
    return default_;
}

BackgroundCompilation emitModule(
    Module module_, CompilationVisitor[] visitors, BuildSettings settings, FileIdTable fileIdTable,
    Mutex visitorLock, string earlyId)
{
    auto hash = new Hash;

    hash.apply(compiler_hash_add, compiler_hash_mult);
    settings.backend.hash(hash);

    hash.adds("compiler($(hash.text))");
    if (settings.x86_32) hash.adds("m32");
    if (settings.optimize) hash.adds("opt");
    // Macros and binaries must not share objects!
    // Macros have special magic to avoid dlopen issues.
    if (settings.forMacro) hash.adds("macro");
    for (ver in settings.versions) hash.adds("version=$(ver)");
    hash.adds(earlyId);

    auto symbols = module_.finishedSymbols;
    [symbol.hash(hash) for symbol in symbols];
    visitorLock.lock;
    [[visitor.visit(symbol) for symbol in symbols] for visitor in visitors];
    visitorLock.unlock;

    mut string objFile = ".obj/$(hash.text).o";
    version (LLVMBackend) {
        if (settings.backend.instanceOf(LLVMBackend) && settings.optimize) {
            objFile = ".obj/$(hash.text).bc";
        }
    }

    mut string srcFile;
    version (LLVMBackend) {
        if (settings.backend.instanceOf(LLVMBackend)) {
            srcFile = objFile;
        }
    }
    if (!srcFile.length) {
        assert(!!settings.backend.instanceOf(CBackend));
        srcFile = ".obj/module_$(hash.text).c";
    }

    auto backendModule = settings.backend.createModule(
        settings.platform, srcFile, module_.locRange.toBackendLoc(fileIdTable), settings.forMacro);
    version (LLVMBackend) {
        auto backendModuleLLVM = backendModule.instanceOf(LLVMBackendModule);
    }
    auto backendModuleC = backendModule.instanceOf(CBackendModule);

    int build(string src, string obj) {
        import package(compiler).std.string : join;

        version (LLVMBackend) {
            assert(!backendModuleLLVM);
        }

        mut string exec;
        mut string[] args;

        string[] baseArgs = ["-c", "-fpic", "-fno-strict-aliasing", src, "-o", obj];
        exec = getEnv("CC", "gcc");
        if (settings.optimize) args = baseArgs ~ "-O3";
        else args = baseArgs;
        if (settings.extraCFlags.length > 0) args ~= settings.extraCFlags.split(" ");

        string cmd = exec ~ " " ~ args.join(" ");
        int pid = neat_runtime_execbg(exec, args);
        if (settings.platform.platformFlags.verbose) {
            print("\$ $cmd [&$pid]");
        }
        return pid;
    }

    if (settings.caching && exists(objFile) && exists(srcFile)) {
        // preexisting object
        mut string[] extraLibs;
        if (".obj/$(hash.text).extralibs".exists) {
            extraLibs = ".obj/$(hash.text).extralibs".readText.split("\n");
        }
        return BackgroundCompilation(hash, srcFile, objFile, 0, extraLibs);
    }

    auto generator = new Generator(settings.platform, backendModule, fileIdTable);
    module_.emit(generator);
    backendModule.done;

    int pid() {
        version (LLVMBackend) {
            if (backendModuleLLVM) {
                backendModuleLLVM.writeOutput;
                return 0;
            }
        }
        assert(!!backendModuleC);
        {
            auto csrc = backendModuleC.output.text;
            write(srcFile, csrc);
        }
        return build(srcFile, objFile);
    }
    int pid = pid;
    auto compilation = BackgroundCompilation(hash, srcFile, objFile, pid, generator.extraLibs);

    if (generator.extraLibs.length > 0) {
        // FIXME [join line on "\n"
        ".obj/$(hash.text).extralibs".write(
            [join with "\n" line for line in generator.extraLibs]);
    } else {
        ".obj/$(hash.text).extralibs".remove;
    }

    return compilation;
}

class UnittestVisitor : CompilationVisitor
{
    this() { }

    string[] symbols;

    override void visit(FinishedSymbol sym) {
        if (auto uf = sym.instanceOf(CompiledUnittestFunction))
        {
            symbols ~= uf.fun.mangle;
        }
    }
}

class BuildSettings
{
    CompilerBase compiler;

    Backend backend;

    bool x86_32;

    bool caching;

    bool optimize;

    bool forMacro;

    string[] versions;

    PlatformFlags platformFlags;

    WorkPool pool;

    string extraCFlags;

    int loopPass;

    Platform platform() {
        BackendType macroWordType() {
            if (x86_32) return new BackendIntType;
            else return new BackendLongType;
        }
        return new Platform(macroWordType, platformFlags, versions);
    }

    this(this.compiler, this.backend, this.x86_32, this.caching, this.versions,
         this.platformFlags, this.optimize, this.forMacro,
         this.extraCFlags, this.pool, this.loopPass) { }
}

class CompilationTask : ITask
{
    Module module_;
    CompilationVisitor[] visitors;
    BuildSettings settings;
    FileIdTable fileIdTable;
    Mutex visitorLock;
    (:none | BackgroundCompilation) result;
    string id_;
    bool done;

    BackgroundCompilation compilation() {
        result.case {
            BackgroundCompilation c: return c;
            (:none): assert(false);
        }
    }

    this(this.module_, this.visitors, this.settings, this.fileIdTable, this.visitorLock) {
        this.result = :none;
        if (settings.forMacro) this.id_ = "emit $(module_.mangle) macro";
        else this.id_ = "emit $(module_.mangle)";
    }

    override string id() => id_;
    override bool fresh() => true;
    override void run() {
        this.result = emitModule(
            this.module_, this.visitors, this.settings, this.fileIdTable, this.visitorLock, this.id);
    }

    void waitDone() {
        if (done) return;
        int pid = compilation.pid;
        if (pid != 0) {
            neat_runtime_waitpid(pid);
        }
        done = true;
    }
}

struct BuildResult
{
    string[] objFiles;
    string[] intermediateFiles;
    Module module_;
    Hash hash;
}

class ModulePreProcessorImpl : ModulePreProcessor
{
    ASTModuleVisitor[] visitors;

    this(this.visitors) { }

    override void process(ASTModuleBase module_) {
        auto module_ = module_.instanceOf(ASTModule).notNull;

        [visitor.visit(module_) for visitor in visitors];
    }
}

class ModulePostProcessorImpl : ModulePostProcessor
{
    CompilationVisitor[] visitors;

    BuildSettings settings;

    FileIdTable fileIdTable;

    Mutex mutex, visitorLock;

    ModuleSet allModules;

    string[] taskIds;

    this(this.visitors, this.settings, this.fileIdTable) {
        this.visitorLock = new Mutex;
        this.mutex = new Mutex;
        this.allModules = new ModuleSet;
    }

    override void process(ModuleBase module_)
    {
        auto module_ = module_.instanceOf(Module).notNull;

        queue(module_);
    }

    void queue(Module module_) {
        bool add(Module module_) {
            with (this.mutex.locked) {
                if (!this.allModules.add(module_)) return false;

                auto task = new CompilationTask(
                    module_, this.visitors, this.settings, this.fileIdTable, this.visitorLock);

                this.settings.pool.queue(task);
                if (module_.moduleParseTaskId != "")
                    this.settings.pool.dependency(provider=module_.moduleParseTaskId, consumer=task.id);
                this.settings.pool.dependency(provider=task.id, consumer=:current);
                this.taskIds ~= task.id;
            }

            queue(module_);
            return true;
        }
        module_.walkModules(&add);
    }

    void wait() {
        mut int i;
        with (this.mutex.locked) {
            while (i < this.taskIds.length) {
                auto taskId = taskIds[i];

                with (this.mutex.unlocked) {
                    this.settings.pool.wait(taskId);
                }
                i++;
            }
        }
    }
}

(BuildResult | fail Error) buildAstModule(
    ASTModule astModule, BuildSettings settings,
    ASTModuleVisitor[] moduleVisitors, CompilationVisitor[] compilationVisitors,
    FileIdTable fileIdTable, Options options)
{
    auto preProcessor = new ModulePreProcessorImpl(moduleVisitors);
    auto postProcessor = new ModulePostProcessorImpl(compilationVisitors, settings, fileIdTable);
    preProcessor.process(astModule);

    auto icontext = makeIContext(
        settings.compiler, settings.platform, astModule.macroState,
        null, settings.loopPass, preProcessor, postProcessor);
    Module module_ = compileModule(astModule, icontext, addDefaultImports=true)?;

    postProcessor.wait;

    mut int[] pids;
    mut string[] objFiles;
    mut string[] intermediateFiles;
    auto hash = new Hash;
    hash.addl(__GENERATION__);
    for (taskId in postProcessor.taskIds.sort((a, b) => a.lexicallyBefore(b))) {
        auto task = settings.pool.wait(taskId).instanceOf(CompilationTask);
        auto compilation = task.compilation;
        objFiles ~= compilation.objFile;
        void addLinkerFlag(string flag) {
            if ([any a == flag for a in options.linkerArgs]) return;
            options.linkerArgs ~= flag;
        }
        [addLinkerFlag("-l$lib") for lib in compilation.extraLibs];
        intermediateFiles ~= compilation.srcFile;
        // TODO ordering
        compilation.hash.(hash.apply(add, mult));
        task.waitDone;
    }

    return BuildResult(objFiles, intermediateFiles, module_, hash);
}

class SimpleModulePreProcessor : ModulePreProcessor
{
    this() { }

    override void process(ASTModuleBase module_)
    {
    }
}

class SimpleModulePostProcessor : ModulePostProcessor
{
    this() { }

    override void process(ModuleBase module_)
    {
    }
}

(Function | fail Error) extractFunction(Module module_, string name, BuildSettings settings, LocRange locRange) {
    auto preProcessor = new SimpleModulePreProcessor;
    auto postProcessor = new SimpleModulePostProcessor;
    auto icontext = makeIContext(
        settings.compiler, settings.platform, new MacroState,
        module_, settings.loopPass, preProcessor, postProcessor);
    auto simpleContext = makeContext(icontext, module_);
    auto fun = module_.lookup(name, simpleContext, LookupReason.identifier, locRange)?;
    locRange.assert(!!fun, "undefined function '$(name)'")?;
    auto fun = fun.instanceOf(Function);
    locRange.assert(!!fun, "'$(name)' is not a function")?;
    return fun.notNull;
}

class ParserHelperImpl : ParserHelper
{
    BuildSettings settings;

    FileIdTable fileIdTable;

    this(this.settings, this.fileIdTable) { }

    override (void | fail Error) proxyCall(ASTModule astModule, string function_, MacroState macroState,
        LocRange locRange)
    {
        if (settings.platform.platformFlags.verbose) {
            print("# stageM $function_");
        }
        // ignore pragma(lib) in macro (what are you doing)
        auto dummyOptions = new Options;
        auto result = buildAstModule(astModule, this.settings, [], [], this.fileIdTable, dummyOptions)?;
        string objFiles = [join " " ~ a for a in result.objFiles];

        string baseCmd() {
            version (LLVMBackend) {
                if (settings.backend.instanceOf(LLVMBackend))
                    // FIXME configurable linker driver
                    return "clang-15 -opaque-pointers -Wno-unused-command-line-argument -fpic";
            }
            if (settings.backend.instanceOf(CBackend)) return getEnv("CC", "gcc") ~ " -fpic -fno-strict-aliasing";
            assert(false);
        }
        mut string baseCmd = baseCmd;
        if (settings.extraCFlags) baseCmd ~= " $(settings.extraCFlags)";

        string name = result.module_.extractFunction(function_, settings, locRange)?.mangle;
        (string soname, string cmd) soCmd() {
            string soname = ".obj/macro_$(name)_$(result.hash.text).so";
            version (LLVMBackend) {
                if (settings.backend.instanceOf(LLVMBackend)) {
                    return (
                        soname,
                        "$baseCmd -shared $objFiles -o $soname");
                }
            }
            if (settings.backend.instanceOf(CBackend)) {
                mut string flags = " -shared -g";
                if (settings.extraCFlags) flags ~= " $(settings.extraCFlags)";
                return (
                    soname,
                    "$baseCmd$flags$objFiles -o $soname");
            }
            assert(false);
        }
        auto = soCmd;

        if (!settings.caching || !exists(soname)) {
            if (settings.platform.platformFlags.verbose) {
                print("\$ $cmd");
            }
            neat_runtime_system(cmd);
        }
        neat_runtime_dlcall(soname, name, macroState);
    }
}

// "AST", lol. Package fresh off the commandline, dependencies not resolved yet.
// Needed because we can reference future packages.
struct ASTPackage
{
    string name;
    string path;
    bool syspkg;
    string[] deps;
}

// better way to do this (reassign?)
(string result, string remainder) slice(string text, string marker)
{
    int pos = find(text, marker);
    if (pos == -1) {
        return (text, "");
    }
    return (text[0 .. pos], text[pos + marker.length .. $]);
}

ASTPackage parsePackage(mut string arg, bool syspkg)
{
    auto pair1 = slice(arg, ":");
    string name = pair1.result; arg = pair1.remainder;
    assert(name.length > 0);
    auto pair2 = slice(arg, ":");
    string path = pair2.result; arg = pair2.remainder;
    assert(path.length > 0);
    mut string[] deps;
    while (arg.length)
    {
        auto pair3 = slice(arg, ",");
        deps ~= pair3.result; arg = pair3.remainder;
    }
    return ASTPackage(name, path, syspkg, deps);
}

string resolvePath(ASTPackage pak, string execPath) {
    if (!pak.syspkg) return realpath(pak.path);
    return realpath("$execPath/$(pak.path)");
}

Package[] resolvePackages(ASTPackage[] astPackages, string execPath) {
    Package[] result = [new Package(pkg.name, resolvePath(pkg, execPath), []) for pkg in astPackages];
    for (i, astPackage in astPackages) {
        for (dep in astPackage.deps) {
            mut nullable Package foundDep;
            for (resultPak in result) {
                if (resultPak.name == dep) {
                    if (foundDep) print("Dependency '$dep' of '$(astPackage.name)' exists twice!");
                    assert(!foundDep);
                    foundDep = resultPak;
                    break;
                }
            }
            if (!foundDep) {
                print("Missing package dependency: $dep");
                assert(false);
            }
            result[i].addDependency(foundDep.notNull);
        }
    }
    return result;
}

class UmlVisitor : CompilationVisitor
{
    (string base, string child)[] inheritance;

    this() { }

    override void visit(FinishedSymbol sym) {
        if (auto defClass = sym.instanceOf(DefineClassIntf)) {
            defClass.obj.case {
                Class class_: {
                    if (class_.superClass) {
                        auto pair = (class_.superClass.name, class_.name);
                        if (![any a == pair for a in this.inheritance])
                            this.inheritance ~= pair;
                    }
                    for (superIntf in class_.superIntfs) {
                        auto pair = (superIntf.name, class_.name);
                        if (![any a[0] == pair[0] && a[1] == pair[1] for a in this.inheritance])
                            this.inheritance ~= pair;
                    }
                }
                Intf intf: {
                    for (superIntf in intf.superIntfs) {
                        auto pair = (superIntf.name, intf.name);
                        if (![any a[0] == pair[0] && a[1] == pair[1] for a in this.inheritance])
                            this.inheritance ~= pair;
                    }
                }
            }
        }
    }

    void writeTo(string filename) {
        mut string diagram = "Digraph G {\n";
        void addl(string s) { diagram ~= "  $s\n"; }
        for (pair in inheritance) {
            addl("$(pair.base) -> $(pair.child) [dir=back, arrowhead=empty];");
        }
        diagram ~= "}\n";
        write(filename, diagram);
    }
}

class ModuleSet
{
    Module[string] store;
    this() { }
    bool add(Module mod)
    {
        if (this.store.has(mod.mangledName)) return false;
        this.store[mod.mangledName] = mod;
        return true;
    }
    Module[] array()
    {
        return store.values;
    }
}

string alignTabs(string text) {
    auto lines = text.split("\n");
    auto segments = [line.split("\t") for line in lines];
    int numTabs = [max [count ch in line where ch == '\t'] for line in lines];
    // Yes that `- 1` is intentional. Think about it.
    int[] spaceUse = [
        [max cast(int) lineSegments[i].length for lineSegments in segments where i < lineSegments.length - 1 base 0]
        for i in 0 .. numTabs];
    mut string res;
    for (line in segments) {
        for (i, segment in line) {
            res ~= segment;
            if (i < line.length - 1) {
                int target = spaceUse[i] + 1;
                for (k in 0 .. target - segment.length)
                    res ~= " ";
            }
        }
        res ~= "\n";
    }
    return res;
}

void help(string executable) {
    print("Usage: $executable [options] FILE.nt

Options:

\t-h\tOutput this help page.
\t-help
\t-Pname:path:dep[,dep]*\tDefine a package. Every source file must be in a package.
\t-package name:path:dep[,dep]*
\t-Sname:path:dep[,dep]*\tDefine a system package. Paths are relative to the compiler binary.
\t-syspackage name:path:dep[,dep]*
\t-Lflag\tAdd a command that will be passed through to the linker.
\t-llibrary
\t-Iinclude\tInclude a folder when invoking the C binding macro.
\t-o FILE\tCreate the output binary FILE.
\t-O\tCreate an optimized binary.
\t-c\tDon't create a binary.
\t-uml FILE.uml\tOutput an UML diagram of every compiled class to FILE.uml.
\t-unittest\tRun unittests before entering main.
\t-no-main\tDon't require or call a main function in the source file. Unittests are still run.
\t-backend=c\tUse the C backend to generate a binary.
\t-macro-backend=c\tUse the C backend to generate macros.
\t-m32\tTarget a 32-bit system.
\t-macro-m32\tGenerate macros for a 32-bit system.
\t-x\tBypass the object cache.
\t-j[num]\tUse threads to build in parallel. WARNING: known bugs!

Instead of specifying a file, the compiler can be called like:

\t$executable build

In this mode, package.json in the current folder is used to specify paths, output files and dependencies.
".alignTabs);
}

class Options
{
    string output;
    string[] linkerArgs;
    ASTPackage[] astPackages;
    bool dontLink;
    bool optimize;
    bool caching;
    bool x86_32, macro_x86_32;
    string intermediateListFile;
    nullable Backend backend, macroBackend;
    int generation;
    string umlFile;
    bool unittest_;
    bool noMain;
    bool cpr; // critical path report
    PlatformFlags platformFlags, macroPlatformFlags;
    bool run;
    bool loop, watch;
    string[] runArgs;
    string[] cFlags; // for std.macro.cimport
    string[] versions, macroVersions;
    string docGenFolder;
    string runningCompilerVersion;
    string requestedCompilerVersion;
    string extraCFlags, macroExtraCFlags;
    string fileIdOutput;
    // Global filename/id mapping.
    // Used to apply file IDs for LocRange literals compiled into us.
    FileIdTableImpl fileIdTable;
    int threads;

    this() {
        this.caching = true;
        this.generation = __GENERATION__;
        this.threads = 0;
        this.fileIdTable = new FileIdTableImpl;
    }

    string[] parseArgs(string executable, string[] args) {
        string startsWith(string haystack, string needle) {
            if (needle.length <= haystack.length && haystack[0 .. needle.length] == needle) {
                return haystack[needle.length .. $];
            }
            return null;
        }
        mut string[] remArgs;
        for (mut size_t i = 0; i < args.length; i += 1) {
            string arg = args[i];
            mut string flag;
            if (arg.length >= 2) flag = arg[0 .. 2];

            // package: like includes, but scoped
            // -Pname:path[:dep1[,dep2]*]?
            if (flag == "-h" || flag == "-help") {
                help(executable);
                exit(0);
            } else if (flag == "-P") {
                addPackage(arg[2 .. $], false);
            } else if (arg == "-package") {
                assert(i + 1 < args.length);
                addPackage(args[i + 1], false);
                i += 1;
            } else if (flag == "-S") {
                addPackage(arg[2 .. $], true);
            } else if (arg == "-syspackage") {
                assert(i + 1 < args.length);
                addPackage(args[i + 1], true);
                i += 1;
            } else if (arg == "-run") {
                this.run = true;
            } else if (arg == "--") {
                this.runArgs = args[i + 1 .. $];
                break;
            } else if (string ver = arg.startsWith("-running-compiler-version=")) {
                // Should only be passed via neat.ini!
                this.runningCompilerVersion = ver;
            } else if (string ver = arg.startsWith("-compiler-version=")) {
                this.requestedCompilerVersion = ver;
            } else if (flag == "-I") {
                cFlags ~= arg;
            } else if (arg == "-loop") {
                this.loop = true;
            } else if (arg == "-watch") {
                this.watch = true;
            } else if (flag == "-l") {
                this.linkerArgs ~= arg;
            } else if (flag == "-L") {
                this.linkerArgs ~= arg[2 .. $];
            } else if (arg == "-o") {
                assert(i + 1 < args.length);
                this.output = args[i + 1];
                i += 1;
            } else if (arg == "-O") {
                this.optimize = true;
            } else if (arg == "-release") {
                this.platformFlags.releaseMode = true;
            } else if (arg == "-v" || arg == "-verbose") {
                this.platformFlags.verbose = true;
                this.macroPlatformFlags.verbose = true;
            } else if (arg == "-c") {
                this.dontLink = true;
            } else if (arg == "-x") {
                this.caching = false;
            } else if (arg == "-backend=c") {
                this.backend = new CBackend;
            } else if (arg == "-macro-backend=c") {
                this.macroBackend = new CBackend;
            } else if (arg == "-backend=llvm") {
                version (LLVMBackend) {
                    this.backend = new LLVMBackend;
                } else {
                    print("LLVM backend not compiled in!");
                    exit(1);
                }
            } else if (arg == "-macro-backend=llvm") {
                version (LLVMBackend) {
                    this.macroBackend = new LLVMBackend;
                } else {
                    print("LLVM backend not compiled in!");
                    exit(1);
                }
            } else if (string ver = arg.startsWith("-version=")) {
                this.versions ~= ver;
            } else if (string ver = arg.startsWith("-macro-version=")) {
                this.macroVersions ~= ver;
            } else if (arg == "-m32") {
                this.x86_32 = true;
            } else if (arg == "-macro-m32") {
                this.macro_x86_32 = true;
            } else if (arg == "-print-generation") {
                print(itoa(__GENERATION__));
                exit(0); // TODO return :exit
            } else if (arg == "-next-generation") {
                // build the next generation of the compiler (used by rebuild.sh)
                this.generation = __GENERATION__ + 1;
            } else if (arg == "-uml") {
                assert(i + 1 < args.length);
                this.umlFile = args[i + 1];
                i += 1;
            } else if (arg == "-docgen") {
                assert(i + 1 < args.length);
                this.docGenFolder = args[i + 1];
                i += 1;
            } else if (arg == "-unittest") {
                this.unittest_ = true;
            } else if (arg == "-no-main") {
                this.noMain = true;
            } else if (arg == "-cpr") {
                this.cpr = true;
            } else if (arg == "-dump-intermediates") {
                // Dump list of intermediate sources into a file.
                // Used for C release generation.
                assert(i + 1 < args.length);
                this.intermediateListFile = args[i + 1];
                i += 1;
            } else if (string num = arg.startsWith("-j")) {
                if (num.length == 0) this.threads = 4;
                else this.threads = num.atoi;
            } else if (string rest = arg.startsWith("-extra-cflags=")) {
                this.extraCFlags = rest;
            } else if (string rest = arg.startsWith("-macro-extra-cflags=")) {
                this.macroExtraCFlags = rest;
            } else if (arg == "-file-id-pin") {
                assert(i + 2 < args.length);
                auto id = args[i + 1].atoi;
                auto path = args[i + 2];
                this.fileIdTable.setInheritedFileId(id, path);
                i += 2;
            } else if (arg == "-file-id-output") {
                assert(i + 1 < args.length);
                this.fileIdOutput = args[i + 1];
                i += 1;
            } else {
                remArgs ~= arg;
            }
        }
        if (watch && !loop) {
            print("error: -watch makes no sense without -loop");
            exit(1);
        }
        if (!run && !runArgs.empty) {
            print("error: -run not specified but extra args were given");
            exit(1);
        }
        return remArgs;
    }

    void addDefaults() {
        version (LLVMBackend) {
            if (!this.backend) {
                this.backend = new LLVMBackend;
            }
            if (!this.macroBackend) {
                this.macroBackend = new LLVMBackend;
            }
        } else {
            if (!this.backend) {
                this.backend = new CBackend;
            }
            if (!this.macroBackend) {
                this.macroBackend = new CBackend;
            }
        }
    }

    string[] allVersions() {
        return ["generation$(i+1)" for i in 0 .. this.generation] ~ this.versions;
    }

    string[] allMacroVersions() {
        return ["generation$(i+1)" for i in 0 .. __GENERATION__] ~ ["macro"] ~ this.macroVersions;
    }

    void addPackage(string pak, bool relative) {
        auto pak = parsePackage(pak, relative);
        if ([any a.name == pak.name for a in this.astPackages]) {
            print("warn: package double-specified: $(pak.name); using newer definition");
            this.astPackages = [a for a in this.astPackages where a.name != pak.name];
        }
        this.astPackages ~= pak;
    }

    void parseConfig(string path) {
        if (!path.exists) return;
        auto lines = path.read.split("\n");
        mut string[] args;
        for (line in lines) {
            auto words = line.split(" ");
            args ~= words[0];
            mut int used = 1;
            if (words[0] == "-file-id-pin") {
                args ~= words[1];
                used = 2;
            }
            if (words.length > used) args ~= words[used .. $].join(" ");
        }
        parseArgs("neat.ini", args);
    }
}

ASTModule builtinSymbols(Options options) {
    // parse task id doesn't matter; they're builtins.
    auto builtins = new ASTModule(
        "", new Package("builtins", "", []), moduleParseTaskId="",
        new MacroState, __RANGE__, null);

    builtins.addAliasDecl("string", Protection.public_,
        new ASTArray(new ASTIdentifier("char", false, __RANGE__), __RANGE__));
    // TODO dedi build type
    builtins.addAliasDecl("true", Protection.public_, new ASTSymbolHelper(new BoolLiteral(true)));
    builtins.addAliasDecl("false", Protection.public_, new ASTSymbolHelper(new BoolLiteral(false)));
    builtins.addAliasDecl("null", Protection.public_, new ASTSymbolHelper(new NullExpr(new NullPointer)));
    builtins.addAliasDecl("__GENERATION__", Protection.public_, new ASTSymbolHelper(new IntLiteral(options.generation)));
    return builtins;
}

(void | :exit, int) buildBinary(
    Options options, WorkPool workPool,
    string mainFile, string execPath, Package[] packages, int loopPass,
) {
    /*print("packages:");
    for (pkg in packages) {
        print("  '" ~ pkg.name ~ "' at " ~ pkg.path ~ ": deps " ~ [join ", " "'" ~ a.name ~ "'" for a in pkg.deps]);
    }*/
    auto builtins = builtinSymbols(options);
    auto defaultImports = [builtins];
    auto compiler = new CompilerImpl(
        defaultImports, packages, options.cFlags, workPool, options.fileIdTable);
    auto settings = new BuildSettings(compiler, options.backend.notNull,
        x86_32=options.x86_32, caching=options.caching, versions=options.allVersions,
        platformFlags=options.platformFlags, optimize=options.optimize, forMacro=false,
        extraCFlags=options.extraCFlags, pool=workPool, loopPass=loopPass);
    auto macroSettings = new BuildSettings(compiler, options.macroBackend.notNull,
        x86_32=options.macro_x86_32, caching=options.caching, versions=options.allMacroVersions,
        platformFlags=options.macroPlatformFlags, optimize=false, forMacro=true,
        extraCFlags = options.macroExtraCFlags, pool=workPool, loopPass=loopPass);
    auto helper = new ParserHelperImpl(macroSettings, compiler.fileIdTable);
    // FIXME break reference loop
    compiler.helper = helper;
    mut CompilationVisitor[] compilationVisitors;
    mut ASTModuleVisitor[] moduleVisitors;

    auto unittestVisitor = new UnittestVisitor;
    if (options.unittest_) {
        compilationVisitors ~= unittestVisitor;
    }

    auto umlVisitor = new UmlVisitor;
    if (options.umlFile != "") {
        compilationVisitors ~= umlVisitor;
    }

    auto docGenVisitor = new DocGenVisitor;
    if (options.docGenFolder != "") {
        moduleVisitors ~= docGenVisitor;
    }

    (:exit, int) printError(Error err) {
        .printError(err, compiler.fileIdTable);
        return (:exit, 1);
    }

    auto astModule = getModule(compiler, mainFile, null, false, helper, __RANGE__)
        .case(Error err: return printError(err));
    BuildResult result = buildAstModule(astModule, settings, moduleVisitors,
        compilationVisitors, compiler.fileIdTable, options,
    )
        .case(Error err: return printError(err));
    mut string fileArgs = [join " " ~ a for a in result.objFiles];
    string[] intermediateFiles = result.intermediateFiles;
    if (options.umlFile != "") {
        umlVisitor.writeTo(options.umlFile);
    }
    if (options.docGenFolder != "") {
        docGenVisitor.writeTo(options.docGenFolder);
    }

    string binHashOutput = ".obj/hash_$(result.hash.text).c";
    with (result.hash) {
        write(binHashOutput,
"long long int compiler_hash_add() { return $(add)LL; }
long long int compiler_hash_mult() { return $(mult)LL; }
"       );
    }
    fileArgs ~= " " ~ binHashOutput;
    mut auto intermediates = result.intermediateFiles;
    intermediates ~= binHashOutput;

    string unittestCode() {
        mut string ret;
        for (symbol in unittestVisitor.symbols) {
            ret ~= "extern void $symbol();\n";
        }
        ret ~= "void _run_unittests() {\n";
        for (symbol in unittestVisitor.symbols) {
            ret ~= "  $symbol();\n";
        }
        ret ~= "}\n";
        return ret;
    }

    auto unittestFile = ".obj/_run_unittests.c";

    unittestFile.write(unittestCode);
    fileArgs ~= " " ~ unittestFile;
    intermediates ~= unittestFile;

    (string | fail :exit, int) mainName() => result.module_.extractFunction("main", settings, __RANGE__)
        .case(Error err: return printError(err))
        .mangle;

    if (options.intermediateListFile != "") {
        options.intermediateListFile.write(mainName? ~ "\n" ~ intermediates.join("\n") ~ "\n");
    }

    if (options.dontLink) {
        compiler.clear;
        if (options.cpr) workPool.report;
        return;
    }

    mut string baseFlags = " -fno-strict-aliasing";
    if (options.optimize) baseFlags ~= " -Ofast";
    if (options.extraCFlags) baseFlags ~= " $(settings.extraCFlags)";

    version (LLVMBackend) {
        if (options.backend.instanceOf(LLVMBackend) && options.optimize)
            baseFlags ~= " -flto";
    }

    // int pid = getpid;
    // neat_runtime_system("cat /proc/" ~ itoa(pid) ~ "/status");
    mut string flags = baseFlags ~ " -rdynamic";
    mut string linkerFlags = " -ldl";
    for (linkerArg in options.linkerArgs) linkerFlags ~= " " ~ linkerArg;
    mut string compilerCmd = "clang-15 -opaque-pointers -Wno-unused-command-line-argument -Wno-unknown-attributes -fpic";
    if (options.backend.instanceOf(CBackend)) compilerCmd = getEnv("CC", "gcc");
    if (options.noMain)
        flags ~= " -DNEAT_NO_MAIN";
    flags ~= " -DMAIN=$(mainName?)";
    string runtime = execPath ~ "/src/runtime.c";
    string cmd = "$compilerCmd$flags$fileArgs $runtime -o $(options.output)$linkerFlags";
    if (settings.platform.platformFlags.verbose) {
        print("\$ $cmd");
    }
    neat_runtime_system(cmd);
    if (!options.fileIdOutput.empty) {
        mut string content;
        // FIXME something goes wrong with the refcounting if I directly access pinnedFileIds.keys here
        auto pinnedFileIds = compiler.fileIdTable.instanceOf(FileIdTableImpl).notNull.pinnedFileIds;
        for (id in pinnedFileIds.keys) {
            auto name = compiler.fileIdTable.toFileName(id);
            content ~= "-file-id-pin $id $name\n";
        }
        options.fileIdOutput.write(content);
    }
    compiler.clear;
    if (options.cpr) workPool.report;
    if (options.run) {
        import package(compiler).std.process : exec;

        auto debugCmd = options.output ~ " " ~ options.runArgs.join(" ");
        if (settings.platform.platformFlags.verbose) {
            print("\$ $debugCmd");
        }
        exec(options.output, options.runArgs);
    }
}

void main(mut string[] args)
{
    mkdir(".obj");
    string executable = args[0];
    args = args[1 .. $];
    string[] allArgs = args;
    string execPath = "/proc/self/exe".realpath.dirname;
    auto options = new Options;
    // TODO make configurable somehow? commandline arg?
    options.parseConfig(execPath ~ "/neat.ini");
    args = options.parseArgs(executable, args);
    options.addDefaults;

    string reqVer = options.requestedCompilerVersion;
    if (reqVer != "" && reqVer != options.runningCompilerVersion) {
        swapCompilerVersion(options, allArgs, reqVer, "on the commandline");
    }

    if (args.length != 1)
    {
        help(executable);
        return;
    }
    auto pool = new ThreadPool(options.threads);
    auto workPool = new WorkPool(pool);
    (void | :exit, int) build(int loopPass)
        => .build(options, workPool=workPool, args=args, allArgs=allArgs, execPath=execPath, loopPass=loopPass);
    if (options.loop) {
        mut int loopPass = 0;
        while (true) {
            build(loopPass=loopPass++);
            if (options.watch) {
                watchForChanges(workPool);
            } else {
                print("Press <return> to continue.");
                getchar;
            }
            workPool.refresh;
        }
    } else {
        build(loopPass=0).case {
            void: return;
            (:exit, int i): exit(i);
        }
    }
}

void watchForChanges(WorkPool workPool) {
    import c.unistd : read, close;

    auto files = [task.instanceOf(ReadFileTask).path for task in workPool.allDependencies("")
        where task.instanceOf(ReadFileTask)];
    print("Change any file to continue.");
    int fd = inotify_init;
    auto watches = [fd.inotify_add_watch(file.toStringz, IN_MODIFY | IN_DELETE_SELF) for file in files];
    auto buf = new ubyte[](8192);
    while (true) {
        long len = read(fd, buf.ptr, buf.length);
        mut int offs = 0;
        while (offs < len) {
            auto event = cast(inotify_event*) &buf[offs];
            auto target = [first file for i, file in files where watches[i] == event.wd];
            print("File '$target' changed, continuing...");
            break;
            // print("event $(event.mask), $(event.len), $(event.wd) for target=$target");
            offs += sizeof(inotify_event) + event.len;
        }
        break;
    }
    [fd.inotify_rm_watch(watch) for watch in watches];
    close(fd);
}

(void | :exit, int) build(
    Options options, WorkPool workPool, string[] args, string[] allArgs, string execPath, int loopPass
) {
    if (args[0] == "build") {
        return buildPackage(options, workPool, allArgs, execPath, loopPass=loopPass);
    } else {
        return buildFile(options, workPool, args[0], execPath=execPath, loopPass=loopPass);
    }
}

(void | :exit, int) buildFile(Options options, WorkPool workPool, string mainFile, string execPath, int loopPass) {
    // Add "." default package for commandline builds
    // This must be first in the list so that commandline can always override it.
    auto packages = options.astPackages.resolvePackages(execPath);
    auto packages = [new Package(name="src", path=realpath("."), packages)] ~ packages;

    if (!options.output.length) options.output = mainFile.basename.withoutExtension;

    return buildBinary(options, workPool, mainFile, execPath=execPath, packages, loopPass=loopPass);
}

(void | :exit, int) buildPackage(Options options, WorkPool workPool, string[] allArgs, string execPath, int loopPass) {
    mut Package[] packages = options.astPackages.resolvePackages(execPath);
    BinaryPackageFile pkgFile() {
        loadPkgFile(".", options.runningCompilerVersion).case {
            PackageFile file:
                if (auto bin = file.instanceOf(BinaryPackageFile))
                    return bin;
                print("Cannot build binary for non-binary package!");
                exit(1);
            ReloadCompiler reload:
                swapCompilerVersion(options, allArgs, reload.requestedVer, "in package.json");
            (:notFound):
                print("package.json not found.");
                exit(1);
        }
    }
    auto pkgFile = pkgFile;
    options.output = pkgFile.binary;
    mut PackageLock packageLock = loadPkgLock(".").case(
        PackageLock f: f,
        (:notFound): new PackageLock([]));
    // default commandline packages
    auto ret = resolvePackageVersions("src", ".", packages, [], packageLock, new VersionProvider,
                                        currentCompiler=options.runningCompilerVersion);
    Package pkg() {
        ret.case {
            (:mismatched): {
                print("Package resolution failed. :-(");
                exit(1);
            }
            ReloadCompiler reload:
                assert(false); // should have been handled earlier
            (Package package_, PackageLock resultLock): {
                packageLock = resultLock;
                return package_;
            }
        }
    }
    auto pkg = pkg;
    writePkgLock(packageLock, ".");

    Package[] allRecursiveDeps() {
        mut Package[string] packages;
        void scan(Package pkg) {
            if (pkg.name == "compiler") return;
            if (packages.has(pkg.name)) return;
            packages[pkg.name] = pkg;
            [scan(a) for a in pkg.deps];
        }
        scan(pkg);
        return packages.values;
    }

    packages ~= allRecursiveDeps;
    // print("Packages: " ~ [join ", " a.repr for a in packages]);
    return buildBinary(options, workPool, pkgFile.main, execPath=execPath, packages, loopPass=loopPass);
}

/**
 * Must be done first to ensure we allow some degree of forward compat.
 * Really, we should be pulling out -compiler-version= separately.
 */
void swapCompilerVersion(Options options, string[] allArgs, string reqVerStr, string where) {
    print("Wrong compiler version, running $(options.runningCompilerVersion) but requested $(
        reqVerStr) $where. Bootstrapping $(reqVerStr)...");
    Version reqVer = Version.parse(reqVerStr);
    string zipName() {
        if (reqVer.lesser("0.1.4")) return "neat-$reqVerStr-gcc.zip";
        return "neat-v$reqVerStr-gcc.zip";
    }
    string url = "https://github.com/Neat-Lang/neat/releases/download/v$reqVerStr/$zipName";
    import package(compiler).std.process : system_iret;
    string targetPath = "$neatCachePath/compilers/v$reqVerStr";
    void system_v(string s) {
        print("\$ " ~ s);
        int ret = system_iret(s);
        if (ret != 0) {
            print("command failed with $ret!");
            // avoid cycle
            if (!s.startsWith("rm -rf")) system_v("rm -rf $targetPath");
            exit(1);
        }
    }
    int system_iret_v(string s) { print("\$ " ~ s); return system_iret(s); }
    string dirName() {
        if (reqVer.lesser("0.1.7")) return "neat";
        return "neat-v$reqVerStr";
    }
    if (!targetPath.exists) {
        system_v("mkdir -p $targetPath");
        system_v("wget -c $url -O $targetPath/$zipName");
        system_v("cd $targetPath && unzip $zipName && cd $dirName && ./build.sh");
    }
    // TODO shell escape
    exit(system_iret_v("$targetPath/$dirName/neat " ~ allArgs.join(" ")));
}

extern(C) int getchar();
