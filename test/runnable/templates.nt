module templates;

macro import std.macro.assert;

import helpers;

class Class(T) : Intf!T {
    override void test() { }
    this() { }
}

interface Intf(T) {
    void test();
}

alias Alias1 = Class!int;
alias Alias2 = Class!int;

alias id(T) = T;

template LinkedList(T) {
    class LinkedList {
        this() { }
        LinkedList next;
        T value;
    }
}

void linkedList() {
    auto ll = new LinkedList!int();
    ll.next = new LinkedList!int();
    ll.value = 5;
    ll.next.value = 6;
}

template init(T) {
    T init() {
        mut uninitialized T t;
        return t;
    }
}

typeof(init!T + init!U) max(T, U)(T a, U b) {
    if (a > b) return a;
    return b;
}

void pair() {
    struct Pair(T) {
        T first, second;
    }
    auto pair = Pair!int(1, 2);
}

void maxTypes() {
    assert(max!(int, int)(2, 3) == 3);
    assert(max!(float, int)(3.5f, 2) == 3.5f);
}

T notNull(T)(nullable T arg) {
    if (auto a = arg) return a;
    assert(false);
}

class Object { this() { } }

void notNullTest() {
    nullable Object foo = new Object;
    Object bar = foo.notNull;
}

class ClassTest {
    this() { }
    void foo(T)(T arg) { }
}

R inferReturnTypeTest(R)(R delegate!() dg) => dg();

void main() {
    (new Alias1).test;
    notNullTest;
    id!int i = 5;
    linkedList;
    maxTypes;
    pair;
    (new ClassTest).foo(5);
    int nested() => 5;
    assert(inferReturnTypeTest(&nested) == 5);
}
