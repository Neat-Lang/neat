module std.json.macro;

macro import std.macro.assert;
macro import std.macro.listcomprehension;
macro import std.macro.quasiquoting;

import package(compiler).neat.base;
import package(compiler).neat.parser;

import std.json;

class JsonSyntax : Macro
{
    this() { }
    override void apply(MacroArgs args) {
        auto args = args.instanceOf(ParseExpressionBaseArgs);
        if (args) {
            args.symbol = this.parse(args.parser, args.lexicalContext);
        }
    }

    (nullable ASTSymbol | Error) parse(Parser parser, LexicalContext lexicalContext)
    {
        auto loc = parser.loc();
        parser.begin;
        if (!parser.acceptIdentifier("JSONValue") || !parser.acceptToken(TokenType.lparen))
        {
            parser.revert;
            return null;
        }
        auto value = parseJSONValueMacro(parser, lexicalContext)?;
        parser.expect(")")?;
        parser.commit;
        return value;
    }
}

// TODO correct ranges
private (ASTSymbol | Error) parseJSONValueMacro(Parser parser, LexicalContext lexicalContext) {
    if (parser.acceptToken(TokenType.doubleQuote)) {
        auto str = parseStringLiteral(parser)?;
        return lexicalContext.compiler.astStringLiteral(str)
            .astJSONValue(lexicalContext.compiler);
    }
    parser.parseJsonNumber?.case {
        (:failure): {}
        int value: return lexicalContext.compiler.astNumberLiteral(value)
            .astJSONValue(lexicalContext.compiler);
    }
    if (parser.acceptIdentifier("true")) {
        return lexicalContext.compiler.astIdentifier("true")
            .astJSONValue(lexicalContext.compiler);
    }
    if (parser.acceptIdentifier("false")) {
        return lexicalContext.compiler.astIdentifier("false")
            .astJSONValue(lexicalContext.compiler);
    }
    if (parser.acceptToken(TokenType.lsquarebracket)) {
        mut ASTSymbol[] entries;
        if (!parser.acceptToken(TokenType.rsquarebracket)) while (true) {
            entries ~= parseJSONValueMacro(parser, lexicalContext)?;
            if (parser.acceptToken(TokenType.rsquarebracket)) break;
            parser.expectToken(TokenType.comma)?;
        }
        with (lexicalContext.compiler) {
            auto literal = astArrayLiteral(entries);
            return literal.astJSONValue(lexicalContext.compiler);
        }
    }
    if (parser.acceptToken(TokenType.lcurlybracket)) {
        mut ASTSymbol[] entries;
        if (!parser.acceptToken(TokenType.rcurlybracket)) while (true) {
            parser.expectToken(TokenType.doubleQuote)?;
            auto key = parseStringLiteral(parser)?;
            parser.expectToken(TokenType.colon)?;
            auto value = parseJSONValueMacro(parser, lexicalContext)?;

            with (lexicalContext.compiler) {
                entries ~= astTupleLiteral([
                    astStringLiteral(key),
                    value,
                ]);
            }

            if (parser.acceptToken(TokenType.rcurlybracket)) break;
            parser.expectToken(TokenType.comma)?;
        }
        with (lexicalContext.compiler) {
            if (entries.empty) {
                // force the literal to have the right type
                auto literal = lexicalContext.compiler.$expr cast((string, JSONValue)[]) null;
                return literal.astJSONValue(lexicalContext.compiler);
            }
            auto literal = astArrayLiteral(entries);
            return literal.astJSONValue(lexicalContext.compiler);
        }
    }
    // Maybe it's a Neat expression?`(Let's do some macro magic.)
    if (auto expr = lexicalContext.compiler.parseExpression(parser, lexicalContext)?) {
        return expr.astJSONValue(lexicalContext.compiler);
    }
    return parser.fail("unexpected input: " ~ parser.remainingText);
}

private ASTSymbol astJSONValue(ASTSymbol symbol, CompilerBase compiler) {
    with (compiler) {
        return astCall(astIdentifier("__jv"), [symbol]);
    }
}

void jsonMacro(MacroState macroState)
{
    macroState.addMacro(new JsonSyntax);
}

macro(jsonMacro);

unittest
{
    int five = 5;
    auto value = JSONValue({"Hello": "World", "five": five, "array": [6], "bool": true});
    assert(value.toString == "{\"Hello\": \"World\", \"five\": 5, \"array\": [6], \"bool\": true}");
}

unittest
{
    assert(JSONValue({}).toString == "{}");
}
