module neat.parser;

import backend.base;
import helpers;
import neat.base;
import neat.lexer;

final class ParserImpl : Parser
{
    int[] stack;

    int current;

    int level;

    string filename;

    int fileId;

    string fulltext;

    Token[] tokens;

    int[] stripTargets;

    this(this.filename, this.fileId, this.fulltext, this.tokens)
    {
        this.stack = new int[](0);
        this.level = 0;
        this.current = 0;
        this.pinned = false;
        this.stripTargets = precomputeStripTargets(this.tokens);
        verify;
    }

    override LocRange loc() {
        auto tuple = tokens[current].((row, col));
        return LocRange(this.fileId, tuple, tuple);
    }

    override LocRange from() {
        strip;
        auto tuple = tokens[current].((row, col));
        return LocRange(this.fileId, tuple, tuple);
    }

    override LocRange to(LocRange from) {
        return LocRange(
            this.fileId,
            from.from,
            tokens[current].((row, col)),
        );
    }

    override (void | fail Error) verifyTransactions(string msg, (void | fail Error) delegate!() dg) {
        auto locEntry = loc;
        auto startLevel = level;
        dg()?;
        locEntry.hardCheck(level == startLevel, "$msg: level $level, startLevel $startLevel");
    }

    override string parseIdentifier() {
        strip;
        if (tokens[current].type == TokenType.identifier) {
            current++;
            return fulltext[tokens[current - 1].pos .. tokens[current].pos];
        }
        return "";
    }

    void verify()
    {
        if (this.level < 0 || this.level > this.stack.length) {
            print("parse stack violation: $(this.level), $(this.stack.length)");
            exit(1);
        }
        if (this.stack.length > 1024) {
            print("parse stack overflow");
            exit(1);
        }
    }

    override string remainingText()
    {
        return this.fulltext[tokens[this.current].pos .. $];
    }

    override bool acceptToken(TokenType type) {
        auto ncurrent = current if type == TokenType.whitespace else stripTargets.ptr[current];
        if (tokens.ptr[ncurrent].type == type) {
            current = ncurrent + 1;
            return true;
        }
        return false;
    }

    override bool acceptToken2(TokenType first, TokenType second) {
        strip;
        if (tokens.ptr[current].type == first && tokens.ptr[current + 1].type == second) {
            current += 2;
            return true;
        }
        return false;
    }

    override bool acceptToken3(TokenType first, TokenType second, TokenType third) {
        strip;
        if (tokens.ptr[current].type == first
            && tokens.ptr[current + 1].type == second
            && tokens.ptr[current + 2].type == third)
        {
            current += 3;
            return true;
        }
        return false;
    }

    override bool acceptToken2Not(TokenType match, TokenType nomatch) {
        strip;
        if (tokens.ptr[current].type == match && tokens.ptr[current + 1].type != nomatch) {
            current ++;
            return true;
        }
        return false;
    }

    override bool acceptToken2Not2(TokenType match, TokenType nomatch1, TokenType nomatch2) {
        strip;
        if (tokens.ptr[current].type == match && tokens.ptr[current + 1].type.(that != nomatch1 && that != nomatch2)) {
            current ++;
            return true;
        }
        return false;
    }

    override (string | :none) acceptTokenStr(TokenType type) {
        if (type != TokenType.whitespace) strip;
        if (tokens.ptr[current].type == type) {
            current++;
            return fulltext.ptr[tokens.ptr[current - 1].pos .. tokens.ptr[current].pos];
        }
        return :none;
    }

    override bool acceptIdentifier(string identifier) {
        auto ncurrent = stripTargets.ptr[current];
        if (tokens.ptr[ncurrent].type == TokenType.identifier
            && fulltext.ptr[tokens.ptr[ncurrent].pos .. tokens.ptr[ncurrent + 1].pos] == identifier)
        {
            current = ncurrent + 1;
            return true;
        }
        return false;
    }

    override (void | Error) expectToken(TokenType type) {
        strip;
        if (tokens.ptr[current].type != type) {
            return fail("$type expected");
        }
        current++;
    }

    override void begin()
    {
        this.verify;
        // TODO why this weird manual doubling?
        if (this.level == this.stack.length)
        {
            int[] newStack = new int[](this.stack.length * 2 + 1);
            for (i, stack in this.stack) newStack[i] = stack;
            this.stack = newStack;
        }
        this.stack[this.level] = this.current;
        this.level += 1;
    }

    override void commit()
    {
        assert(this.level > 0);
        this.level -= 1;
    }

    override void revert()
    {
        this.verify;
        this.level -= 1;
        this.current = this.stack[this.level];
    }

    override bool peekToken(TokenType tokenType)
    {
        return tokens.ptr[current].type == tokenType;
    }

    override void dropToken() {
        if (!hard_eof) current++;
    }

    override bool accept(string match)
    {
        // print("accept '$match' $(text[0 .. 20])");
        mut int pos = current;
        while (tokens[pos].type == TokenType.whitespace || tokens[pos].type == TokenType.comment)
            pos++;
        bottom die(Error err) { print("internal accept() error: $(err.msg)"); exit(1); }
        auto matchTokens = match.tokenize.case(Error err: die(err));
        // ignore end token
        for (i, token in matchTokens[0 .. $ - 1]) {
            if (pos + i >= tokens.length
                || token.type != tokens[pos + i].type
                || match[token.pos .. matchTokens[i + 1].pos] !=
                    fulltext[tokens[pos + i].pos .. tokens[pos + i + 1].pos])
            {
                // print(" $i fail $(cast(int) token.type) $(cast(int) tokens[pos + i].type)");
                return false;
            }
        }
        current = pos + cast(int) matchTokens[0 .. $ - 1].length;
        // print(" succ $(text[0 .. 20])");
        return true;
    }

    // checks that the text is at the hard end of the file,
    // ie. no more text at all.
    override bool hard_eof()
    {
        return tokens.ptr[current].type == TokenType.end;
    }

    // checks that the parser is at the "soft" end of the file,
    // ie. no more meaningful content; only comments and whitespace.
    override bool eof()
    {
        this.begin;
        this.strip;
        if (hard_eof)
        {
            this.commit;
            return true;
        }
        this.revert;
        return false;
    }

    override void strip()
    {
        current = stripTargets.ptr[current];
    }

    // Accept many comments; return the last one.
    override string parseLastComment()
    {
        mut (int | :none) lastComment = :none;
        while (true) {
            while (current < tokens.length && tokens[current].type == TokenType.whitespace) {
                current++;
            }
            if (current < tokens.length && tokens[current].type == TokenType.comment) {
                lastComment = current++;
            }
            else break;
        }
        return lastComment.case(
            :none: null,
            int t: fulltext[tokens[t].pos .. tokens[t + 1].pos]);
    }

    override Error fail(string message)
    {
        this.strip;
        return this.loc.fail(message);
    }

    override (:failure | :success, long, bool withBasePrefix | fail Error) parseNumber() {
        return .parseNumber(this);
    }

    (void | fail Error) assert2s2(int test, string a, string b) {
        if (!test) return this.fail(a ~ b);
        return;
    }
    (void | fail Error) assert2s3(int test, string a, string b, string c) {
        if (!test) return this.fail(a ~ b ~ c);
        return;
    }
    (void | fail Error) assert2s4(int test, string a, string b, string c, string d) {
        if (!test) return this.fail(a ~ b ~ c ~ d);
        return;
    }
    (void | fail Error) assert2s5(int test, string a, string b, string c, string d, string e) {
        if (!test) return this.fail(a ~ b ~ c ~ d ~ e);
        return;
    }
}

bool isWhitespace(char c)
{
    return c == ' ' || c == '\t' || c == '\r' || c == '\n';
}

int utf8Decode(string ch)
{
    assert(ch.length > 0);
    if (ch.length == 1) return ch[0];
    if (ch.length == 2) return cast(int)(ch[0]) & 0x1f << 6 | cast(int)(ch[1]) & 0x3f;
    if (ch.length == 3) return cast(int)(ch[0]) & 0x0f << 12 | cast(int)(ch[1]) & 0x3f << 6 | cast(int)(ch[2]) & 0x3f;
    if (ch.length == 4)
        return cast(int)(ch[0]) & 0x07 << 18 | cast(int)(ch[1]) & 0x3f << 12
             | cast(int)(ch[2]) & 0x3f << 6 | cast(int)(ch[3]) & 0x3f;
    if (ch.length == 5)
        return cast(int)(ch[0]) & 0x03 << 24 | cast(int)(ch[1]) & 0x3f << 18
             | cast(int)(ch[2]) & 0x3f << 12 | cast(int)(ch[3]) & 0x3f << 6 | cast(int)(ch[4]) & 0x3f;
    return cast(int)(ch[0]) & 0x01 << 30 | cast(int)(ch[1]) & 0x3f << 24 | cast(int)(ch[2]) & 0x3f << 18
         | cast(int)(ch[3]) & 0x3f << 12 | cast(int)(ch[4]) & 0x3f << 6 | cast(int)(ch[5]) & 0x3f;
}

int utf8NextLength(string text)
{
    // see https://en.wikipedia.org/wiki/UTF-8#FSS-UTF
    if (text.length < 1) return 0;
    int ch0 = text[0];
    if (ch0 < 128) return 1;
    assert(ch0 >= 192);
    assert(text.length >= 2);
    if (ch0 < 224) return 2;
    assert(text.length >= 3);
    if (ch0 < 240) return 3;
    assert(text.length >= 4);
    if (ch0 < 248) return 4;
    assert(text.length >= 5);
    if (ch0 < 252) return 5;
    assert(text.length >= 6);
    if (ch0 < 254) return 6;
    assert(false);
}

int[] precomputeStripTargets(Token[] tokens)
{
    mut int[] targets = new int[](tokens.length);
    for (i in 0 .. cast(int) tokens.length)
    {
        mut auto current = i;
        while (current < tokens.length && tokens[current].type.(
            that == TokenType.whitespace || that == TokenType.comment)
        )
            current++;
        targets[i] = current;
    }
    return targets;
}

bool startsWith(string haystack, string needle)
{
    if (needle.length == 1) {
        return haystack.length >= 1 && haystack[0] == needle[0];
    } else if (needle.length == 2) {
        return haystack.length >= 2 && haystack[0] == needle[0] && haystack[1] == needle[1];
    } else {
        return haystack.length >= needle.length && haystack[0 .. needle.length] == needle;
    }
}

int find(string haystack, string needle)
{
    if (haystack.length < needle.length) return -1;
    if (needle.length == 1) {
        for (i in 0 .. haystack.length) {
            if (haystack[i] == needle[0]) return cast(int) i;
        }
    } else if (needle.length == 2) {
        for (i in 0 .. haystack.length - 1) {
            if (haystack[i] == needle[0] && haystack[i + 1] == needle[1]) return cast(int) i;
        }
    } else {
        for (i in 0 .. haystack.length - needle.length + 1) {
            if (haystack[i .. i + needle.length] == needle) return cast(int) i;
        }
    }
    return -1;
}

extern(C) void exit(int);

struct Loc {
    int fileId;
    int row, column;

    BackendLocation toBackendLoc(FileIdTable fileIdTable) {
        mut BackendLocation ret;
        ret.file = fileIdTable.toFileName(fileId);
        ret.line = row;
        ret.column = column;
        return ret;
    }

    string location() {
        return "[?$fileId]:" ~ itoa(row + 1) ~ ":" ~ itoa(column + 1);
    }

    Error fail(string message) {
        return new Error([locRange], message);
    }

    LocRange locRange() {
        return LocRange(fileId, (row, column), (row, column));
    }

    (void | fail Error) assert(bool flag, string message) {
        if (!flag) {
            return this.fail(message);
        }
    }

    // This should have been caught earlier.
    void hardCheck(bool flag, string message) {
        if (flag) return;
        print("$(location): Internal compiler error!");
        print(message);
        exit(1);
    }

    (void | fail Error) assert2s2(int test, string a, string b) {
        if (!test) return this.fail(a ~ b);
        return;
    }
    (void | fail Error) assert2s3(int test, string a, string b, string c) {
        if (!test) return this.fail(a ~ b ~ c);
        return;
    }
    (void | fail Error) assert2s4(int test, string a, string b, string c, string d) {
        if (!test) return this.fail(a ~ b ~ c ~ d);
        return;
    }
    (void | fail Error) assert2s5(int test, string a, string b, string c, string d, string e) {
        if (!test) return this.fail(a ~ b ~ c ~ d ~ e);
        return;
    }
}

bool isDigit(int ch) {
    return ch >= cast(int) '0' && ch <= cast(int) '9';
}

(:failure | :success, long, bool withBasePrefix | fail Error) parseNumber(Parser parser)
{
    import package(compiler).std.string : replace;

    parser.begin;
    bool negative = parser.acceptToken(TokenType.minus);
    parser.strip;
    auto number = parser.acceptTokenStr(TokenType.number)
        .case(:none: ({ parser.revert; return :failure; }));
    // we definitely have at least a number.
    parser.commit;
    if (number == "0") {
        // check for 0x..., 0b...
        parser.begin;
        auto ident = parser.acceptTokenStr(TokenType.identifier).case(:none: "");
        if (ident.startsWith("x")) {
            parseHexNumber(ident[1 .. $], negative).case {
                :failure:
                    parser.revert;
                    return (:failure);
                (:success, long value):
                    parser.commit;
                    return (:success, value, withBasePrefix=true);
            }
        }
        if (ident.startsWith("b")) {
            parseBinaryNumber(ident[1 .. $], negative).case {
                :failure:
                    parser.revert;
                    return (:failure);
                (:success, long value):
                    parser.commit;
                    return (:success, value, withBasePrefix=true);
            }
        }
        parser.revert;
    }
    auto number = number.replace("_", "");
    mut long l = atol(number);
    if (negative) l = -l;
    return (:success, l, withBasePrefix=false);
}

(:failure | :success, long value) parseHexNumber(mut string number, bool negative)
{
    if (number.empty || !isHexDigit(number.front))
        return :failure;
    mut long result;
    while (!number.empty && (number.front.isHexDigit || number.front == '_'))
    {
        auto ch = number[0 .. 1];
        mut int digit;
        if (isDigit(ch[0])) digit = atoi(ch);
        else if (ch == "a" || ch == "A") digit = 10;
        else if (ch == "b" || ch == "B") digit = 11;
        else if (ch == "c" || ch == "C") digit = 12;
        else if (ch == "d" || ch == "D") digit = 13;
        else if (ch == "e" || ch == "E") digit = 14;
        else if (ch == "f" || ch == "F") digit = 15;
        else if (ch == "_") {
            number = number[1 .. $];
            continue;
        } else assert(false);
        result = result * 16 + digit;
        number = number[1 .. $];
    }
    if (!number.empty) return :failure;
    if (negative) result = -result;
    return (:success, result);
}

bool isHexDigit(char digit)
{
    if (isDigit(digit)) return true;
    if (digit == 'a' || digit == 'A') return true;
    if (digit == 'b' || digit == 'B') return true;
    if (digit == 'c' || digit == 'C') return true;
    if (digit == 'd' || digit == 'D') return true;
    if (digit == 'e' || digit == 'E') return true;
    if (digit == 'f' || digit == 'F') return true;
    return false;
}

(:failure | :success, long value) parseBinaryNumber(mut string number, bool negative)
{
    bool isBinaryDigit(char ch) {
        return ch == '0' || ch == '1';
    }
    if (number.empty || !isBinaryDigit(number.front)) {
        return :failure;
    }
    mut long result;
    while (!number.empty && (number.front.isBinaryDigit || number.front == '_'))
    {
        auto ch = number[0 .. 1];
        // mut int digit = if (ch == "0") 0; else 1;
        mut int digit;
        if (ch == "0") digit = 0;
        else if (ch == "1") digit = 1;
        else if (ch == "_") {
            number = number[1 .. $];
            continue;
        } else assert(false);
        result = result * 2 + digit;
        number = number[1 .. $];
    }
    if (!number.empty) return :failure;
    if (negative) result = -result;
    return (:success, result);
}

(:failure | :success, float | :success, double | fail Error) parseFloat(Parser parser)
with (parser.transaction)
{
    bool negative = parser.acceptToken(TokenType.minus);
    parser.strip;
    mut string number = parser.acceptTokenStr(TokenType.number)
        .case(:none: return :failure);
    if (!parser.acceptToken(TokenType.dot)) return :failure;
    number ~= ".";
    // 2.foo
    auto cont = parser.acceptTokenStr(TokenType.number)
        .case(:none: return :failure);
    if (parser.hard_eof) return :failure;
    number ~= cont;
    commit;
    mut double d = atof(number);
    if (negative) d = -d;
    if (parser.acceptIdentifier("f")) {
        return (:success, cast(float) d);
    }
    return (:success, d);
}
