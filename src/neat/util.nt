// some stuff that was removed from neat.base
module neat.util;

import neat.base;
import backend.base;
import helpers;
import polyhash;

void assert2s(int test, string msg) { if (!test) { print(msg); exit(1); } }
void assert2s2(int test, string a, string b) { if (!test) { print(a ~ b); exit(1); } }
void assert2s3(int test, string a, string b, string c) { if (!test) { print(a ~ b ~ c); exit(1); } }
void assert2s4(int test, string a, string b, string c, string d) {
    if (!test) { print(a ~ b ~ c ~ d); exit(1); } }
void assert2s5(int test, string a, string b, string c, string d, string e) {
    if (!test) { print(a ~ b ~ c ~ d ~ e); exit(1); } }

class ASTImportStatement : ASTImportStatementBase
{
    (:normal, string name, string pak |
        :macro_, ASTModuleBase module_ |
        :macroTask, ImportModuleBaseTask task) target;

    bool isMacroImport;

    string[] symbols;

    LocRange locRange;

    this(this.target, this.isMacroImport, this.symbols, this.locRange=__CALLER__) { }

    string repr(string pak) {
        this.target.case {
            (:normal, string name, string pak) import_: {
                if (import_.pak.length) return "import package($(import_.pak)).$(import_.name)";
                return "import package($pak).$(import_.name)";
            }
            (:macro_, ASTModuleBase module_): {
                return "macro import package($pak) $(module_.mangledName)";
            }
            (:macroTask, ImportModuleBaseTask task): {
                return "macro import task $(task.id)";
            }
        }
    }
}

/**
 * Delineates a region of control flow in which 'break' and 'continue' may be used.
 */
abstract class LoopScope : Namespace
{
    abstract (Statement | Error) breakFrom(Context context, LocRange locRange);
    abstract (Statement | Error) continueFrom(Context context, LocRange locRange);
    // this class is purely a marker
    override (nullable Symbol | Error) lookup(
        string name, Context context, LookupReason reason, LocRange locRange)
    {
        return this.parent.lookup(name, context, reason, locRange);
    }
}

/**
 * Delineates a region of control flow in which 'breakelse' may be used.
 */
abstract class IfScope : Namespace
{
    abstract (Statement | Error) breakElseFrom(Context context, LocRange locRange);
    // this class is purely a marker
    override (nullable Symbol | Error) lookup(
        string name, Context context, LookupReason reason, LocRange locRange)
    {
        return this.parent.lookup(name, context, reason, locRange);
    }
}

// helper for binding values for stuff like compiler.$stmt
class SymbolAlias : Namespace
{
    string name;

    Symbol value;

    this(this.parent, this.name, this.value) { this.isContextScope = parent.isContextScope; }

    override (nullable Symbol | Error) lookup(
        string name, Context context, LookupReason reason, LocRange locRange)
    {
        if (this.name == name) {
            if (auto latent = this.value.instanceOf(LatentSymbol)) {
                return latent.resolve(context.framePointer, locRange);
            }
            return value;
        }
        if (this.parent) return this.parent.lookup(name, context, reason, locRange);
        return null;
    }

    override string repr() => "SymbolAlias($name)";
}

template findParent(T) {
    nullable T findParent(nullable Namespace namespace) {
        if (auto namespace = namespace) {
            if (auto hit = namespace.instanceOf(T)) return hit;
            if (auto parent = namespace.parent) return findParent(parent);
        }
        return null;
    }
}

abstract class ASTMemberBase : ASTSymbol
{
    ASTSymbol base;

    ASTIdentifierSymbol member;

    this(this.base, this.member, this.locRange=__CALLER__) { }

    (nullable ASTSymbol | Error) checkUfcs(Context context, Symbol base) {
        if (auto base = base.isExpressionImplCall(context, this.locRange)?) {
            auto name = this.member.name(context.warmContext);
            auto member = context.compiler.accessMember(
                context, base, name, this.locRange, allowUndefined=true)?;
            if (!member) {
                // property not found in base, attempt UFCS resolution
                // whether the global is null or not, will decide if UFCS is done.
                if (auto callable = context.namespace.lookup(
                    name, context, LookupReason.ufcs, this.locRange)?)
                {
                    return new ASTSymbolHelper(callable, this.locRange);
                }
            }
        }
        return null;
    }

    override string repr() {
        return "$(this.base.repr).$member";
    }
}

/// Copy the source expression.
(Expression | Error) copy(Expression source, Context context, LocRange locRange) {
    return source.type.copy(context, source, locRange)?;
}

/// Take ownership of the source expression.
(Expression | Error) take(Expression source, Context context, LocRange locRange=__CALLER__) {
    if (source.info.lifetime == Lifetime.gifted || source.info.lifetime == Lifetime.none) {
        return source;
    }
    return source.copy(context, locRange)?;
}

class Void : Type
{
    this() {
        // because it has no size, it needs no initializer.
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) { return platform.void_; }

    override bool same(Type other) { return !!other.instanceOf(Void); }

    override string repr() { return "void"; }

    override string mangle() { return "void"; }

    override void hash(Hash hash) { hash.adds("void"); }
}

class Pointer : Type
{
    Type target;

    this(this.target) {
        // TODO nullable qualifier
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform)
    {
        return new BackendPointerType(this.target.emit(platform), platform);
    }

    override bool same(Type other)
    {
        if (auto otherPtr = other.instanceOf(Pointer))
            return this.target.same(otherPtr.target);
        return false;
    }

    override string repr() { return this.target.repr ~ "*"; }

    override string mangle() { return "ptr_" ~ this.target.mangle; }

    override void hash(Hash hash) { hash.adds("pointer"); target.hash(hash); }
}

class NoopStatement : Statement
{
    this() { }

    override void emit(Generator generator)
    {
    }

    override void hash(Hash hash) { hash.adds("NoopStatement"); }
}

(Expression | Error) beExpression(Symbol symbol, LocRange locRange=__CALLER__)
{
    if (auto symbolIdent = symbol.instanceOf(SymbolIdentifier))
        return symbolIdent.asExpression;
    if (auto expr = symbol.instanceOf(Expression))
        return expr;
    return locRange.fail("expression expected");
}

(Type | Error) beType(Symbol symbol, LocRange locRange=__CALLER__)
{
    if (auto type = symbol.instanceOf(Type))
        return type;
    if (auto symbolIdent = symbol.instanceOf(SymbolIdentifier))
        return symbolIdent.asType;
    return locRange.fail("type expected");
}

class PointerCast : Expression
{
    Type target;

    Expression value;

    this(this.target, this.value) {
        this.type = this.target;
        assert(!!target);
        assert(!!value);
        this.info = this.value.info;
    }

    override int emit(Generator output)
    {
        int reg = this.value.emit(output);
        return output.fun.bitcast(reg, this.target.emit(output.platform));
    }

    override void hash(Hash hash) { hash.adds("ptrcast"); target.hash(hash); value.hash(hash); }

    override string repr() { return "cast($(target.repr)) $(value.repr)"; }
}

/**
 * `nullptr_t` is the unique type of the 'null' expression.
 * It implicitly converts to everything nullable.
 */
class NullPointer : Type
{
    this() {
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) {
        // nullptr_t only has one valid value (null, figures)
        return new BackendVoidType;
    }

    override bool same(Type other) {
        return !!other.instanceOf(NullPointer);
    }

    override (nullable Expression | Error) implicitConvertTo(
        Context context, Expression source, Type target, LocRange locRange)
    {
        if (target.instanceOf(Pointer))
            return new NullExpr(target);
        return null;
    }

    override (nullable Expression | Error) binaryOp(
        Context context, string op, Expression left, Expression right, LocRange locRange)
    {
        if (op == "==" && right.type.instanceOf(NullPointer)) {
            return context.compiler.boolLiteral(true);
        }
        return null;
    }

    override string repr() { return "nullptr_t"; }
    override string mangle() { return "nullptr_t"; }
    override void hash(Hash hash) { hash.adds("nullptr_t"); }
}

// TODO this seems all kind of ad-hoc and redundant
class NullExpr : Expression
{
    this(this.type) { this.info = ExprInfo(Lifetime.permanent); }

    override int emit(Generator generator)
    {
        if (this.type.instanceOf(NullPointer)) return generator.fun.voidLiteral;
        return generator.fun.zeroLiteral(this.type.emit(generator.platform));
    }
    override void hash(Hash hash) { hash.adds("NullExpr"); type.hash(hash); }
    override string repr() { return "null"; }
}

class VoidExpression : Expression
{
    this() { this.type = new Void; this.info = ExprInfo(Lifetime.permanent); }
    override int emit(Generator generator)
    {
        return generator.fun.voidLiteral;
    }
    override void hash(Hash hash) { hash.adds("VoidExpression"); }
    override string repr() return "void";
}

/**
 * `SymbolIdentifier` is the core of the :name symbol type impl.
 * Because :foo a = :foo; and we can't double inherit,
 * `SymbolIdentifier` has special handling in `beType` and `beExpression`.
 */
final class SymbolIdentifier : Symbol
{
    string name;
    nullable SymbolIdentifierType asType_;
    nullable SymbolIdentifierExpression asExpression_;
    this(this.name) { }
    Type asType() {
        if (auto ret = this.asType_) return this.asType_;
        auto ret = new SymbolIdentifierType(this.name);
        this.asType_ = ret;
        return ret;
    }
    Expression asExpression() {
        if (auto ret = this.asExpression_) return this.asExpression_;
        auto ret = new SymbolIdentifierExpression(this.name);
        this.asExpression_ = ret;
        return ret;
    }
    override string repr() return ":$name";
    override bool mayCallImplicit() => false;
}

class SymbolIdentifierType : Type, Hashable
{
    string name;
    this(this.name) { }
    override BackendType emit(Platform platform) { return new BackendVoidType; }
    override bool same(Type type) {
        if (auto other = type.instanceOf(SymbolIdentifierType))
            return other.name == this.name;
        return false;
    }
    override string repr() { return ":" ~ this.name; }
    override string mangle() { return "symbol_" ~ name; }
    override void hash(Hash hash) { hash.adds("SymbolType"); hash.adds(name); }
    override (nullable Expression | Error) binaryOp(
        Context context, string op, Expression lhs, Expression rhs, LocRange locRange)
    {
        if (op == "==" && rhs.type.same(lhs.type)) {
            return context.compiler.boolLiteral(true);
        }
        return null;
    }
    override (ASTSymbol | Error) hash(CompilerBase compiler, ASTSymbol value)
    {
        return compiler.astNumberLiteral(0);
    }
}

class SymbolIdentifierExpression : Expression
{
    string name;
    this(this.name) { this.type = new SymbolIdentifierType(name); this.info = ExprInfo(Lifetime.permanent); }
    override int emit(Generator output) { return output.fun.voidLiteral; }
    override void hash(Hash hash) { hash.adds("SymbolExpr"); hash.adds(name); }
    override string repr() return ":$name";
}

// this(this.name)
struct ASTThisAssignment
{
    string name;
    nullable ASTSymbol defaultValue;
    LocRange locRange;
}

/**
 * A value being passed to a callable parameter.
 */
struct Argument
{
    Expression value;

    string name;
}

(Expression | Error) expectImplicitConvertTo(Context context, Expression from, Type to, LocRange locRange)
{
    locRange.assert(!!to, () => "no implconv target type")?;
    if (auto result = context.compiler.implicitConvertTo(context, from, to, locRange)?) return result;
    context.assert2(false, locRange, "Cannot convert to $(to.repr): $(from.type.repr)")?;
}

(Expression | Error) expectImplicitConvertTo(Expression from, Type to, Context context, LocRange locRange)
{
    locRange.assert(!!to, () => "no implconv target type")?;
    if (auto result = context.compiler.implicitConvertTo(context, from, to, locRange)?) return result;
    context.assert2(false, locRange, "Cannot convert to $(to.repr): $(from.type.repr)")?;
}

(nullable Expression | Error) isExpressionImplCall(Symbol symbol, Context context, LocRange locRange)
{
    if (auto symbolIdent = symbol.instanceOf(SymbolIdentifier))
        return new SymbolIdentifierExpression(symbolIdent.name);

    if (symbol.mayCallImplicit) {
        // generate implicit function call
        auto astSymbol = new ASTSymbolHelper(symbol);
        if (auto expr = context.compiler.call(context, astSymbol, [], locRange, true)?)
            return expr;
    }

    return symbol.instanceOf(Expression);
}

(Expression | Error) beExpressionImplCall(Symbol symbol, Context context, LocRange locRange)
{
    if (auto expr = symbol.isExpressionImplCall(context, locRange)?)
        return expr;
    return locRange.fail("expression expected");
}

ColdContext makeColdContext(
    CompilerBase compiler, Platform platform, MacroState macroState,
    int loopPass, ModulePreProcessor modulePreProcessor, ModulePostProcessor modulePostProcessor)
{
    return new ColdContext(compiler, platform, macroState, compiler.nativeWordType(platform),
        loopPass, modulePreProcessor, modulePostProcessor);
}

WarmContext makeWarmContext(
    CompilerBase compiler, nullable Expression framePointer, nullable ModuleBase compilingModule)
{
    return new WarmContext(framePointer, compilingModule, new LabelCounter, compiler.uniqCounter, null, null);
}

// Glue between ASTDeclaration and ASTStatement.
class ASTDeclarationStatement : ASTStatement
{
    ASTDeclaration decl;

    this(this.decl) { }

    override (StatementCompileResult | Error) compile(Context context) {
        return this.decl.compile(context).case(
            Namespace ns: StatementCompileResult(new NoopStatement, ns),
            Error err: err);
    }
}

class ASTIdentifier : ASTIdentifierSymbol
{
    string name_;

    bool moduleLevel; // .name_

    this(this.name_, this.moduleLevel, this.locRange=__CALLER__) {}

    override (Symbol | Error) compile(Context context)
    {
        return context.compiler.identifier(context, name_, moduleLevel, locRange);
    }

    override string name(WarmContext) => name_;

    override string repr() {
        if (this.moduleLevel)
            return ".$(name_)";
        return name_;
    }
}

bool reserved(ASTIdentifierSymbol symbol) {
    ASTIdentifier ident = symbol.instanceOf(ASTIdentifier).case(null: return false);
    // `typeof` to avoid 'mut typeof(expr)' from matching as a function
    // `for` to avoid `macro for()` from matching as a function
    // TODO make this configurable by macros
    return ident.name_ == "else" || ident.name_ == "for" || ident.name_ == "typeof";
}

// :name
class ASTSymbolIdentifier : ASTSymbol
{
    string name;

    this(this.name, super) { }

    override (SymbolIdentifier | Error) compile(Context context) {
        return new SymbolIdentifier(this.name);
    }

    override string repr() { return ":$name"; }
}

(nullable Expression | Error) simpleCall(
    Context context, Symbol sym, Expression[] args, LocRange locRange)
{
    mut ASTArgument[] astArgs;
    for (arg in args)
        astArgs ~= ASTArgument(new ASTSymbolHelper(arg), "", locRange);
    return context.compiler.call(context, new ASTSymbolHelper(sym), astArgs, locRange, false);
}

/**
 * A symbol that depends on some sort of expression:
 *
 * - class method (this)
 * - struct method (this)
 * - nested function (stackframe)
 *
 * The symbol is being used in some way, such as a function call. To facilitate this,
 * call resolve() at the callsite. This returns a raw function pointer and some setup/teardown
 * code. Call setup, pass firstArg as the first parameter to the pointer, and call teardown.
 */
abstract class LateSymbol : Symbol
{
    // whether &symbol delegate should count references. If not, the delegate
    // cannot be copied by the refcounter and is hence typed `void delegate!()`.
    bool refcounted;

    abstract LateSymbolResult resolve(Context context);

    override bool mayCallImplicit() => true;
}

struct LateSymbolResult
{
    nullable Statement setup;
    Expression funcPtr;
    Expression firstArg;
    nullable Statement teardown;
}

/**
 * A symbol that may be interested in a frame pointer to complete it.
 * When looked up, should be glued together with the frame pointer of the lookup.
 * Usually, LatentSymbol -> LateSymbol, but this whole flow needs reconsideration.
 */
abstract class LatentSymbol : Symbol
{
    abstract (Symbol | Error) resolve(nullable Expression framePointer, LocRange locRange);
}

// here so we can destructure on it later
abstract class FunctionReferenceBase : Expression
{
    abstract FunctionDeclarationBase getFunction();
}

// here so we can destructure on it later
abstract class StringLiteralBase : Expression
{
    string text;

    this(this.text) { }

    // TODO: escaping
    override string repr() { return "\"$(this.text)\""; }
}

// Helper for quasiquoted AST blocks that need to reference back to an already resolved symbol.
class ASTSymbolHelper : ASTSymbol
{
    Symbol symbol;

    this(this.symbol, this.locRange = __RANGE__) { }

    override (Symbol | Error) compile(Context context) { return this.symbol; }

    override string repr() { return symbol.repr; }
}

abstract class CompilationVisitor
{
    abstract void visit(FinishedSymbol sym);
}

abstract class ASTModuleVisitor
{
    abstract void visit(ASTModuleBase mod);
}

/**
 * Symbol that is currently being compiled
 */
abstract class PendingSymbol : Symbol
{
    abstract (Symbol | Error) resolve();
    // Allow hashing the pending without resolving and potentially triggering a hash loop.
    abstract void hash(Hash hash);
}

class FunctionDeclaration : FunctionDeclarationBase
{
    this(this.name, this.retWIP, this.params)
    {
        this.contextType = null;
    }

    size_t numArgs()
    {
        mut size_t ret = this.params.length;
        if (!!contextType) ret += 1;
        return ret;
    }

    override string mangle() { return this.name; } // TODO extern

    override void declare(Generator generator)
    {
        if (generator.mod.declared(this.mangle))
            return;

        Type voidp = new Pointer(new Void);
        mut int extra = 0;
        if (this.contextType) extra = 1;

        auto paramTypes = new BackendType mut[](numArgs);
        if (this.contextType) paramTypes[0] = voidp.emit(generator.platform);
        for (i, param in this.params)
            paramTypes[extra + i] = param.type.emit(generator.platform);

        generator.mod.declare(
            this.mangle,
            this.ret.emit(generator.platform),
            paramTypes.freeze,
            variadic=this.variadic
        );
    }

    override string repr()
    {
        return this.name;
    }
}

(Expression left, Expression right | Error) mergePair(
    Context context, mut Expression left, mut Expression right, LocRange locRange)
{
    if (left.type.same(right.type)) return (left, right);
    // try to merge types
    if (auto converted = context.compiler.implicitConvertTo(context, right, left.type, locRange)?) {
        right = converted;
    }
    if (auto converted = context.compiler.implicitConvertTo(context, left, right.type, locRange)?) {
        left = converted;
    }
    if (!left.type.same(right.type))
        return context.fail(locRange, "cannot convert $(right.type.repr) to $(left.type.repr)");
    return (left, right);
}

class OverrideLifetimeExpr : Expression
{
    Expression value;
    this(this.value, this.info) {
        this.type = value.type;
    }
    override int emit(Generator output) { return value.emit(output); }
    override void hash(Hash hash) {
        hash.adds("OverrideLifetimeExpr");
        hash.adds(infoStr);
        value.hash(hash);
    }
    string infoStr() {
        if (info.lifetime == Lifetime.gifted) return "gifted";
        else if (info.lifetime == Lifetime.ephemeral) return "ephemeral";
        else if (info.lifetime == Lifetime.lexical) return "lexical";
        else if (info.lifetime == Lifetime.permanent) return "permanent";
        else if (info.lifetime == Lifetime.none) return "none";
        else assert(false);
    }
    override string repr() return "cast($infoStr) $(value.repr)";
}

class ExternCVariable : Expression
{
    string name;

    bool threadlocal;

    this(this.type, this.name, this.threadlocal) { this.info = ExprInfo(Lifetime.permanent); }

    override int emit(Generator output) {
        auto backendType = this.type.emit(output.platform);
        return output.fun.load(
            backendType,
            output.fun.globalVar(this.name, backendType, define=false, threadlocal=threadlocal));
    }
    override void hash(Hash hash) {
        hash.adds("ExternCVariable");
        this.type.hash(hash);
        hash.adds(this.name);
    }
    override string repr() return "extern(C) $(this.type.repr) $name;";
}

class TypeMerger
{
    Expression mut[] samples;

    // if this is set, we at least got one expression that was bottom
    // so if we get nothing else, we return that.
    nullable Type gotBottom;

    this() { }

    (void | Error) add(Expression value, LocRange locRange, Context context) {
        import neat.bottom : Bottom;

        if (value.type.instanceOf(Bottom)) {
            // If there's only bottom, TypeMerger should yield bottom.
            gotBottom = value.type;
            return;
        }
        for (i, sample in samples) {
            if (sample.type.same(value.type)) return;
            if (tryMergeSingle(i, value, locRange, context)? == :merged)
                return;
        }
        samples ~= value;
    }

    nullable Type type(Context context) {
        if (samples.empty) return gotBottom;
        if (samples.length == 1) return samples[0].type;
        mut (bool fail, Type)[] members;
        for (sample in samples) members ~= (false, sample.type);
        return context.compiler.eitherType(members);
    }

    (:merged | :add | Error) tryMergeSingle(size_t index, Expression value, LocRange locRange,
        Context context)
    {
        auto sample = samples[index];
        auto left = context.compiler.implicitConvertTo(context, value, sample.type, locRange)?;
        auto right = context.compiler.implicitConvertTo(context, sample, value.type, locRange)?;
        if (!left && !right) {
            return :add;
        } else if (left && right && !left.type.same(right.type)) {
            return :add;
        }
        if (auto left = left) samples[index] = left;
        else if (auto right = right) samples[index] = right;
        return :merged;
    }
}

/// See `Type.quarantinePolicy` for behavior
(void | Error) checkAssignmentQuarantine(Context context, LocRange locRange, Type baseType, Type valueType)
{
    auto valuePolicy = valueType.quarantinePolicy;
    if (valuePolicy.value == :harmless) return;

    auto basePolicy = baseType.quarantinePolicy;
    if (basePolicy.container == :transparent) return;

    context.assert2(false, locRange, "Cannot assign quarantined type to occluded container field.")?;
}
