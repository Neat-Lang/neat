module c.windows;

alias HANDLE = void*;
alias WORD = short;
alias DWORD = int;
alias LONG = int;

extern(C) int CloseHandle(HANDLE hObject);

extern(C) HANDLE CreateMutexA(void*, bool owned, char* name);

alias CreateMutex = CreateMutexA;

struct CRITICAL_SECTION {
    // Copied from the Wine headers.
    // I'm assuming they're right about the size at least.
    void* DebugInfo;
    int LockCount;
    int RecursionCount;
    void* OwningThread;
    void* LockSemaphore;
    size_t SpinCount;
}

extern(C) void InitializeCriticalSection(CRITICAL_SECTION*);
extern(C) void DeleteCriticalSection(CRITICAL_SECTION*);
extern(C) void EnterCriticalSection(CRITICAL_SECTION*);
extern(C) void LeaveCriticalSection(CRITICAL_SECTION*);

extern(C) HANDLE CreateSemaphoreA(void* lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount,
    char* name);
extern(C) int ReleaseSemaphore(HANDLE semaphore, LONG lReleaseCount, int* lpPreviousCount);
extern(C) int WaitForSingleObject(HANDLE semaphore, DWORD milliseconds);

alias INFINITE = -1;

alias CreateSemaphore = CreateSemaphoreA;

extern(C) HANDLE CreateThread(void* lpThreadAttributes, DWORD dwStackSize,
    void function(void*) lpStartAddress, void* lpParameter, DWORD dwCreationFlags, LONG* lpThreadId);

extern(C) DWORD TlsAlloc();
extern(C) void* TlsGetValue(DWORD dwTlsIndex);
extern(C) int TlsSetValue(DWORD dwTlsIndex, void* lpTlsValue);

alias TLS_OUT_OF_INDEXES = -1;

struct STARTUPINFOA {
    DWORD cb;
    char* lpReserved;
    char* lpDesktop;
    char* lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    ubyte* lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
}

struct PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
}

extern(C) bool CreateProcessA(char* lpApplicationName, char* lpCommandLine, void* lpProcessAttributes,
    void* lpThreadAttributes, bool bInheritHandles, DWORD dwCreationFlags, void* lpEnvironment,
    char* lpCurrentDirectory, STARTUPINFOA* lpStartupInfo, PROCESS_INFORMATION* lpProcessInformation);

alias CreateProcess = CreateProcessA;
alias STARTUPINFO = STARTUPINFOA;

extern(C) DWORD GetFileAttributesA(char* filename);

alias GetFileAttributes = GetFileAttributesA;
alias INVALID_FILE_ATTRIBUTES = -1;
