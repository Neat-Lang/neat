module day4;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.math;
import std.stdio;
import std.string;

void main()
{
    auto parseRange = range => range.split("-").((from=that[0].atoi, to=that[1].atoi));
    auto assignments = stdin.byLine
        .filter(a => !a.empty)
        .map(line => line.split(",").((first=that[0].parseRange, second=that[1].parseRange)))
        .array;
    auto overlap = (a, b) => (from=max(a.from, b.from), to=(min(a.to, b.to)));

    auto fullyContained = (a, b) => a.overlap(b).(that == a || that == b);
    auto result1 = [count a in assignments where fullyContained(a.first, a.second)];
    print("Assignments pairs where one range fully contains the other: $result1");

    auto overlapAtAll = (a, b) => a.overlap(b).(that.from <= that.to);
    auto result2 = [count a in assignments where overlapAtAll(a.first, a.second)];
    print("Assignments pairs where the ranges overlap at all: $result2");
}
