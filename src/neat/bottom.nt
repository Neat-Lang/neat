module neat.bottom;

import backend.base;
import neat.base;
import neat.hash;

/*
 * bottom type
 * ===========
 * Bottom : Type, represented by 'bottom'.
 * Unreachable : Expression, represented by 'unreachable'.
 * Bottom implicitly converts to Unreachable expressions in every type.
 * In the backend, `bottom` has a size of 0 and may be represented by `unreachable` or `undef`.
 */

class Bottom : Type
{
    this() {
        this.zeroInitializable = true;
        this.hasElaborateCopyConstructor = false;
    }
    override BackendType emit(Platform platform) {
        return new BackendVoidType;
    }
    override bool same(Type type) {
        return !!type.instanceOf(Bottom);
    }
    override string repr() { return "bottom"; }
    override string mangle() { return "bottom"; }
    override void hash(Hash hash) {
        hash.adds("bottom");
    }
    override nullable Expression implicitConvertTo(Context context, Expression source, Type target) {
        return new UnreachableExpr(target, source);
    }
}

class UnreachableExpr : Expression
{
    nullable Expression source;
    this(this.type=new Bottom, this.source=null) { this.info = ExprInfo(Lifetime.none); }
    override int emit(Generator output) {
        if (source) source.emit(output);
        output.fun.unreachable;
        output.fun.setLabel(output.fun.getLabel ~ "_unreachable");
        return output.fun.zeroLiteral(this.type.emit(output.platform));
    }
    override string repr() {
        return "unreachable";
    }
    override void hash(Hash hash) {
        this.type.hash(hash);
        hash.adds("unreachable");
    }

}
