module neat.runtime.stdlib;

extern(C) int printf(char* format, ...);
extern(C) int fprintf(void* handle, char* format, ...);
extern(C) int fputs(char *str, void* handle);
extern(C) int snprintf(char* str, size_t size, char* format, ...);
extern(C) int fflush(void* handle);
version (mingw) {
    extern(C) void* __acrt_iob_func(int);
    alias stdin = __acrt_iob_func(0);
    alias stdout = __acrt_iob_func(1);
    alias stderr = __acrt_iob_func(2);
} else {
    extern(C) void* stdin;
    extern(C) void* stdout;
    extern(C) void* stderr;
}
extern(C) void exit(int);
extern(C) int atoi(char*);
extern(C) long atoll(char*);
extern(C) double atof(char*);
extern(C) void* malloc(size_t);
extern(C) void free(void*);
extern(C) void* memcpy(void* dest, void* src, size_t n);
extern(C) int memcmp(void* s1, void* s2, size_t n);
extern(C) void* memset(void* s, int c, size_t n);
extern(C) void neat_runtime_lock_stdout();
extern(C) void neat_runtime_unlock_stdout();
