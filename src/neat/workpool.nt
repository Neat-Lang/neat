module neat.workpool;

macro import package(compiler).std.macro.listcomprehension;

import neat.base;
import neat.runtime : assert, die;
import package(compiler).std.thread;
import package(compiler).std.time;

/*
 * Threadpool for pure tasks identified by a string.
 * Any task is started at most once.
 */
class WorkPool : WorkPoolBase
{
    mut TaskEntry[string] tasks;

    Mutex mutex;

    ThreadPool pool;

    Stopwatch total;

    ThreadLocal!string currentTaskId;

    this(this.pool) {
        this.mutex = new Mutex;
        this.currentTaskId = new ThreadLocal!string;

        // For comparison with CPA.
        this.total = new Stopwatch;

        reset;
    }

    void reset() {
        this.total.reset;
        this.total.start;
        // Represents the "main" thread.
        auto main = new TaskEntry("", new FailITask, currentTaskId, this);
        this.tasks[""] = main;
        main.slice.start;
    }

    void report() {
        auto main = this.tasks[""];
        main.slice.stop;
        this.total.stop;
        mut TaskSlice[] criticalPath;
        mut nullable TaskSlice currentSlice = main.slice;
        while (currentSlice) {
            if (auto a = currentSlice) criticalPath ~= a;
            currentSlice = currentSlice.criticalPathParent;
        }
        auto results = criticalPath.retro.combineSlices;
        print("Critical Path Report:");
        mut float cpSum = 0;
        for (i, result in results) {
            print("#$(i): $(result.repr)");
            cpSum += result.seconds;
        }
        print("Sum: $cpSum (actual time: $(this.total.seconds))");
    }

    private TaskEntry currentTask() {
        auto id = this.currentTaskId.get;
        return tasks[id];
    }

    ITask[] allDependencies(string rootId)
    {
        mut ITask[] res = null;
        mut bool[string] seen;
        void recurse(string name) {
            if (!this.tasks.has(name) || seen.has(name)) {
                return;
            }
            seen[name] = true;
            // FIXME refcounting bug when calling .keys on gifted rvalue
            auto v = this.tasks[name].dependencies;
            string[] keys = v.keys;
            [recurse(key) for key in keys];
            res ~= this.tasks[name].task;
        }
        recurse(rootId);
        return res;
    }

    /**
     * Kick out tasks that are no longer fresh.
     * Kick out all tasks that waited on them, recursively.
     */
    public void refresh() {
        mut bool removedAny = false;
        void removeId(string id) {
            if (!this.tasks.has(id)) return;
            auto task = this.tasks[id];
            // print("workpool: remove $id");
            this.tasks.remove(id);
            removedAny = true;
            for (subtask in task.dependents.keys)
                removeId(subtask);
        }
        string[] keys = this.tasks.keys;
        for (key in keys) if (this.tasks.has(key)) {
            if (!this.tasks[key].fresh)
                removeId(key);
        }
        if (removedAny) {
            // any removal must have kicked out the main task, so reinit it.
            assert(![any key == "" for key in this.tasks.keys]);
            reset;
        }
    }

    // Start task running if it isn't running yet.
    override void queue(ITask task) {
        auto id = task.id;
        mut uninitialized TaskEntry entry;
        with (mutex.locked) {
            if (tasks.has(id)) {
                return;
            }
            entry = new TaskEntry(id, task, currentTaskId, this);
            tasks[id] = entry;
            auto ct = currentTask;
            auto oldSlice = ct.splitSlice;
            entry.slice.criticalPathParent = oldSlice;
        }
        pool.addTask(entry);
    }

    // if `provider` is not fresh, `consumer` is not fresh.
    override void dependency((string | :current) provider, (string | :current) consumer) {
        with (mutex.locked) {
            auto ct = currentTask;
            auto provider = provider.case(:current: ct.id);
            auto consumer = consumer.case(:current: ct.id);
            // print("'$consumer' depends on '$provider'");
            // main can't be provider. what would that mean?
            assert(provider != "");
            auto providerTask = tasks[provider];
            providerTask.dependents[consumer] = true;
            auto consumerTask = tasks[consumer];
            consumerTask.dependencies[provider] = true;
        }
    }

    override void addBomItem(string id, string value) {
        currentTask.addBomItem(id, value);
    }

    override string[string] bom(string rootId) {
        mut string[string] result;
        mut bool[string] seen;
        void recurse(string name) {
            if (!this.tasks.has(name) || seen.has(name)) {
                return;
            }
            seen[name] = true;
            // FIXME refcounting bug when calling .keys on gifted rvalue
            auto v = this.tasks[name].dependencies;
            string[] keys = v.keys;
            [recurse(key) for key in keys];
            auto bom = this.tasks[name].bom();
            for (key in bom.keys) {
                result[key] = bom[key];
            }
        }
        recurse(rootId);
        return result;
    }

    override ITask wait(string id) {
        mut uninitialized TaskEntry taskEntry;
        mut bool preempted;
        with (mutex.locked) {
            assert(tasks.has(id));
            taskEntry = tasks[id];
            preempted = taskEntry.tryPreempt;
        }
        mut bool waited;
        if (preempted) {
            // The pool didn't get around to even starting the task yet.
            // So we run it ourselves.
            taskEntry.runDirectly;
            waited = true;
        } else {
            waited = taskEntry.wait_;
        }
        with (mutex.locked) {
            if (waited) {
                assert(taskEntry.slice.time.stopped);
                currentTask.splitSlice;
                currentTask.slice.criticalPathParent = taskEntry.slice;
            }
        }
        return taskEntry.task;
    }
}

struct Result
{
    string id;
    int indexFrom, indexTo;
    float seconds;

    string repr() {
        mut string id = this.id;
        if (id.empty) id = "main";
        if (indexFrom == indexTo) return "$(seconds) $id[$indexFrom]";
        return "$(seconds) $id[$indexFrom-$indexTo]";
    }
}

Result[] combineSlices(TaskSlice[] slices) {
    mut Result mut[] result;
    for (slice in slices) {
        if (!result.empty && result[$ - 1].id == slice.id) {
            result[$ - 1].indexTo = slice.index;
            result[$ - 1].seconds += slice.time.seconds;
        } else {
            result ~= Result(slice.id, slice.index, slice.index, slice.time.seconds);
        }
    }
    return result.freeze;
}

TaskSlice[] retro(TaskSlice[] array) {
    return [array[$ - i - 1] for i, _ in array];
}

/**
 * Represents a slice of time that a task was active.
 * Forms the core of the Critical Path Analysis logic.
 */
private class TaskSlice
{
    string id;

    int index;

    mut Stopwatch time;

    mut nullable TaskSlice criticalPathParent;

    this(this.id, this.index, this.time) { }

    void start() this.time.start;
    void stop() this.time.stop;
    void reset() this.time.reset;
}

private class TaskEntry : Task
{
    string id;

    ITask task;

    mut (:pending | :running | :preempted | :done) state;

    Mutex mutex;

    CondVar condvar;

    ThreadLocal!string currentTaskId;

    WorkPoolBase workPool;

    mut TaskSlice slice;

    mut string[string] bomItems;

    // tasks that depend on us
    mut bool[string] dependencies;

    // tasks that we depend on
    mut bool[string] dependents;

    this(this.id, this.task, this.currentTaskId, this.workPool) {
        this.mutex = new Mutex;
        this.condvar = new CondVar(this.mutex);
        this.state = :pending;
        this.slice = new TaskSlice(this.id, 0, new Stopwatch);
    }

    /**
     * Returns true if the task was "preempted": that is, the task has not
     * run yet, has not even started, and now it will never start.
     */
    bool tryPreempt() {
        with (mutex.locked) {
            if (state == :pending) {
                state = :preempted;
                return true;
            }
        }
        return false;
    }

    bool fresh() => this.task.fresh;

    void addBomItem(string id, string value) {
        this.bomItems[id] = value;
    }

    string[string] bom() => bomItems;

    TaskSlice splitSlice() {
        auto oldSlice = this.slice;
        this.slice = new TaskSlice(this.id, oldSlice.index + 1, oldSlice.time);
        this.slice.criticalPathParent = oldSlice;
        oldSlice.time = slice.time.split;
        return oldSlice;
    }

    override void run() {
        with (mutex.locked) {
            if (state == :preempted || state == :done) return;
            assert(state == :pending);
            state = :running;
        }
        runDirectly();
    }

    void runDirectly() {
        this.slice.start;
        auto prevTask = currentTaskId.get;
        currentTaskId.set(id);
        task.run(workPool);
        currentTaskId.set(prevTask);
        this.slice.stop;
        with (mutex.locked) {
            state = :done;
            condvar.broadcast;
        }
    }

    bool wait_() {
        with (mutex.locked) {
            if (this.state == :done) return false;
            while (this.state != :done) this.condvar.wait;
            return true;
        }
    }
}

class ReadFileTask : ITask
{
    string path;

    mut string text;

    mut (string | :none) newText;

    this(this.path) {
        this.newText = :none;
    }

    override string id() => path;

    override bool fresh() {
        import package(compiler).helpers : read;

        this.newText = read(path);
        // FIXME: text == newText
        return this.text == this.newText.case(:none: die);
    }

    override void run(WorkPoolBase workPool) {
        import package(compiler).helpers : read;
        import package(compiler).std.sha256 : Sha256;
        import package(compiler).std.string : toHexString;

        // TODO: if (string newText <- this.newText)
        if (this.newText != :none) {
            this.text = this.newText.case(:none: die);
            this.newText = :none;
        } else {
            this.text = read(path);
        }
        auto digest = new Sha256;
        digest.update(cast(ubyte[]) this.text);
        auto hash = digest.finalize.toHexString;
        workPool.addBomItem(path, hash);
    }
}

class FailITask : ITask
{
    this() { }
    override void run(WorkPoolBase workPool) assert(false);
    override string id() => "";
    override bool fresh() => true;
}
