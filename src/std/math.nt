module std.math;

macro import std.macro.assert;

alias pi = 3.1415926538;
alias PI = pi;
alias Ï€ = pi;

pragma(lib, "m");

extern(C) float sinf(float);
extern(C) double sin(double d);
/// Returns the sine of the parameter in radians.
float sin(float f) { return sinf(f); }

extern(C) float cosf(float);
extern(C) double cos(double);
/// Returns the cosine of the parameter in radians.
float cos(float f) { return cosf(f); }

extern(C) float acosf(float f);
extern(C) double acos(double d);
/// Returns the arc cosine of the parameter.
float acos(float f) { return acosf(f); }

/// Returns the arc sine of the parameter.
extern(C) float asinf(float f);
extern(C) double asin(double d);
float asin(float f) { return asinf(f); }

extern(C) float tanf(float f);
extern(C) double tan(double d);
/// Returns the tangent of the parameter in radians.
float tan(float f) { return tanf(f); }

/// Computes the floating-point remainder of the division operation x/y.
extern(C) float fmodf(float x, float y);
extern(C) double fmod(double x, double y);
float fmod(float x, float y) { return fmodf(x, y); }

/// Computes the nearest integer not greater in magnitude than x.
extern(C) float truncf(float x);
extern(C) double trunc(double x);
float trunc(float x) { return truncf(x); }

/// Computes the least integer value not less than x.
extern(C) float ceilf(float x);
extern(C) double ceil(double x);
float ceil(float x) { return ceilf(x); }

extern(C) float fabsf(float f);
extern(C) double fabs(double d);
/// Returns the absolute (ie. positive) value of the parameter.
double abs(double d) { return fabs(d); }
/// Returns the absolute (ie. positive) value of the parameter.
float abs(float f) { return fabsf(f); }
/// Returns the absolute (ie. positive) value of the parameter.
int abs(int i) { if (i < 0) return -i; return i; }

extern(C) float expf(float f);
extern(C) double exp(double d);
/// Returns the exponential value of the parameter.
float exp(float f) { return expf(f); }

extern(C) float powf(float, float);
extern(C) double pow(double, double);
/// Returns `x` raised to the power of `y`.
float pow(float x, float y) { return powf(x, y); }

// extern(C) float atan2f(float y, float x);
// float atan2(float y, float x) { return atan2f(y, x); }
// see http://dspguru.com/dsp/tricks/fixed-point-atan2-with-self-normalization/ thanks SO
/**
 * Returns the arc tangent of y/x.
 * This is the angle between a point (x, y) and the X axis.
 */
float atan2(float y, float x) {
   float coeff_1 = 3.1415926537f;
   float coeff_2 = 3*coeff_1;
   float abs_y = fabsf(y)+0.000001f;
   mut float angle;
   if (x >= 0) {
      float r = (x - abs_y) / (x + abs_y);
      angle = coeff_1 - coeff_1 * r;
   } else {
      float r = (x + abs_y) / (abs_y - x);
      angle = coeff_2 - coeff_1 * r;
   }
   if (y < 0) return -angle;
   else return angle;
}

extern(C) double atan2(double y, double x);

extern(C) float sqrtf(float);
extern(C) double sqrt(double d);
/// Returns the square root of f.
float sqrt(float f) { return sqrtf(f); }

/// Returns the maximum of `a` and `b`.
int max(int a, int b) { if (a > b) return a; return b; }
/// Returns the maximum of `a` and `b`.
long max(long a, long b) { if (a > b) return a; return b; }
/// Returns the maximum of `a` and `b`.
float max(float a, float b) { if (a > b) return a; return b; }
/// Returns the maximum of `a` and `b`.
double max(double a, double b) { if (a > b) return a; return b; }

unittest {
    assert(max(2, 3) == 3);
    assert(max(-4.5, -5.0) == -4.5);
}

/// Returns the minimum of `a` and `b`.
int min(int a, int b) { if (a < b) return a; return b; }
/// Returns the minimum of `a` and `b`.
long min(long a, long b) { if (a < b) return a; return b; }
/// Returns the minimum of `a` and `b`.
float min(float a, float b) { if (a < b) return a; return b; }
/// Returns the minimum of `a` and `b`.
double min(double a, double b) { if (a < b) return a; return b; }

unittest {
    assert(min(2, 3) == 2);
    assert(min(-4.5, -5.0) == -5);
}
