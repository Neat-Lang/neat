module std.time;

import c.sys.time;
import neat.runtime : assert;

/**
 * This type describes a time without a timezone.
 */
struct Time
{
    timeval val;
    /// The number of fractional seconds from another time to this one.
    float secondsSince(Time other) {
        return cast(int) (val.time_t - other.val.time_t)
            + cast(int) (val.suseconds_t - other.val.suseconds_t) / 1000000.0f;
    }
    /// The current time in the system timezone.
    static Time now() {
        Time res;
        gettimeofday(&res.val, null);
        return res;
    }
}

/**
 * This class allows measuring time taken by some task.
 *
 * The stopwatch starts out stopped.
 */
class Stopwatch {
    /// Seconds from previous runs.
    float seconds_;
    (:running, Time | :stopped) state;
    /// Instantiate the class.
    this() {
        reset;
    }
    /// True if the stopwatch is stopped.
    bool stopped() {
        return this.state == :stopped;
    }
    /**
     * The number of seconds accumulated on the stopwatch.
     * Note that the stopwatch must be stopped to access this property.
     */
    float seconds() {
        return this.seconds_;
    }
    /// Reset the stopwatch to its initial state.
    void reset() {
        this.seconds_ = 0;
        this.state = :stopped;
    }
    /// Start the stopwatch.
    void start() {
        assert(stopped);
        state = (:running, Time.now);
    }
    /// Stop the stopwatch.
    void stop() {
        assert(!stopped);
        // TODO: __undefined
        Time __undefined() { assert(false); }
        auto startTime = state.case((:running, Time t): t, :stopped: __undefined);
        auto stopTime = Time.now;
        state = :stopped;
        seconds_ += stopTime.secondsSince(startTime);
    }
    /**
     * Split and reset the stopwatch.
     *
     * This method returns another stopwatch stopped at the previous time.
     * If the stopwatch is still running, by the time it is stopped, the sum
     * of the returned stopwatch's seconds and this one's will be the same
     * as if the stopwatch had not been split.
     *
     * So this function allows atomically taking a "checkpoint" of the stopwatch.
     */
    Stopwatch split() {
        this.state.case {
            (:stopped):
                auto copy = new Stopwatch;
                copy.seconds_ = this.seconds_;
                this.seconds_ = 0;
                return copy;
            (:running, Time start):
                auto splitPoint = Time.now;
                auto result = new Stopwatch;
                result.seconds_ = this.seconds_ + splitPoint.secondsSince(start);
                this.seconds_ = 0;
                this.state = (:running, splitPoint);
                return result;
        }
    }
}
