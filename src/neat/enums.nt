module neat.enums;

macro import package(compiler).std.macro.listcomprehension;
macro import package(compiler).std.macro.quasiquoting;

import backend.base;
import helpers;
import neat.base;
import neat.parser;
import neat.types;
import neat.util;
import polyhash;

struct EnumEntry
{
    string name;
    int value;
}

class Enum : Type, Hashable
{
    string name;

    EnumEntry[] entries;

    // TODO like so, in Class{}
    Hash precomputedHash;

    this(this.name, this.entries) {
        this.zeroInitializable = false;
        precomputedHash = new Hash();
        precomputedHash.adds("hash");
        precomputedHash.adds(name);
        precomputedHash.addl(entries.length);
        [precomputedHash.adds(e.name) for e in entries];
        [precomputedHash.addl(e.value) for e in entries];
    }

    override BackendType emit(Platform platform) { return new BackendIntType; }
    override bool same(Type other) {
        auto otherEnum = other.instanceOf(Enum);

        // TODO fqn
        return otherEnum && otherEnum.name == name;
    }
    override string repr() { return name; }
    override string mangle() { return "enum_" ~ name; }
    override void hash(Hash hash) { hash.applyHash(precomputedHash); }
    override (nullable Symbol | fail Error) accessMember(
        Context context, nullable Expression base, string field, Protection _, LocRange locRange)
    {
        if (auto base = base) {
            if (field == "toString") return enumToString(context, base);
            return null;
        }
        Symbol asEnum(int value) {
            return context.compiler.castTo(this,
                context.compiler.intLiteral(value));
        }
        return [first asEnum(e.value) for e in entries where e.name == field else null];
    }
    override (nullable Expression | fail Error) binaryOp(
        Context context, string op, Expression lhs, Expression rhs, LocRange locRange)
    {
        if (op == "==")
        {
            // TODO check type of rhs
            auto left = context.compiler.castTo(new Integer, lhs);
            auto right = context.compiler.castTo(new Integer, rhs);

            return context.compiler.binaryOp("==", context, left, right, locRange);
        }
        return null;
    }
    override (ASTSymbol | fail Error) hash(Context context, Expression value, LocRange locRange)
    {
        auto value = new ASTSymbolHelper(value);
        return context.compiler.$expr __hash(cast(int) $value);
    }
}

class ASTEnumDecl : ASTSymbolDeclaration
{
    EnumEntry[] entries;

    this(this.name, this.entries, this.locRange) { }

    override (Type | fail Error) compileSymbol(Context context) {
        return new Enum(name, entries);
    }
}

(nullable ASTEnumDecl | fail Error) parseEnumDecl(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    auto from = parser.from;
    if (!parser.acceptIdentifier("enum")) {
        parser.revert;
        return null;
    }
    parser.commit;
    auto locRange = parser.to(from);
    string name = parser.parseIdentifier;
    mut EnumEntry[] entries;
    parser.expectToken(TokenType.lcurlybracket)?;
    while (!parser.acceptToken(TokenType.rcurlybracket))
    {
        if (entries.length)
            parser.expectToken(TokenType.comma)?;
        // is there a better way to write 'there may be a trailing comma'?
        if (parser.acceptToken(TokenType.rcurlybracket))
            break;
        string entryName = parser.parseIdentifier;
        entries ~= EnumEntry(entryName, cast(int) entries.length);
    }
    return new ASTEnumDecl(name, entries, locRange);
}

(Expression | fail Error) enumToString(Context context, Expression enum_) {
    import neat.array : Array;

    auto enumType = enum_.type.instanceOf(Enum).notNull;
    auto compiler = context.compiler;

    Parameter[] params = [
        Parameter.simple("value", enumType),
    ];

    ASTStatement body_() {
        mut ASTStatement ifTree = compiler.$stmt {
            import package(compiler).neat.runtime : assert, print;
            print("error: enum value outside domain");
            assert(false);
        };
        for (enumEntry in enumType.entries) {
            auto astValue = compiler.astNumberLiteral(enumEntry.value, __RANGE__);
            auto astStr = compiler.astStringLiteral(enumEntry.name, __RANGE__);
            ifTree = compiler.$stmt if (value == $astValue) return $astStr; else $stmt ifTree;;
        }
        return ifTree;
    }

    auto fn = compiler.createRuntimeFunction(
        context, "enum_tostring", new Array(new Character, context.platform), params, &body_);

    return context.compiler.mkCall(fn, [enum_], __RANGE__);
}
