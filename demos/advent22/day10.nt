module day10;

macro import std.macro.listcomprehension;

import std.algorithm;
import std.math;
import std.stdio;
import std.string;

alias Instr = (:noop | :addx, int i);

Instr parse(string line) {
    auto line = line.split(" ").((cmd=that[0], args=that[1 .. $]));
    return line.cmd.case("noop": :noop, "addx": (:addx, line.args[0].atoi));
}

class CPU {
    int x;
    int cycle;
    Instr[] pendingInstrs;
    (int | :none) pending;
    int interestingSignalStrength;
    string mut[] pixels;
    this(this.pendingInstrs) {
        cycle = 1;
        x = 1;
        pending = :none;
        pixels = [" " for i in 0 .. 40 * 6].dup;
    }
    void exec() {
        auto instr = pendingInstrs[0];
        pendingInstrs = pendingInstrs[1 .. $];
        instr.case {
            :noop: {}
            (:addx, int i):
                pending = x + i;
        }
    }
    void run() {
        while (true) {
            checkSignalStrength;
            pending.case {
                :none:
                    if (pendingInstrs.empty) return;
                    exec;
                int i:
                    x = i;
                    pending = :none;
            }
            checkPixel;
            cycle++;
        }
    }
    void checkSignalStrength() {
        if (cycle > 0 && (cycle - 20) % 40 == 0) {
            print("cycle $cycle, x $x, add $(x * cycle)");
            interestingSignalStrength += x * cycle;
        }
    }
    void checkPixel() {
        if (abs(x - (cycle % 40)) < 2) {
            pixels[cycle] = "#";
        }
    }
}

void main()
{
    auto lines = stdin.byLine
        .filter(a => !a.empty)
        .map(a => parse(a))
        .array;
    auto cpu = new CPU(lines);
    cpu.run;
    print("at cycle $(cpu.cycle): x=$(cpu.x), strength $(cpu.interestingSignalStrength)");
    for (i in 0 .. 6) {
        print(cpu.pixels[i * 40 .. (i+1) * 40].dup.freeze.join(""));
    }
}
