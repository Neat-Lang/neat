module day15;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.math;
import std.stdio;
import std.string;

void main()
{
    auto parseVector = coord => coord.split(", ").(
        vec2i(that[0].after("x=").atoi, that[1].after("y=").atoi));
    auto parseSensorBeacon = line => line.split(":").(
        sensor=that[0].after("Sensor at ").parseVector,
        beacon=that[1].after("is at ").parseVector);
    auto reports = stdin.byLine
        .filter(a => !a.empty)
        .map(parseSensorBeacon)
        .array;
    auto hatDist = (a, b) => (a - b).abs.(x + y);
    auto radius = i => reports[i].(hatDist(sensor, beacon));
    auto boundingBox = i => reports[i].(
        from = sensor - vec2i(radius(i)),
        to = sensor + vec2i(radius(i)));
    auto merge = (first, second) => (
        from = min(first.from, second.from),
        to = max(first.to, second.to));
    print("$reports");
    int intMax = 0x7fffffff;
    mut auto boundAll = (from=vec2i(intMax), to=vec2i(-intMax));
    for (i in 0 .. reports.length)
        boundAll = merge(boundAll, boundingBox(i));
    auto inSensorRange = pos =>
        [any hatDist(pos, a.sensor) <= radius(i) for i, a in reports];
    auto isBeacon = p => [any a.beacon == p for a in reports];
    auto isSensor = p => [any a.sensor == p for a in reports];
    if (false) for (y in boundAll.from.y .. boundAll.to.y) {
        mut string line;
        line ~= "$y ";
        while (line.length < 5) line ~= " ";
        for (x in boundAll.from.x .. boundAll.to.x) {
            auto p = vec2i(x, y);
            if (p.isSensor) line ~= "S";
            else if (p.isBeacon) line ~= "B";
            else if (p.inSensorRange) line ~= "#";
            else line ~= ".";
        }
        print(line);
    }
    bool free(vec2i v) => v.inSensorRange && !v.isBeacon && !v.isSensor;
    print("counting...");
    int coveredPositions = [
        sum 1 if vec2i(x, 2000000).free else 0
        for x in boundAll.from.x .. boundAll.to.x + 1];
    print("covered on line 2000000: $coveredPositions");

    auto upperLimit = 4_000_000;
    for (y in 0 .. upperLimit + 1) {
        mut Range[] uncovered = [(from=0, to=upperLimit)];
        for (i, report in reports) {
            auto s = report.sensor;
            auto width = radius(i) - abs(s.y - y);
            if (width < 0) continue;
            auto range = (from=s.x - width, to=s.x + width);
            uncovered = csgDifference(uncovered, range);
        }
        if (!uncovered.empty) {
            assert(uncovered.length == 1 && uncovered.front.(from == to));
            auto p = vec2i(uncovered.front.from, y);
            assert(!p.inSensorRange);
            auto tuning = cast(long) p.x * 4000000 + cast(long) p.y;
            print("can be sensor: $p, tuning $tuning");
        }
    }
}

Range[] csgDifference(Range[] ranges, Range toRemove) {
    mut Range[] result;
    for (r in ranges) {
        if (r.to < toRemove.from) result ~= r;
        else if (r.from > toRemove.to) result ~= r;
        else {
            auto leftTo = toRemove.from - 1, rightFrom = toRemove.to + 1;
            if (leftTo >= r.from) result ~= (from=r.from, to=leftTo);
            if (rightFrom <= r.to) result ~= (from=rightFrom, to=r.to);
        }
    }
    return result;
}

alias Range = (int from, int to);

int min(int a, int b) => a if a < b else b;
int max(int a, int b) => a if a > b else b;
int abs(int a) => a if a > 0 else -a;
vec2i min(vec2i a, vec2i b) => vec2i(min(a.x, b.x), min(a.y, b.y));
vec2i max(vec2i a, vec2i b) => vec2i(max(a.x, b.x), max(a.y, b.y));
vec2i abs(vec2i v) => vec2i(v.x.abs, v.y.abs);

string after(string haystack, string needle) {
    auto pos = haystack.find(needle);
    assert(pos != -1);
    return haystack[pos + needle.length .. $];
}

alias vec2i = Vector(int, 2);
