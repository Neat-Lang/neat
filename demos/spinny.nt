module spinny;

macro import std.macro.cimport;
macro import std.macro.easymacro;
import c_header("GL/gl.h");
import c_header("GL/glext.h", "-include GL/gl.h -DGL_GLEXT_PROTOTYPES");
import c_header("GLFW/glfw3.h");
import std.math;
import std.math.matrix;
import std.math.vector;
import std.stdio;

version (windows) {
    pragma(lib, "opengl32");
    pragma(lib, "glu32");
    pragma(lib, "glfw3");
} else {
    pragma(lib, "GL");
    pragma(lib, "GLU");
    pragma(lib, "glfw");
}

alias rings = 16;
alias texWidth = 768;
alias ringSteps = 90;
alias PI2 = (cast(float) (PI * 2));

void setupVertexPointers(T)() {
    macro {
        import neat.float : Float;
        import neat.tuples : TupleType;
        import neat.types : Integer;
        import neat.util : ASTSymbolHelper;
        import neat.vectors : VectorType;
        auto T = type("T")?;
        auto tuple = T.instanceOf(TupleType)? else return __RANGE__.fail("expected tuple for vertex data");
        for (i, member in tuple.members) {
            auto name = member.name, type = member.type;
            auto astI = compiler.astNumberLiteral(i);
            (ASTSymbol | Error) transformSimpleType(Type type) {
                if (type.instanceOf(Float)) return compiler.astIdentifier("GL_FLOAT");
                if (type.instanceOf(Integer)) return compiler.astIdentifier("GL_INT");
                return __RANGE__.fail("expected simple type, not $(type.repr)");
            }
            auto prefix = new TupleType(tuple.members[0 .. i]);
            auto astPrefix = new ASTSymbolHelper(prefix);
            void do_(ASTSymbol astLen, ASTSymbol astType) {
                code {
                    glVertexAttribPointer($astI, $astLen, $astType, GL_FALSE, sizeof(T), cast(void*) sizeof($astPrefix));
                    glEnableVertexAttribArray($astI);
                }
            }
            if (auto vector_ = type.instanceOf(VectorType)) {
                auto astLen = compiler.astNumberLiteral(vector_.length);
                auto astType = transformSimpleType(vector_.elementType)?;
                do_(astLen, astType);
            } else {
                auto astLen = compiler.astNumberLiteral(1);
                auto astType = transformSimpleType(type)?;
                do_(astLen, astType);
            }
        }
    }
}

class Ring {
    float rotSpeed;
    float pulseSpeed;
    float height;
    int textureId;
    int vao;
    int vbo;
    mut float rotation;
    mut float pulse;

    this(this.rotSpeed, this.pulseSpeed, this.height, this.textureId) {
        this.rotation = 0;

        // Generate VAO and VBO
        glGenVertexArrays(1, &this.vao);
        glGenBuffers(1, &this.vbo);

        // Bind VAO and VBO
        glBindVertexArray(this.vao);
        glBindBuffer(GL_ARRAY_BUFFER, this.vbo);

        // Prepare vertex data
        alias Data = (vec3f pos, vec2f tex);
        mut Data mut[] vertexData;
        // + 1 to close the loop
        for (i in 0 .. ringSteps + 1) {
            float at = i * 1f / ringSteps;
            float to = (i + 1) * 1f / ringSteps;
            vertexData ~= (vec3f(sin(at * PI2), 0, cos(at * PI2)), vec2f(at, 0));
            vertexData ~= (vec3f(sin(to * PI2), 0, cos(to * PI2)), vec2f(to, 0));
            vertexData ~= (vec3f(sin(at * PI2), this.height, cos(at * PI2)), vec2f(at, 1));
            vertexData ~= (vec3f(sin(to * PI2), this.height, cos(to * PI2)), vec2f(to, 1));
        }

        // Upload vertex data to VBO
        glBufferData(GL_ARRAY_BUFFER, vertexData.length * sizeof(Data), vertexData.ptr, GL_STATIC_DRAW);

        setupVertexPointers!Data;

        // Unbind VAO and VBO
        glBindBuffer(GL_ARRAY_BUFFER, 0);
        glBindVertexArray(0);
    }

    void step(float f) {
        this.rotation += this.rotSpeed * f;
        this.pulse += this.pulseSpeed * f;
    }
}

Ring[] initRings() {
    mut Ring[] result;
    for (i in 0 .. rings) {
        auto rotSpeed = powf(randf * 10, 1.6) - 10;
        auto pulseSpeed = randf;
        mut int textureId;
        glGenTextures(1, &textureId);
        auto data = new ubyte mut[](texWidth * 4);
        mut bool solid = false;
        for (i in 0 .. texWidth) {
            if (randf < 0.1) {
                solid = !solid;
            }
            // data[i * 4 + 0] = cast(ubyte) rand;
            // data[i * 4 + 1] = cast(ubyte) rand;
            // data[i * 4 + 2] = cast(ubyte) rand;
            data[i * 4 + 0] = 0;
            data[i * 4 + 1] = 0;
            data[i * 4 + 2] = 0;
            data[i * 4 + 3] = cast(ubyte) ((255 if randf > 0.5 else 0) if solid else 0);
        }
        glBindTexture(GL_TEXTURE_2D, textureId);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, texWidth, 1,
            0, GL_RGBA, GL_UNSIGNED_BYTE, data.ptr);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
        result ~= new Ring(rotSpeed, pulseSpeed, height=randf * 0.05 + 0.05, textureId);
    }
    return result;
}

void display(Ring[] rings, mat4x4 view, mat4x4 projection, int mvpUniform) {
    for (int i, ring in rings) {
        mat4x4 model = mat4x4.identity
            .translate(0, (i - cast(int) rings.length / 2) * 0.1f, 0)
            .rotateY(ring.rotation * PI / 180)
            .scale(1 + sin(ring.pulse) * 0.1, 1, 1 + sin(ring.pulse) * 0.1);

        mut mat4x4 MVP = projection.mul(view).mul(model).transpose;

        glUniformMatrix4fv(mvpUniform, 1, GL_FALSE, cast(float*) &MVP);

        glBindVertexArray(ring.vao);
        glBindTexture(GL_TEXTURE_2D, ring.textureId);
        glDrawArrays(GL_TRIANGLE_STRIP, 0, ringSteps * 4);
    }
}

void step(Ring[] rings, float step) {
    for (ring in rings) {
        ring.step(step);
    }
}

alias vertexShaderSource = "
    #version 400 core
    layout (location = 0) in vec3 aPos;
    layout (location = 1) in vec2 aTexCoord;
    out vec2 TexCoord;
    uniform mat4 MVP;
    void main() {
        gl_Position = MVP * vec4(aPos, 1.0);
        TexCoord = aTexCoord;
    }";

alias fragmentShaderSource = "
    #version 400 core
    in vec2 TexCoord;
    out vec4 FragColor;
    uniform sampler2D Texture;
    void main() {
        vec4 texColor = texture(Texture, TexCoord);
        if (texColor.a == 0.0) {
            discard;
        }
        FragColor = texColor;
    }";

void main(string[] args) {
    glfwInit;

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    auto window = glfwCreateWindow(800, 600, "Spinny Barcode Demo", null, null);

    glfwMakeContextCurrent(window);
    glfwSwapInterval(1);

    int vertexShader = glCreateShader(GL_VERTEX_SHADER);
    mut auto vertexShaderSourcePtr = vertexShaderSource.ptr;
    vertexShader.glShaderSource(1, &vertexShaderSourcePtr, null);
    vertexShader.glCompileShader;
    vertexShader.verify;

    int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    mut auto fragmentShaderSourcePtr = fragmentShaderSource.ptr;
    fragmentShader.glShaderSource(1, &fragmentShaderSourcePtr, null);
    fragmentShader.glCompileShader;
    fragmentShader.verify;

    int shaderProgram = glCreateProgram;
    shaderProgram.glAttachShader(vertexShader);
    shaderProgram.glAttachShader(fragmentShader);
    shaderProgram.glLinkProgram;

    // Get MVP uniform location
    auto mvpUniform = glGetUniformLocation(shaderProgram, "MVP");

    auto rings = initRings;
    mut float lastFrameTime = 0;
    mut float delay = 0;

    while (!glfwWindowShouldClose(window)) {
        mut int width, height;
        glfwGetFramebufferSize(window, &width, &height);
        glViewport(0, 0, width, height);

        glClearColor(1, 1, 1, 1);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        shaderProgram.glUseProgram;

        mat4x4 view = mat4x4.identity.translate(0, 0, -2.0);
        mat4x4 projection = mat4x4.perspective(80, width * 1f/height, 0.01, 100.0);

        display(rings, view, projection, mvpUniform);

        glfwSwapBuffers(window);
        auto time = cast(float) glfwGetTime;
        delay = time - lastFrameTime;
        lastFrameTime = time;
        step(rings, delay);
        glfwPollEvents;
    }

    glfwDestroyWindow(window);
    glfwTerminate;
}

void verify(int shaderId) {
    mut int isCompiled;
    glGetShaderiv(shaderId, GL_COMPILE_STATUS, &isCompiled);
    if (isCompiled) return;
    mut int maxLength = 0;
    glGetShaderiv(shaderId, GL_INFO_LOG_LENGTH, &maxLength);

    auto errorLog = new string(maxLength);
    glGetShaderInfoLog(shaderId, maxLength, &maxLength, errorLog.ptr);

    print(errorLog);
    assert(false);
}

extern(C) int rand();

float randf() {
    int randPos() {
        int i = rand;
        return i if i > 0 else -i;
    }
    return (randPos % 100_000) / 100_000f;
}
