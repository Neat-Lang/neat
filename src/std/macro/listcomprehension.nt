module std.macro.listcomprehension;

macro import std.macro.quasiquoting;

import neat.runtime : assert;
import package(compiler).neat.base;
import package(compiler).neat.util;

class ASTListComprehension : ASTSymbol
{
    string iterationMode; // "", "any", "all", "first", "join", "count", "sum", "min", "max", "argmin", "argmax"

    nullable ASTSymbol expr;

    nullable ASTSymbol default_;

    // key for join, min/max for argmin/argmax
    nullable ASTSymbol param;

    string iname; // iteration variable

    string varname;

    ASTSymbol source;

    nullable ASTSymbol where;

    nullable ASTSymbol whil;

    this(this.iterationMode, this.expr, this.default_, this.param,
        this.iname, this.varname, this.source, this.where, this.whil, this.locRange)
    {
        if (!iname.length) iname = "__i";
    }

    override (Symbol | fail Error) compile(Context context) {
        auto compiler = context.compiler;
        // TODO in-class, rename i, var
        auto iname = context.compiler.astIdentifier(iname, __RANGE__);
        auto varname = context.compiler.astIdentifier(varname, __RANGE__);

        mut auto brk = compiler.$stmt {};
        if (auto whil = whil) brk = compiler.$stmt if (!$whil) break;;

        if (iterationMode == "count") {
            this.locRange.assert(!expr, "no expr for count")?;
            mut auto test = compiler.$expr true;
            if (auto where = where) test = compiler.$expr $where && $test;
            return (compiler.$expr ({
                auto __source = $source;
                mut int __count = 0;
                for ($iname, $varname in __source) {
                    $stmt brk;
                    if ($test) __count += 1;
                }
                __count;
            })).compile(context);
        }

        auto sourceType = source.compile(context)?.beExpressionImplCall(context, this.locRange)?.type;
        auto expr = notNull!ASTSymbol(this.expr);
        mut auto astType = compiler.$type typeof(({ auto $varname = $source.front; size_t $iname = 0; $expr; }));
        mut auto type = astType.compile(context)?;

        bool defaultIsNullExpr() {
            // FIXME ?.
            if (auto default_ = default_)
                if (auto default_ = default_.instanceOf(ASTIdentifier))
                    return default_.name_ == "null";
            return false;
        }

        if (defaultIsNullExpr && context.compiler.isClassType(notNull!Type(type.instanceOf(Type)))) {
            astType = compiler.$type nullable $astType;
            type = astType.compile(context)?;
        }

        if (type.instanceOf(Void)) {
            this.locRange.assert(iterationMode == "", "non-void expression expected")?;
            this.locRange.assert(!default_, "default superfluous")?;
            if (auto where = where) {
                return (compiler.$expr ({
                    auto __source = $source;
                    for ($iname, $varname in __source) {
                        $stmt brk;
                        if ($where) $expr;
                    }
                    0;
                })).compile(context);
            }
            return (compiler.$expr ({
                auto __source = $source;
                for ($iname, $varname in __source) {
                    $expr;
                }
                0;
            })).compile(context);
        } else if (iterationMode == "any") {
            this.locRange.assert(!default_, "default superfluous")?;
            mut auto test = expr;
            if (auto where = where) test = compiler.$expr $where && $test;
            return (compiler.$expr ({
                auto __source = $source;
                mut bool __result = false;
                for ($iname, $varname in __source) {
                    $stmt brk;
                    if ($test) { __result = true; break; }
                }
                __result;
            })).compile(context);
        } else if (iterationMode == "all") {
            this.locRange.assert(!default_, "default superfluous")?;
            mut auto test = compiler.$expr !$expr;
            if (auto where = where) test = compiler.$expr $where && $test;
            return (compiler.$expr ({
                auto __source = $source;
                mut bool __result = true;
                for ($iname, $varname in __source) {
                    $stmt brk;
                    if ($test) { __result = false; break; }
                }
                __result;
            })).compile(context);
        } else if (iterationMode == "join") {
            this.locRange.assert(!default_, "default superfluous")?;
            mut auto test = compiler.$expr true;
            if (auto where = where) test = compiler.$expr $where && $test;
            if (auto joinKey = this.param) {
                return (compiler.$expr ({
                    auto __source = $source;
                    mut typeof(({ $astType sample; $joinKey ~ sample; })) __result;
                    mut bool __first = true;
                    for ($iname, $varname in __source) {
                        $stmt brk;
                        if ($test) {
                            if (__first) {
                                __first = false;
                            } else {
                                __result ~= $joinKey;
                            }
                            __result ~= $expr;
                        }
                    }
                    __result;
                })).compile(context);
            }
            return (compiler.$expr ({
                auto __source = $source;
                mut typeof(({ $astType sample; sample ~ sample; })) __result;
                for ($iname, $varname in __source) {
                    $stmt brk;
                    if ($test) {
                        __result ~= $expr;
                    }
                }
                __result;
            })).compile(context);
        } else if (iterationMode == "first") {
            mut auto test = compiler.$expr true;
            if (auto where = where) test = where;
            mut ASTStatement setDefault = compiler.$stmt {
                import package(compiler).neat.runtime : assert;
                assert(__found);
            };
            if (auto default_ = default_) {
                setDefault = compiler.$stmt if (!__found) __result = $default_;;
            }
            auto sym = compiler.$expr ({
                auto __source = $source;
                mut auto __found = false;
                mut uninitialized $astType __result;
                for ($iname, $varname in __source) {
                    $stmt brk;
                    __result = $expr;
                    if ($test) { __found = true; break; }
                }
                $stmt setDefault;
                __result;
            });
            return sym.compile(context);
        } else if (iterationMode == "sum") {
            this.locRange.assert(!default_, "default superfluous")?;
            mut auto test = compiler.$expr true;
            if (auto where = where) test = where;
            return (compiler.$expr ({
                auto __source = $source;
                mut $astType __sum = 0;
                for ($iname, $varname in __source) {
                    $stmt brk;
                    if ($test) { __sum += $expr; }
                }
                __sum;
            })).compile(context);
        } else if (iterationMode == "min") {
            mut auto test = compiler.$expr true;
            if (auto where = where) test = where;
            ASTSymbol init() {
                if (auto ret = default_) return ret;
                return compiler.$expr ({
                    import neat.runtime : assert;
                    assert(false);
                    $astType __unreachable;
                    __unreachable;
                });
            }
            return (compiler.$expr ({
                auto __source = $source;
                mut (:initial | $astType) __min = :initial;
                for ($iname, $varname in __source) {
                    $stmt brk;
                    if ($test) {
                        auto __value = $expr;
                        __min.case {
                            (:initial): __min = __value;
                            $astType current: {
                                if (__value < current)
                                    __min = __value;
                            }
                        }
                    }
                }
                __min.case(
                    (:initial): $init,
                    $astType v: v);
            })).compile(context);
        } else if (iterationMode == "max") {
            mut auto test = compiler.$expr true;
            if (auto where = where) test = where;
            ASTSymbol init() {
                if (auto ret = default_) return ret;
                return compiler.$expr ({
                    import neat.runtime : assert;
                    assert(false);
                    $astType __unreachable;
                    __unreachable;
                });
            }
            return (compiler.$expr ({
                auto __source = $source;
                mut (:initial | $astType) __max = :initial;
                for ($iname, $varname in __source) {
                    $stmt brk;
                    if ($test) {
                        auto __value = $expr;
                        __max.case {
                            (:initial): __max = __value;
                            $astType current: {
                                if (__value > current)
                                    __max = __value;
                            }
                        }
                    }
                }
                __max.case(
                    (:initial): $init,
                    $astType v: v);
            })).compile(context);
        } else if (iterationMode == "argmin") {
            auto param = param.notNull;
            auto argType = compiler.$type typeof(({ auto $varname = $source.front; size_t $iname = 0; $param; }));
            mut auto test = compiler.$expr true;
            if (auto where = where) test = where;
            ASTSymbol init() {
                if (auto ret = default_) return ret;
                return compiler.$expr ({
                    import neat.runtime : assert;
                    assert(false);
                    $astType __unreachable;
                    __unreachable;
                });
            }
            return (compiler.$expr ({
                auto __source = $source;
                mut (:initial | $argType arg, $astType res) __min = :initial;
                for ($iname, $varname in __source) {
                    $stmt brk;
                    if ($test) {
                        auto __value = $param;
                        __min.case {
                            (:initial): __min = (__value, $expr);
                            ($argType arg, $astType res): {
                                if (__value < arg)
                                    __min = (__value, $expr);
                            }
                        }
                    }
                }
                __min.case(
                    (:initial): $init,
                    ($argType arg, $astType res): res);
            })).compile(context);
        } else if (iterationMode == "argmax") {
            auto param = param.notNull;
            auto argType = compiler.$type typeof(({ auto $varname = $source.front; size_t $iname = 0; $param; }));
            mut auto test = compiler.$expr true;
            if (auto where = where) test = where;
            ASTSymbol init() {
                if (auto ret = default_) return ret;
                return compiler.$expr ({
                    import neat.runtime : assert;
                    assert(false);
                    $astType __unreachable;
                    __unreachable;
                });
            }
            return (compiler.$expr ({
                auto __source = $source;
                mut (:initial | $argType arg, $astType res) __max = :initial;
                for ($iname, $varname in __source) {
                    $stmt brk;
                    if ($test) {
                        auto __value = $param;
                        __max.case {
                            (:initial): __max = (__value, $expr);
                            ($argType arg, $astType res): {
                                if (__value > arg)
                                    __max = (__value, $expr);
                            }
                        }
                    }
                }
                __max.case(
                    (:initial): $init,
                    ($argType arg, $astType res): res);
            })).compile(context);
        } else {
            if (iterationMode != "") {
                print("unknown iteration mode $iterationMode");
                assert(false);
            }
            if (auto where = where) {
                return (compiler.$expr ({
                    auto __source = $source;
                    mut $astType[] __result;
                    for ($iname, $varname in __source) {
                        $stmt brk;
                        if ($where) __result ~= $expr;
                    }
                    __result;
                })).compile(context);
            }
            return (compiler.$expr ({
                auto __source = $source;
                auto __result = new $astType[](__source.length);
                for ($iname, $varname in __source) {
                    $stmt brk;
                    __result[$iname] = $expr;
                }
                __result;
            })).compile(context);
        }
    }
}

class ListComprehension : Macro
{
    this() { }
    override void apply(MacroArgs args) {
        if (auto args = args.instanceOf(ParseExpressionBaseArgs)) {
            args.symbol = this.parse(args.parser, args.lexicalContext);
        }
    }

    (nullable ASTSymbol | fail Error) parse(Parser parser, LexicalContext lexicalContext)
    {
        auto compiler = lexicalContext.compiler;

        parser.begin();
        auto from = parser.from;
        if (!parser.acceptToken(TokenType.lsquarebracket)) {
            parser.revert();
            return null;
        }
        mut string iterationMode;
        mut nullable ASTSymbol default_;
        mut nullable ASTSymbol param;
        if (parser.acceptIdentifier("any")) iterationMode = "any";
        else if (parser.acceptIdentifier("all")) iterationMode = "all";
        else if (parser.acceptIdentifier("first")) iterationMode = "first";
        else if (parser.acceptIdentifier("join")) {
            iterationMode = "join";
            if (parser.acceptIdentifier("with")) {
                param = compiler.parseExpression(parser, lexicalContext)?;
                parser.assert_(!!param, "join key expected")?;
            }
        }
        else if (parser.acceptIdentifier("count")) {
            iterationMode = "count";
        }
        else if (parser.acceptIdentifier("sum")) {
            iterationMode = "sum";
        }
        else if (parser.acceptIdentifier("min")) iterationMode = "min";
        else if (parser.acceptIdentifier("max")) iterationMode = "max";
        else if (parser.acceptIdentifier("argmin")) iterationMode = "argmin";
        else if (parser.acceptIdentifier("argmax")) iterationMode = "argmax";
        if (iterationMode == "argmin" || iterationMode == "argmax") {
            parser.expect("(")?;
            param = compiler.parseExpression(parser, lexicalContext)?;
            parser.assert_(!!param, "arg expression expected")?;
            parser.expect(")")?;
        }
        mut nullable ASTSymbol expr;
        // count is expressionless
        if (iterationMode != "count") {
            expr = compiler.parseExpression(parser, lexicalContext)?;
            if (!expr) {
                parser.revert;
                return null;
            }
            if (!parser.acceptIdentifier("for")) {
                parser.revert;
                return null;
            }
        }
        mut string iname;
        mut string varname = parser.parseIdentifier;
        if (!varname.length) {
            return parser.fail("variable name expected");
        }
        if (parser.acceptToken(TokenType.comma)) {
            iname = varname;
            varname = parser.parseIdentifier;
            if (!varname.length) {
                return parser.fail("variable name expected");
            }
        }
        parser.expect("in")?;
        auto source = compiler.parseExpression(parser, lexicalContext)?;
        if (!source) {
            return parser.fail("source expression expected");
        }
        auto source = notNull!ASTSymbol(source);
        mut nullable ASTSymbol where;
        if (parser.acceptIdentifier("where")) {
            where = compiler.parseExpression(parser, lexicalContext)?;
            if (!where) {
                return parser.fail("where expression expected");
            }
        }
        mut nullable ASTSymbol whil;
        if (parser.acceptIdentifier("while")) {
            whil = compiler.parseExpression(parser, lexicalContext)?;
            if (!whil) {
                return parser.fail("'while' expression expected");
            }
        }
        if (iterationMode == "first") {
            if (parser.acceptIdentifier("else")) {
                default_ = compiler.parseExpression(parser, lexicalContext)?;
            }
        }
        else if (iterationMode == "min" || iterationMode == "max") {
            if (parser.acceptIdentifier("base"))
                default_ = compiler.parseExpression(parser, lexicalContext)?;
        }
        parser.expect("]")?;
        parser.commit;
        return new ASTListComprehension(
            iterationMode, expr, default_, param, iname, varname, source, where, whil, parser.to(from));
    }
}

void addListComprehensionMacro(MacroState macroState)
{
    macroState.addMacro(new ListComprehension);
}

macro(addListComprehensionMacro);
