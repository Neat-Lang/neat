module day8;

macro import std.macro.listcomprehension;

import std.algorithm;
import std.stdio;
import std.string;

void main()
{
    auto lines = stdin.byLine.filter(a => !a.empty).array;
    auto trees = [[atoi("" ~ ch) for ch in line] for line in lines];
    auto height = cast(int) trees.length;
    auto width = cast(int) trees[0].length;
    bool[] visible = new bool[](height * width);
    for (y in 0 .. height) {
        mut int maxl = -1;
        for (x in 0 .. width) {
            auto tree = trees[y][x];
            if (tree > maxl) { maxl = tree; visible[y * width + x] = true; }
        }
        mut int maxr = -1;
        for (mut int x = width - 1; x >= 0; x--) {
            auto tree = trees[y][x];
            if (tree > maxr) { maxr = tree; visible[y * width + x] = true; }
        }
    }
    for (x in 0 .. width) {
        mut int maxu = -1;
        for (y in 0 .. height) {
            auto tree = trees[y][x];
            if (tree > maxu) { maxu = tree; visible[y * width + x] = true; }
        }
        mut int maxd = -1;
        for (mut int y = height - 1; y >= 0; y--) {
            auto tree = trees[y][x];
            if (tree > maxd) { maxd = tree; visible[y * width + x] = true; }
        }
    }
    int visible = [sum 1 if v else 0 for v in visible];
    print("$visible trees are visible.");
    int scenicScore(int x, int y) {
        mut int h = trees[y][x];
        mut int scenicR, scenicL, scenicU, scenicD;
        for (mut int x2 = x + 1; x2 < width; x2++) {
            scenicR++;
            if (trees[y][x2] >= h) break;
        }
        for (mut int x2 = x - 1; x2 >= 0; x2--) {
            scenicL++;
            if (trees[y][x2] >= h) break;
        }
        for (mut int y2 = y + 1; y2 < height; y2++) {
            scenicD++;
            if (trees[y2][x] >= h) break;
        }
        for (mut int y2 = y - 1; y2 >= 0; y2--) {
            scenicU++;
            if (trees[y2][x] >= h) break;
        }
        // print("$x, $y: score $scenicU * $scenicL * $scenicR * $scenicD");
        return scenicR * scenicL * scenicU * scenicD;
    }
    int score = [max [max scenicScore(x, y) for x in 0 .. width] for y in 0 .. height];
    print("peak scenic score $score");
}
