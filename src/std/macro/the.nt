module std.macro.the;

import package(compiler).neat.base;
import package(compiler).neat.function_;
import package(compiler).neat.parser;
import package(compiler).neat.runtime;
import package(compiler).neat.util;

class ASTTheValue : ASTSymbol
{
    ASTSymbol type;

    this(this.type, this.locRange) { }

    override (Expression | Error) compile(Context context)
    {
        auto type = this.type.compile(context)?.beType(this.locRange)?;
        mut nullable Namespace namespace = context.namespace;
        mut string[] checked;
        while (namespace) {
            auto varDecl = namespace.instanceOf(VariableDeclaration);
            if (varDecl) {
                if (varDecl.name == "") {
                    auto member = varDecl.accessDecl(context);

                    if (member.type.same(type))
                        return member;
                    checked ~= member.type.repr;
                }
                namespace = namespace.parent;
            }
            else {
                namespace = namespace.parent;
            }
        }
        this.locRange.assert(false, "Type not found: $(type.repr) among $checked")?;
    }
}

class TheValue : Macro
{
    this() { }
    override void apply(MacroArgs args) {
        auto args = args.instanceOf(ParseExpressionBaseArgs);
        if (args) {
            args.symbol = this.parse(args.parser, args.lexicalContext);
        }
    }

    (nullable ASTSymbol | Error) parse(Parser parser, LexicalContext context)
    {
        parser.begin;
        auto from = parser.from;
        if (!parser.acceptIdentifier("the")){
            parser.revert;
            return null;
        }
        parser.commit;
        ASTSymbol type = context.compiler.parseType(parser, context)?? else die;
        return new ASTTheValue(type, parser.to(from));
    }
}

void addTheValueMacro(MacroState macroState)
{
    macroState.addMacro(new TheValue);
}

macro(addTheValueMacro);
