module neat.workpool;

macro import std.macro.listcomprehension;

import neat.base;
import neat.runtime : assert;
import std.thread;
import std.time;

/*
 * Threadpool for pure tasks identified by a string.
 * Any task is started at most once.
 */
class WorkPool : WorkPoolBase
{
    TaskEntry[] tasks;

    Mutex mutex;

    ThreadPool pool;

    Stopwatch total;

    ThreadLocal!string currentTaskId;

    this(this.pool) {
        this.mutex = new Mutex;
        this.currentTaskId = new ThreadLocal!string;
        // Represents the "main" thread.
        auto main = new TaskEntry("", new FailITask, currentTaskId);

        // For comparison with CPA.
        this.total = new Stopwatch;
        this.total.start;

        this.tasks ~= main;
        main.slice.start;
    }

    void report() {
        auto main = this.tasks[0];
        main.slice.stop;
        this.total.stop;
        mut TaskSlice[] criticalPath;
        mut nullable TaskSlice currentSlice = main.slice;
        while (currentSlice) {
            if (auto a = currentSlice) criticalPath ~= a;
            currentSlice = currentSlice.criticalPathParent;
        }
        auto results = criticalPath.retro.combineSlices;
        print("Critical Path Report:");
        mut float cpSum = 0;
        for (i, result in results) {
            print("#$(i): $(result.repr)");
            cpSum += result.seconds;
        }
        print("Sum: $cpSum (actual time: $(this.total.seconds))");
    }

    private TaskEntry currentTask() {
        auto id = this.currentTaskId.get;
        return [first a for a in tasks where a.id == id];
    }

    // Start task running if it isn't running yet.
    override void queue(string id, ITask task) {
        mut uninitialized TaskEntry entry;
        with (mutex.locked) {
            if ([any a.id == id for a in tasks]) {
                return;
            }
            entry = new TaskEntry(id, task, currentTaskId);
            tasks ~= entry;
            auto oldSlice = currentTask.splitSlice;
            entry.slice.criticalPathParent = oldSlice;
        }
        pool.addTask(entry);
    }

    override ITask wait(string id) {
        mut uninitialized TaskEntry task;
        mut bool preempted;
        with (mutex.locked) {
            int offs = [first cast(int) i for i, a in tasks
                where a.id == id
                else -1];
            assert(offs != -1);
            task = tasks[offs];
            preempted = task.tryPreempt;
        }
        mut bool waited;
        if (preempted) {
            // The pool didn't get around to even starting the task yet.
            // So we run it ourselves.
            task.runDirectly;
            waited = true;
        } else {
            waited = task.wait_;
        }
        if (waited) {
            assert(task.slice.time.stopped);
            with (mutex.locked) {
                // TODO should be able to assign to reference in expression
                auto ct = currentTask;
                ct.splitSlice;
                ct.slice.criticalPathParent = task.slice;
            }
        }
        return task.task;
    }
}

struct Result
{
    string id;
    int indexFrom, indexTo;
    float seconds;

    string repr() {
        mut string id = this.id;
        if (id.empty) id = "main";
        if (indexFrom == indexTo) return "$(seconds) $id[$indexFrom]";
        return "$(seconds) $id[$indexFrom-$indexTo]";
    }
}

Result[] combineSlices(TaskSlice[] slices) {
    mut Result[] result;
    for (slice in slices) {
        if (!result.empty && result[$ - 1].id == slice.id) {
            result[$ - 1].indexTo = slice.index;
            result[$ - 1].seconds += slice.time.seconds;
        } else {
            result ~= Result(slice.id, slice.index, slice.index, slice.time.seconds);
        }
    }
    return result;
}

TaskSlice[] retro(TaskSlice[] array) {
    return [array[$ - i - 1] for i, _ in array];
}

/**
 * Represents a slice of time that a task was active.
 * Forms the core of the Critical Path Analysis logic.
 */
private class TaskSlice
{
    string id;

    int index;

    Stopwatch time;

    nullable TaskSlice criticalPathParent;

    this(this.id, this.index, this.time) { }

    void start() {
        this.time.start;
    }

    void stop() {
        this.time.stop;
    }
}

private class TaskEntry : Task
{
    string id;

    ITask task;

    (:pending | :running | :preempted | :done) state;

    Mutex mutex;

    CondVar condvar;

    ThreadLocal!string currentTaskId;

    TaskSlice slice;

    this(this.id, this.task, this.currentTaskId) {
        this.mutex = new Mutex;
        this.condvar = new CondVar(this.mutex);
        this.state = :pending;
        this.slice = new TaskSlice(this.id, 0, new Stopwatch);
    }

    /**
     * Returns true if the task was "preempted": that is, the task has not
     * run yet, has not even started, and now it will never start.
     */
    bool tryPreempt() {
        with (mutex.locked) {
            if (state == :pending) {
                state = :preempted;
                return true;
            }
        }
        return false;
    }

    TaskSlice splitSlice() {
        auto oldSlice = this.slice;
        this.slice = new TaskSlice(this.id, oldSlice.index + 1, oldSlice.time);
        this.slice.criticalPathParent = oldSlice;
        oldSlice.time = slice.time.split;
        return oldSlice;
    }

    override void run() {
        with (mutex.locked) {
            if (state == :preempted || state == :done) return;
            assert(state == :pending);
            state = :running;
        }
        runDirectly;
    }

    void runDirectly() {
        this.slice.start;
        auto prevTask = currentTaskId.get;
        currentTaskId.set(id);
        task.run;
        currentTaskId.set(prevTask);
        this.slice.stop;
        with (mutex.locked) {
            state = :done;
            condvar.broadcast;
        }
    }

    bool wait_() {
        with (mutex.locked) {
            if (this.state == :done) return false;
            while (this.state != :done) this.condvar.wait;
            return true;
        }
    }
}

class FailITask : ITask
{
    this() { }
    override void run() {
        assert(false);
    }
}
