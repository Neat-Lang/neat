module day2;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.stdio;
import std.string;

enum Shape { rock, paper, scissors }
enum Outcome { win, loss, draw }
alias Game = (Shape theirs, Shape mine);

Game parseInterp1(string theirs, string mine)
{
    return (
        Shape.(theirs.case("A": rock, "B": paper, "C": scissors)),
        Shape.(mine.case("X": rock, "Y": paper, "Z": scissors)));
}

(Shape theirs, Outcome mine) parseInterp2(string theirs, string mine)
{
    return (
        Shape.(theirs.case("A": rock, "B": paper, "C": scissors)),
        Outcome.(mine.case("X": loss, "Y": draw, "Z": win)));
}

Game resolve((Shape theirs, Outcome required) strategy)
{
    return strategy.((
        theirs=theirs,
        ours=[
            first mine for mine in Shape.([rock, paper, scissors])
            where outcome((theirs, mine)) == required]));
}

Outcome outcome(Game game) with (Outcome) {
    bool beats(Shape mine, Shape theirs) return Shape.(
        mine == rock && theirs == scissors
        || mine == paper && theirs == rock
        || mine == scissors && theirs == paper);
    if (game.mine == game.theirs) return draw;
    if (game.mine.beats(game.theirs)) return win;
    return loss;
}

int judgeGame(Game game)
    with (Outcome) return game.outcome.case(win: 6, draw: 3, loss: 0);

int judgeShape(Shape shape)
    with (Shape) return shape.case(rock: 1, paper: 2, scissors: 3);

void main()
{
    auto input = stdin.byLine
        .filter(a => !a.empty)
        .map(a => a.split(" ").((theirs=that[0], mine=that[1])))
        .array;

    auto strategy1 = input.map(a => parseInterp1(theirs=a.theirs, mine=a.mine)).array;
    auto score1 = [sum (a.judgeGame + a.mine.judgeShape) for a in strategy1];
    print("Strategy guide score, interpretation 1 is $score1");

    auto strategy2 = input.map(a => parseInterp2(theirs=a.theirs, mine=a.mine).resolve).array;
    auto score2 = [sum (a.judgeGame + a.mine.judgeShape) for a in strategy2];
    print("Strategy guide score, interpretation 2 is $score2");
}
