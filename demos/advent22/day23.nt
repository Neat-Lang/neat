module day23;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.stdio;

void main()
{
    auto lines = stdin.byLine
        .filter(line => !line.empty)
        .array;
    mut V[] elves;
    for (int y, line in lines)
        for (int x, ch in line)
            if (ch == '#')
                elves ~= V(x, y);
    V[] checks = [V(0, -1), V(0, 1), V(-1, 0), V(1, 0)];
    print("elves: $elves");
    (V[] state, bool anyMoved) step(V[] elves, int round) {
        mut int[V] proposals;
        bool free(V v) => [all a != v for a in elves];
        bool freeAround(V v, V checkDir) {
            auto checkL = checkDir.(V(x if x else 1, y if y else 1));
            auto checkR = checkDir.(V(x if x else -1, y if y else -1));
            return free(v + checkDir) && free(v + checkL) && free(v + checkR);
        }
        bool mustMove(V v) {
            for (y in -1 .. 2) for (x in -1 .. 2) if (x || y)
                if (!free(v + V(x, y))) return true;
            return false;
        }
        for (elf in elves) {
            if (!elf.mustMove) continue;
            for (i in 0 .. 4) {
                auto checkDir = checks[(i + round) % 4];
                if (freeAround(elf, checkDir)) {
                    auto key = elf + checkDir;
                    // print("elf at $elf proposes moving $(checkDir)");
                    proposals[key] = proposals.get(key, 0) + 1;
                    break;
                }
            }
        }
        mut V[] newElves;
        mut bool anyMoved;
        for (elf in elves) {
            mut bool moved = false;
            if (elf.mustMove) {
                for (i in 0 .. 4) {
                    auto checkDir = checks[(i + round) % 4];
                    if (freeAround(elf, checkDir)) {
                        if (proposals[elf + checkDir] == 1) {
                            // print("elf at $elf moves $(checkDir)");
                            newElves ~= elf + checkDir;
                            moved = true;
                            anyMoved = true;
                        }
                        break;
                    }
                }
            }
            if (!moved)
                newElves ~= elf;
        }
        // print("after step $round: $newElves");
        return (newElves, anyMoved);
    }
    int free(V[] state) {
        mut int free;
        auto bb = (
            from=V([min(v.x) for v in state], [min(v.y) for v in state]),
            to=V([max(v.x) for v in state], [max(v.y) for v in state]));
        for (y in bb.from.y .. bb.to.y + 1)
            for (x in bb.from.x .. bb.to.x + 1)
                if (![any a == V(x, y) for a in state])
                    free++;
        return free;
    }
    mut V[] state = elves;
    for (i in 0 .. 10) state = step(state, i).state;
    print("After round 10: $(state.free) free");
    for (i in 10 .. int.max) {
        auto res = step(state, i);
        if (!res.anyMoved) {
            print("in round $(i + 1), no elves moved.");
            break;
        }
        state = res.state;
    }
}

alias V = Vector(int, 2);
