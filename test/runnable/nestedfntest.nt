module nestedfntest;

macro import std.macro.assert;

void callme(void delegate!() dg) {
    dg();
}

class Class {
    int value;
    this(this.value) { }
}

// this was a bug that cost me a day.
void bugtest() {
    nullable Class a = new Class(5), b = new Class(6);
    if (auto a = a) {
        void test() {
            assert(a.value == 5);
        }
        test;
    }
}

void templatedNestedFnTest() {
    template foo(T) {
        T foo(T t) {
            return t;
        }
    }
    assert(foo!int(3) == 3);
    assert(foo!string("hello") == "hello");
}

void templatedNestedFnTest2() {
    int i = 3;
    template foo(T) {
        T foo(T t) {
            return t + i;
        }
    }
    void subfun() {
        assert(foo!int(4) == 7);
    }
    subfun;
}

void sameName() {
    mut int a;
    {
        void foo() { a = 5; }
        foo; assert(a == 5);
    }
    {
        void foo() { a = 6; }
        foo; assert(a == 6);
    }
}

void funLiteral() {
    int call(int i, int delegate!(int) dg) {
        return dg(i);
    }
    int fn(int i) { return i; }
    assert(call(4, &fn) == 4);
    assert(call(5, (int i) { return i; }) == 5);
}

int mutualRecursionTest() {
    // nested functions without a variable definition between can mutually recurse
    int collatz(int x) {
        if (x == 1) return 1;
        if (x % 2 == 0) return even(x);
        return odd(x);
    }
    int even(int x) => collatz(x / 2);
    int odd(int x) => collatz(x * 3 + 1);
    assert(collatz(27) == 1);
}

void main() {
    mut int i = 1;
    void incr() { i += 1; }
    incr();
    assert(i == 2);
    callme(&incr);
    assert(i == 3);
    bugtest;
    templatedNestedFnTest;
    templatedNestedFnTest2;
    sameName;
    funLiteral;
    nestFnInstantiationTest;
    mutualRecursionTest;
}

void nestFnInstantiationTest() {
    int i = 23;
    template foo(T) {
        bool foo(T j) {
            return i == j;
        }
    }
    // instantiate at stack depth 0
    foo(23);
    // instantiate at stack depth 1
    bool bar(int j) { return foo(j); }
    assert(bar(23));
}
