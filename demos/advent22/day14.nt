module day14;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.math;
import std.stdio;
import std.string;

void main()
{
    auto lines = stdin.byLine
        .filter(a => !a.empty)
        .map(line => decodePath(line))
        .array;
    auto sandSim = new SandSim;
    for (line in lines) {
        for (int i in 0 .. cast(int) line.length - 1) {
            auto from = line[i], to = line[i + 1];
            sandSim.drawLine(from, to);
        }
    }

    {
        auto task1 = sandSim.dup;
        task1.simulate;
        auto restingSand = [count a in task1.cave.values where a == :sand];
        print("task 1: sand that comes to rest: $restingSand");
    }
    {
        auto task2 = sandSim.dup;
        task2.simulate(floor=task2.yLimit + 2);
        auto restingSand = [count a in task2.cave.values where a == :sand];
        print("task 2: sand that comes to rest: $restingSand");
    }
}

class SandSim {
    Tile[vec2i] cave;
    int yLimit;
    this() {}
    this(this.cave, this.yLimit) {}
    void drawLine(vec2i from, vec2i to) {
        auto abs1 = i => 1 if i == 0 else i.abs;
        auto step = (to - from).(vec2i(x / abs1(x), y / abs1(y)));
        assert(step.(max(x.abs, y.abs) == 1 && min(x.abs, y.abs) == 0));
        auto steps = (to - from).(x / step.x if step.x != 0 else y / step.y);
        print("$(from.(x, y)), $(to.(x, y)): $(step.(x, y)); $steps");
        for (int j in 0 .. steps + 1) {
            auto linePos = from + step * j;
            cave[linePos] = :rock;
            yLimit = max(yLimit, linePos.y);
        }
    }
    SandSim dup() {
        mut Tile[vec2i] caveDup;
        for (key in cave.keys) caveDup[key] = cave[key];
        return new SandSim(caveDup, this.yLimit);
    }
    void simulate(int floor = -1) {
        if (floor != -1) print("artificial floor at y = $floor");
        vec2i spawn = vec2i(500, 0);
        // TODO break outer
        mut bool done = false;
        while (!done && cave.get(spawn, :air) != :sand) {
            mut vec2i pos = spawn;
            while (true) {
                bool check(vec2i step) {
                    auto newPos = pos + step;
                    if (floor != -1 && newPos.y == floor) return false;
                    if (cave.get(newPos, :air) == :air) {
                        pos = newPos;
                        return true;
                    }
                    return false;
                }
                check(vec2i(0, 1)) || check(vec2i(-1, 1)) || check(vec2i(1, 1)) || break;
                if (floor == -1 && pos.y > yLimit) {
                    done = true;
                    break;
                }
            }
            if (!done) {
                cave[pos] = :sand;
            }
        }
    }
}

alias Tile = (:air | :rock | :sand);

alias vec2i = Vector(int, 2);

vec2i[] decodePath(string line) {
    return line.split(" -> ")
        .map(pair => pair.split(",").(vec2i(that[0].atoi, that[1].atoi)))
        .array;
}
