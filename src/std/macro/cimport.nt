module std.macro.cimport;

// IMPORTANT
// Do not import neat.stuff here!
// That package takes like a second to compile!
// Extend CompilerBase instead!
import package(compiler).neat.base;
import package(compiler).neat.runtime : die;
import package(compiler).helpers;

extern(C) void neat_runtime_system(string command);

class CImportMacro : Macro
{
    this() { }

    override void apply(MacroArgs args) {
        auto args = args.instanceOf(ParseImportArgs);
        if (args) {
            args.module_ = this.parse(args.parser, args.lexicalContext);
        }
    }

    (typeof(null) | CImportTask | Error) parse(Parser parser, LexicalContext lexicalContext) {
        auto compiler = lexicalContext.compiler;
        if (!parser.acceptIdentifier("c_header"))
            return null;
        parser.expectToken(TokenType.lparen)?;
        // TODO move into neat.base
        auto from = parser.loc;
        parser.expectToken(TokenType.doubleQuote)?;
        auto includeSym = compiler.(destructAstStringLiteral(parseStringLiteral(parser, lexicalContext)?)?) else "";
        parser.assert_(!includeSym.empty, "string expected")?;
        mut string flags;
        if (parser.acceptToken(TokenType.comma)) {
            auto from = parser.loc;
            parser.expectToken(TokenType.doubleQuote)?;
            auto flagsSym = compiler.(destructAstStringLiteral(parseStringLiteral(parser, lexicalContext)?)?) else "";
            parser.assert_(!flagsSym.empty, "flags string expected")?;
            flags = flagsSym ~ " ";
        }
        parser.expectToken(TokenType.rparen)?;
        if (compiler.cFlags.length > 0)
            flags = (compiler.cFlags ~ flags).join(" ");

        auto id = "cimport $includeSym";
        auto task = new CImportTask(id, lexicalContext, includeSym, flags);
        lexicalContext.compiler.workPool.queue(task);
        return task;
    }
}

class CImportTask : ImportModuleBaseTask
{
    string id_;

    LexicalContext lexicalContext;

    string includeSym;

    string flags;

    mut (:none | ASTModuleBase | Error) result;

    this(this.id_, this.lexicalContext, this.includeSym, this.flags) {
        this.result = :none;
    }

    override string id() => id_;
    override bool fresh() => true;

    override (ASTModuleBase | Error) module_() {
        result.case {
            ASTModuleBase mod: return mod;
            Error err: return err;
            (:none): assert(false);
        }
    }

    override void run(WorkPoolBase workPool) {
        this.result = parseIncludeModule(this.includeSym, this.flags, this.lexicalContext);
    }
}

(ASTModuleBase | Error) parseIncludeModule(
    string include, string flags, LexicalContext lexicalContext)
{
    auto compiler = lexicalContext.compiler;
    string modName = include.replace("/", "_").replace(".", "_").replace("-", "_");

    auto headerBase = "#include <" ~ include ~ ">\n";
    auto headerName = ".obj/cimport." ~ modName ~ ".h";

    // Assume system headers don't change.
    // TODO: Is this legitimate? Can we timestamp the includes?
    auto outputName = "$(headerName).out";
    if (!outputName.exists) {
        import std.file : rename;
        headerName.write(headerBase);
        auto tmpName = "$(headerName).out.tmp";
        string cmd = "gcc $(flags) -dD -E $headerName > $tmpName";
        print("\$ " ~ cmd);
        neat_runtime_system(cmd);
        tmpName.rename(outputName);
    }
    mut string csource = read(outputName);
    // do not count references on the file source - it will end
    // up with lots of small inc/decs to fragments that we never free anyway
    (cast(size_t*) &csource)[2] = 0;

    auto cparser = compiler.createParser(headerName ~ ".out", csource)?;
    auto cparserHelper = new CParserHelper(cparser, compiler);

    auto pak = new Package("c_header", "", []);
    cparserHelper.mod = compiler.astModule(modName, pak, new MacroState, cparser.loc, null);

    void add(string name, (ASTExternFunctionBase | ASTSymbol) symbol) {
        if (false)
            symbol.case {
                ASTExternFunctionBase ex:
                    print("define " ~ ex.name ~ ": " ~ ex.repr);
                ASTSymbol sym:
                    if (compiler.destructAstNumberLiteral(sym) == :else) {
                        print("define " ~ name ~ " = " ~ sym.repr);
                    }
            }
        symbol.case {
            ASTExternFunctionBase a:
                cparserHelper.mod.addEntry(Protection.public_, a);
            ASTSymbol sym: {
                if (!cparserHelper.mod.getSymbolAlias(name)) {
                    cparserHelper.mod.addAliasDecl(name, Protection.public_, sym);
                }
            }
        }
    }

    (void | Error) eatAttribute() {
        while (cparser.acceptIdentifier("__attribute__")) {
            cparser.acceptToken(TokenType.lparen); cparser.acceptToken(TokenType.lparen);
            mut int parenlevel = 2;
            while (parenlevel) {
                if (cparser.acceptToken(TokenType.lparen))
                    parenlevel++;
                else if (cparser.acceptToken(TokenType.rparen))
                    parenlevel--;
                else if (!cparser.hard_eof)
                    cparser.dropToken;
                else return cparser.fail("paren imbalance");
            }
        }
    }

    string acceptString() {
        if (!cparser.acceptToken(TokenType.doubleQuote)) return "";
        auto ret = cparser.acceptTokenStr(TokenType.stringLiteral).case(:none: "");
        cparser.acceptToken(TokenType.doubleQuote);
        return ret;
    }
    bool acceptCmdLineSep() with (cparser.transaction) {
        if (!cparser.acceptToken(TokenType.hash)
            || cparser.acceptTokenStr(TokenType.number).(that != "0" && that != "1")
            || acceptString != "<command-line>")
            return false;
        commit;
        return true;
    }
    while (!cparser.eof) {
        // print("> $(cparser.remainingText[0 .. 100])");
        if (!cparserHelper.sysmod && acceptCmdLineSep) {
            // start of actual include
            cparserHelper.sysmod = cparserHelper.mod;
            cparserHelper.mod = compiler.astModule(modName, pak, new MacroState, cparser.loc, null);
        }
        if (cparser.acceptToken(TokenType.hash)) {
            if (cparser.acceptIdentifier("define")) {
                auto identifier = cparser.parseIdentifier;
                cparser.begin;
                if (cparser.acceptToken(TokenType.lparen)) { cparser.revert; cparser.eatline; continue; }
                auto from = cparser.loc;
                auto target = cparserHelper.parseCExprLeaf?;
                if (!target || cparser.peekToken(TokenType.comma)) { // comma expression?!
                    cparser.revert;
                    cparser.eatline;
                    continue;
                }
                // print("add define $identifier = $(target.repr)");
                add(identifier, target? else die);
                cparser.commit;
                // cparser.assert_(cparser.loc.from.column == 0, "unknown text")?;
                // cparser.expect("\n");
                continue;
            }
            cparser.eatline;
            continue;
        }
        if (cparser.acceptIdentifier("typedef")) {
            auto type = cparserHelper.parseType?? else ({
                cparser.eatline;
                continue;
            });
            auto decl = cparserHelper.parseTypedDecl(type)?;
            auto declType = decl.type? else ({ cparser.eatline; continue; });
            eatAttribute?;
            if (!cparser.acceptToken(TokenType.semicolon)) { cparser.eatline; continue; }
            add(decl.name, declType);
            continue;
        }
        // match struct foo { }; as "foo"
        if (cparser.acceptIdentifier("struct")) {
            auto pair = cparserHelper.parseStructType?;
            if (!pair.type) { cparser.eatline; continue; }
            add(pair.name, pair.type);
            continue;
        }
        if (cparser.acceptIdentifier("union")) {
            auto pair = cparserHelper.parseStructType(union_=true)?;
            if (!pair.type) { cparser.eatline; continue; }
            add(pair.name, pair.type);
            continue;
        }
        if (cparser.acceptIdentifier("enum")) {
            auto type = cparserHelper.parseEnumType?;
            if (!type) { cparser.eatline; continue; }
            continue;
        }
        cparser.acceptIdentifier("extern");
        eatAttribute?;
        cparser.acceptIdentifier("extern");
        {
            (bool | Error) closeFunction() {
                if (!cparser.acceptToken(TokenType.rparen)) return false;
                eatAttribute?;
                return cparser.acceptToken(TokenType.semicolon);
            }
            auto start = cparser.loc;
            cparser.begin;
            if (auto retBase = cparserHelper.parseType?) {
                auto retDecl = cparserHelper.parseTypedDecl(retBase)?;
                if (retDecl.type && retDecl.name.length > 0
                    && cparser.acceptToken(TokenType.lparen)
                ) {
                    mut ASTParameter[] params;
                    mut bool success;
                    while (true) {
                        if (closeFunction?) {
                            cparser.commit;
                            if (params.length == 1) {
                                auto first = compiler.destructAstIdentifier(params[0].type)? else "";
                                if (first == "void") {
                                    params = [];
                                }
                            }
                            add(retDecl.name, compiler.astExternFunction(
                                retDecl.name, retDecl.type? else die, params, variadic=false, start));
                            success = true;
                            break;
                        }
                        if (params.length && !cparser.acceptToken(TokenType.comma)) break;
                        auto argloc = cparser.loc;
                        if (auto argBasetype = cparserHelper.parseType?) {
                            auto argDecl = cparserHelper.parseTypedDecl(argBasetype)?;
                            auto argDeclType = argDecl.type? else break;
                            params ~= ASTParameter(
                                argDecl.name, false,
                                type=argDeclType,
                                defaultValue=null,
                                argloc);
                        } else break;
                    }
                    if (success) continue;
                    // print("fail " ~ retDecl.name ~ ": " ~ cparser.text[0 .. 100]);
                }
            }
            // cparser.assert_(false, "here 2?")?;
            cparser.revert;
        }
        // cparser.assert_(false, "here?")?;
        cparser.eatline;
    }

    return cparserHelper.mod;
}

void eatline(Parser parser) {
    while (!parser.hard_eof) {
        if (parser.peekToken(TokenType.whitespace)) {
            auto ws = parser.acceptTokenStr(TokenType.whitespace).case(:none: die);
            if (ws.find("\n") != -1) {
                return;
            }
            continue;
        }
        parser.dropToken;
    }
}

class CLong : ASTSymbol
{
    this() { }

    override (Type | Error) compile(Context context) {
        // FIXME this does not apply on win32
        return context.nativeWordType;
    }

    override string repr() { return "long int(C)"; }
}

class ASTCStaticArray : ASTSymbol
{
    ASTSymbol type;

    int count;

    this(this.type, this.count, this.locRange=__CALLER__) { }

    override (Type | Error) compile(Context context) {
        (Type | Error) beType(Symbol symbol, LocRange locRange) {
            if (auto type = symbol.instanceOf(Type))
                return type;
            return locRange.fail("type expected");
        }

        // TODO give this a better type
        mut StructMemberDeclaration[] members;
        for (i in 0 .. count)
            members ~= new StructMemberDeclaration(
                "_" ~ ltoa(i), Protection.public_, type.compile(context)?.beType(this.locRange)?);

        return context.compiler.struct_("SA_hack", members, this.locRange, context.namespace.mangle);
    }

    override string repr() { return type.repr ~ "[" ~ itoa(count) ~ "](C)"; }
}

class CParserHelper {
    Parser parser;

    CompilerBase compiler;

    mut ASTModuleBase mod, sysmod;

    this(this.parser, this.compiler) { }

    (nullable ASTSymbol | Error) parseType() {
        parser.acceptIdentifier("const");
        if (auto ret = parseBasicCType?) {
            return ret;
        }
        auto ident = parser.parseIdentifier;
        if (ident == "struct") {
            auto ret = parseStructType?;
            return ret.type;
        }
        if (ident == "union") {
            auto ret = parseStructType(union_=true)?;
            return ret.type;
        }
        if (ident == "enum") {
            return parseEnumType?;
        }
        if (ident.length > 0) {
            if (auto definedSym = this.mod.getSymbolAlias(ident)) return definedSym;
            // FIXME
            if (this.sysmod)
                if (auto definedSym = this.sysmod.getSymbolAlias(ident)) return definedSym;
            // print("No such ident " ~ ident);
        }
        return null;
    }

    (nullable ASTSymbol type, string name | Error) parseTypedDecl(ASTSymbol baseType) {
        mut auto current = baseType;
        assert(!!current);
        auto start = parser.loc;
        while (true) {
            if (parser.acceptToken(TokenType.asterisk))
            {
                current = compiler.astPointer(current, parser.loc);
                parser.acceptIdentifier("const");
                parser.acceptIdentifier("restrict");
                parser.acceptIdentifier("__restrict");
                continue;
            }
            if (parser.acceptToken2(TokenType.lsquarebracket, TokenType.rsquarebracket))
            {
                current = new ASTCArray(current, parser.loc);
                parser.acceptIdentifier("const");
                parser.acceptIdentifier("restrict");
                parser.acceptIdentifier("__restrict");
                continue;
            }
            // function pointer

            parser.begin;
            if (parser.acceptToken(TokenType.lparen) && parser.acceptToken(TokenType.asterisk)) {
                auto name = parser.parseIdentifier;
                // I fucking hate C type syntax. No arrays of function pointers for you.
                if (!parser.acceptToken(TokenType.rparen)) {
                    parser.revert;
                    return (null, "");
                }
                if (!parser.acceptToken(TokenType.lparen)) {
                    parser.revert;
                    return (null, "");
                }
                mut ASTSymbol[] params;
                while (!parser.acceptToken(TokenType.rparen)) {
                    if (params.length) parser.expectToken(TokenType.comma)?;
                    auto argtype = parseType?? else ({
                        parser.revert;
                        return (null, "");
                    });
                    auto arg = parseTypedDecl(argtype)?;
                    auto paramType = arg.type? else ({
                        parser.revert;
                        return (null, "");
                    });
                    params ~= paramType;
                }
                if (params.length == 1) {
                    if (compiler.destructAstIdentifier(params[0])? == "void") {
                        params = [];
                    }
                }
                parser.commit;
                return (compiler.astFunctionPointer(current, params, start), name);
            }
            parser.revert;
            break;
        }
        // name can be empty!
        with (parser.transaction) {
            auto name = parser.parseIdentifier;
            auto start = parser.loc;
            while (parser.acceptToken(TokenType.lsquarebracket)) {
                if (parser.acceptToken(TokenType.rsquarebracket)) {
                    current = new ASTCArray(current, parser.loc);
                    continue;
                }
                mut int num;
                auto cn = parseCNumber?;
                // TODO if ((:success, int i) <- parseCNumber?)
                if (cn.case(:failure: false, (:success, long): true)) {
                    num = cn.case(:failure: 0, (:success, long l): cast(int) l);
                } else if (
                    parser.accept("sizeof(void *) <= 8 ? 56 : sizeof(void *) == 16 ? 64 : 3 * sizeof(void *)")) {
                    // Jesus Christ, SDL, what the fuck.
                    // TODO full C expression parser, apparently
                    num = 64;
                } else {
                    return (null, "");
                }
                // parser.expectToken(TokenType.rsquarebracket)?;
                if (!parser.acceptToken(TokenType.rsquarebracket)) return (null, "");
                current = new ASTCStaticArray(current, num, start);
            }
            commit;
            return (current, name);
        }
    }

    (nullable ASTSymbol | Error) parseBasicCType() {
        with (parser) {
            begin;
            auto type = parser.parseIdentifier;
            if (type == "void") { commit; return ident("void"); }
            if (type == "float") { commit; return ident("float"); }
            if (type == "double") { commit; return ident("double"); }
            if (type == "_Bool") { commit; return ident("bool"); }
            revert;
            begin;
            mut bool signed, unsigned, long_, longlong, short_, char_, int_;
            while (true) {
                begin;
                auto part = parser.parseIdentifier;
                if (part == "signed") { commit; signed = true; continue; }
                if (part == "unsigned") { commit; unsigned = true; continue; }
                if (part == "long") {
                    commit;
                    long_ = true;
                    if (parser.acceptIdentifier("long")) longlong = true;
                    continue;
                }
                if (part == "short") { commit; short_ = true; continue; }
                if (part == "char") { commit; char_ = true; continue; }
                if (part == "int") { commit; int_ = true; continue; }
                revert;
                break;
            }
            if (longlong) { commit; return ident("long"); }
            if (long_) { commit; return new CLong; }
            if (short_) { commit; return ident("short"); }
            if (char_) { commit; return ident("char"); }
            if (signed || unsigned || int_) { commit; return ident("int"); }
            revert;
            return null;
        }
    }

    (ASTSymbol type, string name | Error) parseStructType(bool union_=false) {
        auto start = parser.loc;
        auto name = parser.parseIdentifier;
        mut ASTStructMember mut[] members;
        auto emptyStruct = new ASTDeclSym(compiler.astStructDecl(name, [], externC=true, start)); // opaque
        if (!parser.acceptToken(TokenType.lcurlybracket)) {
            return (new ASTFallbackIdentifier(name, emptyStruct), name);
        }
        void scanToClosingBracket() {
            mut int bracketDepth = 1;
            // TODO factor out with () skipping
            while (bracketDepth) {
                if (parser.acceptToken(TokenType.lcurlybracket))
                    bracketDepth++;
                else if (parser.acceptToken(TokenType.rcurlybracket))
                    bracketDepth--;
                else if (!parser.hard_eof)
                    parser.dropToken;
                else return;
            }
        }
        while (!parser.acceptToken(TokenType.rcurlybracket)) {
            parser.begin;
            // #defines inside structs happen occasionally
            if (parser.accept("#define ")) { parser.eatline; parser.commit; continue; }
            // line number annotation
            if (parser.accept("# ")) { parser.eatline; parser.commit; continue; }
            auto baseType = parseType?? else ({
                parser.revert;
                scanToClosingBracket;
                return (emptyStruct, name);
            });
            mut auto memberDecl = parseTypedDecl(baseType)?;
            void flush() {
                members ~= (memberDecl.name, Protection.public_, memberDecl.type? else die, null);
            }
            while (parser.acceptToken(TokenType.comma)) {
                if (!memberDecl.type) { parser.revert; scanToClosingBracket; return (emptyStruct, name); }
                flush;
                memberDecl = parseTypedDecl(baseType)?;
            }
            if (!memberDecl.type) { parser.revert; scanToClosingBracket; return (emptyStruct, name); }
            flush;
            if (parser.acceptToken(TokenType.colon)) {
                // It's hopeless. Just try, I guess.
                parser.parseNumber?;
            }
            // parser.expectToken(TokenType.semicolon)?;
            if (!parser.acceptToken(TokenType.semicolon)) {
                parser.revert;
                scanToClosingBracket;
                return (emptyStruct, name);
            }
            parser.commit;
        }
        if (union_) {
            mut ASTUnionMember[] unionMembers;
            for (a in members) unionMembers ~= (a.name, a.type);
            return (compiler.astUnion(name, unionMembers, start), name);
        }
        if (members.length) {
            if (auto type = members[$ - 1].type.instanceOf(ASTCArray)) {
                members[$ - 1].type = new ASTCStaticArray(type.target, 0, type.locRange);
            }
        }
        return (new ASTDeclSym(compiler.astStructDecl(name, members.freeze, externC=true, start)), name);
    }

    (nullable ASTSymbol | Error) parseEnumType() {
        // TODO export enum members as aliases
        auto start = parser.loc;
        parser.parseIdentifier;
        if (!parser.acceptToken(TokenType.lcurlybracket)) return null; // wat
        mut long lastNum = -1;
        while (true) {
            auto name = parser.parseIdentifier;
            if (!name.length) break;
            if (parser.acceptToken(TokenType.equal)) {
                auto num = parseCNumber?;
                num.case {
                    (:failure): break;
                    (:success, long l): {
                        if (!mod.getSymbolAlias(name))
                            mod.addAliasDecl(name, Protection.public_, compiler.astNumberLiteral(l, start));
                        lastNum = l;
                    }
                }
            } else {
                if (!mod.getSymbolAlias(name))
                    mod.addAliasDecl(name, Protection.public_, compiler.astNumberLiteral(lastNum + 1, start));
                lastNum++;
            }
            parser.acceptToken(TokenType.comma);
            // #defines inside enums happen occasionally. TODO actually do something with them.
            if (parser.accept("#define ")) parser.eatline;
        }
        while (!parser.acceptToken(TokenType.rcurlybracket))
            parser.dropToken;
        return ident("int");
    }

    (nullable ASTSymbol | Error) parseCExprLeaf() {
        auto from = parser.loc;
        auto num = parseCNumber?;
        num.case {
            (:failure): { }
            (:success, long l): return compiler.astNumberLiteral(l, parser.to(from));
        }
        // avoid stripping newline here
        // TODO native parser functions that do C include matching
        if (parser.peekToken(TokenType.identifier)) {
            if (auto name = parser.parseIdentifier) {
                return compiler.astIdentifier(name, parser.to(from));
            }
        }
        return null;
    }

    (:failure | :success, long | Error) parseCNumber() {
        import package(compiler).neat.parser : parseHexNumber;
        import std.string : endsWith;

        with (parser) {
            begin;
            bool negative = acceptToken(TokenType.minus);
            mut long num;
            auto number = parser.acceptTokenStr(TokenType.number)
                .case(:none: ({ revert; return :failure; }));
            if (number == "0") {
                // check for 0x...
                mut string ident = acceptTokenStr(TokenType.identifier).case(:none: "");
                // weird C shit
                if (ident.endsWith("e") || ident.endsWith("E")) {
                    revert;
                    return :failure;
                }
                while (ident.endsWith("u") || ident.endsWith("U") || ident.endsWith("l") || ident.endsWith("L"))
                    ident = ident[0 .. $ - 1];
                if (ident.startsWith("x")) {
                    parseHexNumber(ident[1 .. $], negative).case {
                        :failure:
                            revert;
                            return :failure;
                        (:success, long value):
                            commit;
                            return (:success, value);
                    }
                }
            }
            commit;
            mut long l = atol(number);
            if (negative) l = -l;
            return (:success, l);
        }
    }

    ASTSymbol ident(string name) {
        return compiler.astIdentifier(name);
    }
}

// Behaves like a pointer but allows recognizing if it's the last field in a struct
// (that's a "trailing array")
class ASTCArray : ASTSymbol
{
    ASTSymbol target;
    this(this.target, this.locRange=__CALLER__) {}
    override (Symbol | Error) compile(Context context) {
        auto ptr = context.compiler.astPointer(target, this.locRange);
        return ptr.compile(context);
    }
    override string repr() => this.target.repr ~ "[]";
}

// the reason for this is we see `typedef struct Foo_ Foo` before we see `struct Foo_` -
// but sometimes we don't see `struct Foo_` at all; in that case we treat it as `struct {}`.
class ASTFallbackIdentifier : ASTSymbol
{
    string name;
    ASTSymbol emptyStruct;
    this(this.name, this.emptyStruct) {}
    override (Symbol | Error) compile(Context context) {
        if (auto res = context.namespace.lookup(this.name, context, LookupReason.identifier, __RANGE__)?) {
            if (res.instanceOf(Type)) return res;
        }
        return this.emptyStruct.compile(context);
    }
}

class ASTDeclSym : ASTSymbol
{
    ASTSymbolDeclaration decl;
    this(this.decl) { }
    override (Symbol | Error) compile(Context context)
        => this.decl.compileSymbol(context)?;
}

void addCImportMacro(MacroState macroState)
{
    macroState.addMacro(new CImportMacro);
}

macro(addCImportMacro);
