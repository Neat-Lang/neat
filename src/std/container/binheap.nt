module std.container.binheap;

// TODO macro import in function, import in unittest
macro import std.macro.assert;
macro import std.macro.listcomprehension;

public BinHeap!T binHeap(T, Heapier)(Heapier heapier) {
    return new BinHeapImpl!(T, Heapier)(heapier);
}

public interface BinHeap(T) {
    void insert(T t);
    T extract();
    bool empty();
    size_t length();
}

class BinHeapImpl(T, Heapier) : BinHeap!T {
    private T mut[] backing;
    private Heapier heapier;

    this(this.heapier) { }

    override void insert(T t) {
        mut size_t index = backing.length;
        backing ~= t;
        while (bubbleUp(index)) index = index.up;
    }

    override T extract() {
        swap(0, backing.length - 1);
        auto res = backing[$ - 1];
        backing = backing[0 .. $ - 1];
        bubbleDown(0);
        return res;
    }

    override bool empty() => backing.empty;

    override size_t length() => backing.length;

    private bool heapierIndex(size_t left, size_t right) {
        return heapier(backing[left], backing[right]);
    }

    private void swap(size_t left, size_t right) {
        auto v = backing[left];
        backing[left] = backing[right];
        backing[right] = v;
    }

    private bool bubbleUp(size_t i) {
        if (i.isRoot || heapierIndex(i.up, i))
            return false;
        swap(i.up, i);
        return true;
    }

    private void bubbleDown(size_t index) {
        bool leftViolated = index.left < backing.length
            && heapierIndex(index.left, index);
        bool rightViolated = index.right < backing.length
            && heapierIndex(index.right, index);
        if (!leftViolated && !rightViolated) {
            return;
        } else if (leftViolated && !rightViolated) {
            swap(index, index.left);
            bubbleDown(index.left);
        } else if (!leftViolated && rightViolated) {
            swap(index, index.right);
            bubbleDown(index.right);
        } else {
            // swap the heapier one to 'index', thus protecting the
            // heap condition in the less heapy branch
            auto leftHeapier = heapierIndex(index.left, index.right);
            size_t target = index.left if leftHeapier else index.right;
            swap(index, target);
            bubbleDown(target);
        }
    }
}

/**
 *        0
 *    1       2
 *  3   4   5   6
 * 7 8 9
 */

private bool isRoot(size_t i) => i == 0;

private size_t up(size_t i) => (i - 1) / 2;

private size_t left(size_t i) => i * 2 + 1;

private size_t right(size_t i) => i * 2 + 2;

unittest
{
    assert([i.isRoot for i in 0 .. 10]
        == [true, false, false, false, false, false, false, false, false, false]);
    assert([i.up for i in 1 .. 10]
        == [0, 0, 1, 1, 2, 2, 3, 3, 4]);
    assert([i.left for i in 0 .. 4]
        == [1, 3, 5, 7]);
    assert([i.right for i in 0 .. 4]
        == [2, 4, 6, 8]);
}
