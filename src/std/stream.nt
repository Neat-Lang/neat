module std.stream;

import std.error;

/**
 * Source of a stream of `T`. This data type represents the ability to request
 * a succession of values. As opposed to ranges, it is not possible to back up
 * your position in the stream.
 * Furthermore, if it is a reference type, you should not hold on to the returned
 * value past the next call to `get()`.
 * Returns `:else` if the end of the stream is reached.
 * Returns `Error` if an error happened.
 */
interface Source(T)
{
    (T | :else | Error) get();
}

/**
 * Sink for a stream of `T`. This data type represents the ability to dispatch
 * a succession of values.
 * Returns `Error` if an error happened.
 */
interface Sink(T)
{
    (void | Error) put(T);
}

class ArraySource(T) : Source!T
{
    T[] array;

    this(T[] array) { this.array = array; }

    override (T | :else | Error) get() {
        if (array.empty)
            return :else;
        auto result = array[0];
        array = array[1 .. $];
        return result;
    }
}

class ArraySink(T) : Sink!T
{
    T[] array_;

    this() { }

    public T[] array() => array_;

    override (void | Error) put(T value) {
        array_ ~= value;
    }
}
