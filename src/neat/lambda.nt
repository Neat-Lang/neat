module neat.lambda;

macro import package(compiler).std.macro.listcomprehension;
macro import package(compiler).std.macro.once;

import backend.base;
import neat.base;
import neat.delegate_;
import neat.function_;
import neat.hash;
import neat.heap_closures;
import neat.parser;
import neat.runtime;
import neat.statements;
import neat.templ;
import neat.types;
import neat.util;

class Lambda : Type
{
    TemplateDecl decl;

    string mangle_;

    string repr_;

    nullable Returnable containingReturnable;

    bool copyable;

    this(this.decl, this.mangle_, this.repr_, this.containingReturnable, this.copyable) {
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) {
        return once (new Pointer(new Void)).emit(platform);
    }

    override (nullable Expression | fail Error) callExpr(
        Context context, LocRange locRange, Expression base, ASTArgument[] args)
    {
        auto scopeTempl = reconstructScopeTempl(context, base);
        // Instantiate with `args`' types
        Expression[] argExprs = [
            arg.sym.compile(context)?.beExpressionImplCall(context, locRange)? for arg in args];
        auto instance = scopeTempl.instantiate(context, locRange, [arg.type for arg in argExprs])?;
        // call(`args`)
        return context.compiler.call(context, new ASTSymbolHelper(instance), args, locRange, isImplCall=true);
    }

    override bool same(Type other) {
        if (auto otherLambda = other.instanceOf(Lambda)) {
            return this.decl.same(otherLambda.decl);
        }
        return false;
    }

    override (nullable Expression | fail Error) implicitConvertTo(
        Context context, Expression source, Type target, LocRange locRange)
    {
        import neat.expr : DelegateExpr;

        auto delegateType = target.instanceOf(Delegate).case(null: return null);
        (nullable Expression | fail Error) do_(Expression source) {
            auto scopeTempl = reconstructScopeTempl(context, source);
            // TODO locRange, fail Error from implicitConvertTo
            auto instance = scopeTempl.instantiate(context, __RANGE__, delegateType.params)?;
            auto lateSym = instance.instanceOf(LateSymbol)
                .case(null: return __RANGE__.fail("Internal error: Lambda didn't instantiate to LateSymbol."));
            auto resolved = lateSym.resolve(context);
            return new DelegateExpr(resolved.funcPtr, source, copyable=this.copyable);
        }
        bottom die(Error e) {
            import c.stdlib : exit;
            print("Error $(e.msg) in implicitConvertTo! TODO LocRange and fail Error");
            exit(1);
        }
        return context.compiler.exprWithTemporaryExpr(context.getUniqueId, source, &do_)
            .case(Error e: return die(e))
            .(that? else .die);
    }

    private ScopeBoundTemplateDecl reconstructScopeTempl(Context context, Expression base) {
        // Reconstruct a ScopeBoundTemplateDecl using `base`
        auto voidpp = once new Pointer(new Pointer(new Void));
        auto baseAsPtr = new PointerCast(voidpp, base);
        auto mungedBase = context.compiler.(pointerOffset(baseAsPtr, intLiteral(2)));
        return new ScopeBoundTemplateDecl(this.decl, mungedBase);
    }

    // as with delegate
    override (Expression | fail Error) copy(Context context, Expression source, LocRange locRange) {
        import neat.runtime : die;
        // covered by lambda quarantining
        if (!copyable) return source;
        (nullable Expression | fail Error) do_(Expression source) {
            return context.compiler.statementExpression(
                context.compiler.exprStatement(
                    context.compiler.simpleCall(
                        context, "neat_runtime_class_refcount_inc", new Void, [source], __RANGE__)),
                source);
        }
        return context.compiler.exprWithTemporaryExpr(context.getUniqueId, source, &do_)
            .case(Error: die).case(null: die);
    }

    override nullable Statement endLifetime(Context context, Expression value) {
        // covered by lambda quarantining
        if (!copyable) return null;
        return context.compiler.exprStatement(
            context.compiler.simpleCall(context, "neat_runtime_class_refcount_dec", new Void, [value], __RANGE__));
    }

    override QuarantinePolicy quarantinePolicy() {
        // FIXME make `a if b else c` merge a and c
        (:checked | :harmless) value() {
            if (copyable) return :harmless;
            return :checked;
        }
        return QuarantinePolicy(container=:occluded, value=value);
    }

    override (void | fail Error) checkQuarantine(Context context, LocRange locRange, QuarantineReason reason) {
        if (auto containingReturnable = this.containingReturnable) {
            context.assert2(reason.returnable != containingReturnable || copyable, locRange
                "cannot return scoped lambda from function where it was declared")?;
        }
    }

    override string mangle() => mangle_;

    override string repr() {
        return "typeof($(this.repr_))";
    }

    override void hash(Hash hash) {
        hash.adds("lambda");
        hash.adds(this.decl.mangle);
    }
}

class LambdaExpr : Expression
{
    bool heapAlloc;

    ScopeBoundTemplateDecl templ;

    string repr_;

    this(this.templ, string mangle, this.repr_, nullable Returnable returnable, this.heapAlloc) {
        if (templ.frame) {
            // FIXME nullable interface null comparison
            assert(cast(void*) returnable !is null);
        }
        this.type = new Lambda(this.templ.latent, mangle_=mangle, this.repr_, returnable, copyable=heapAlloc);
        if (heapAlloc)
            // allocated with one ref
            this.info = ExprInfo(Lifetime.gifted);
        else
            this.info = ExprInfo(Lifetime.lexical);
    }

    override int emit(Generator output) {
        mut int reg = this.templ.frame.emit(output);
        if (!heapAlloc) {
            auto voidpp = new BackendPointerType(
                new BackendPointerType(new BackendVoidType, output.platform),
                output.platform);
            reg = output.fun.ptrOffset(voidpp, reg, output.fun.intLiteral(-2));
        }

        return output.fun.bitcast(reg, this.type.emit(output.platform));
    }
    override string repr() {
        return this.repr_;
    }
    override void hash(Hash hash) {
        hash.adds("lambdaexpr");
        hash.adds(this.templ.latent.mangle);
        this.templ.frame.hash(hash);
    }
}

class ASTLambdaExpr : ASTSymbol
{
    bool heapAlloc;

    string[] paramNames;

    ASTStatement stmt;

    MacroState macroState;

    // so the template decl can be declared to depend on our module parse
    string moduleParseTaskId;

    this(this.heapAlloc, this.paramNames, this.stmt, this.macroState, this.locRange, this.moduleParseTaskId) { }

    override (Symbol | fail Error) compile(Context context) {
        /**
         * ({
         *     template lambda__(T, U) {
         *          auto lambda__(T $paramName, U ...) {
         *              $stmt;
         *          }
         *      }
         *      __lambda(lambda__);
         * })
         */
        // Hax: Every compilation is unique!
        string label = context.getLabel;
        string lambdaName = "__lambda_$(this.locRange.from.row)_$(label)";
        string lambdaTypeMangle = "$(context.namespace.mangle)_lambda_$(this.locRange.from.row)_$(label)";
        auto astParameters = [
            ASTParameter(
                paramName,
                mutable=false,
                type=new ASTIdentifier("T$i", false, __RANGE__),
                defaultValue=null,
                __RANGE__)
            for i, paramName in this.paramNames];
        auto lambdaNameSym = new ASTIdentifier(lambdaName, false, __RANGE__);
        auto lambdaFun = new ASTFunction(
            lambdaNameSym, :auto_, astParameters,
            isDeclaration=false, __RANGE__, statement=this.stmt, this.macroState, null);
        auto astTemplateDecl = new ASTTemplateDecl(
            lambdaNameSym, ["T$i" for i, _ in paramNames], lambdaFun, comment="",
            moduleParseTaskId=this.moduleParseTaskId);
        (nullable Expression | fail Error) framePointer() {
            if (heapAlloc)
                return heapAllocateStackframe(context, lambdaName, this.locRange)?;
            else
                return context.framePointer;
        }
        auto templateDecl = new ScopeBoundTemplateDecl(
            new TemplateDecl(context.namespace, astTemplateDecl),
            framePointer?);
        string repr() {
            if (paramNames.length == 1) return "$(paramNames[0]) $(this.stmt.repr)";
            string paramList = [join with ", " name for name in paramNames];
            return "($paramList) $(this.stmt.repr)";
        }

        nullable Returnable returnable = context.namespace.findParent!Returnable;

        return new LambdaExpr(templateDecl, mangle=lambdaTypeMangle, repr, returnable=returnable, heapAlloc=heapAlloc);
    }
}

(nullable ASTSymbol | fail Error) parseLambdaExpression(ParserImpl parser, LexicalContext lexicalContext,
    bool heapAlloc)
{
    parser.begin;
    auto from = parser.from;
    mut string[] args;
    mut uninitialized bool allowStmtForm;
    if (parser.acceptToken(TokenType.lparen)) {
        while (!parser.acceptToken(TokenType.rparen)) {
            if (!args.empty && !parser.acceptToken(TokenType.comma)) {
                parser.revert;
                return null;
            }
            auto arg = parser.parseIdentifier;
            if (!arg.length) {
                parser.revert;
                return null;
            }
            args ~= arg;
        }
        allowStmtForm = true;
    } else {
        auto arg = parser.parseIdentifier;
        if (!arg.length) {
            parser.revert;
            return null;
        }
        args ~= arg;
        allowStmtForm = false;
    }
    parser.strip;
    (nullable ASTStatement | fail Error) parseBody() {
        if (allowStmtForm && parser.peekToken(TokenType.lcurlybracket)) {
            auto locRange = parser.to(from);
            auto stmt = lexicalContext.compiler.parseStatement(parser, lexicalContext)?;
            locRange.assert(!!stmt, () => "lambda statement expected")?;
            return stmt;
        } else if (parser.acceptToken2(TokenType.equal, TokenType.greater)) {
            auto locRange = parser.to(from);
            auto expr = lexicalContext.compiler.parseExpression(parser, lexicalContext)??
                else return locRange.fail("lambda expression expected");
            return lexicalContext.compiler.(
                astExpressionStmt(astReturn(expr, expr.locRange), expr.locRange));
        } else {
            parser.revert;
            return null;
        }
    }
    auto stmt = parseBody?.case(null: return null);
    parser.commit;
    return new ASTLambdaExpr(
        heapAlloc=heapAlloc, args, stmt, lexicalContext.macroState, parser.to(from),
        moduleParseTaskId=lexicalContext.moduleParseTaskId);
}
