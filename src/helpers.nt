module helpers;

public import neat.runtime : assert, atoi, atof, atol, dtoa_hex, itoa, ftoa, ltoa;

extern(C) void* memcpy(void* target, void* source, size_t length);
extern(C) void free(void*);
extern(C) int access(char* pathname, int mode);
extern(C) void* fopen(char* pathname, char* mode);
extern(C) int fseek(void* stream, size_t offset, int whence);
extern(C) size_t ftell(void* stream);
extern(C) size_t fread(void* ptr, size_t size, size_t nmemb, void* stream);
extern(C) size_t fwrite(void* ptr, size_t size, size_t nmemb, void* stream);
extern(C) int fclose(void* stream);
extern(C) void* malloc(size_t size);

char* toStringz(string s) {
    char* ret = cast(char*) malloc(s.length + 1);
    memcpy(ret, s.ptr, s.length);
    ret[s.length] = "\0"[0];
    return ret;
}

string ptrId(void* ptr) {
    import neat.runtime.stdlib : snprintf;

    int len = snprintf(null, 0, "%p".ptr, ptr);
    string res = new string(len + 1);
    return res[0 .. snprintf(res.ptr, res.length, "%p".ptr, ptr)];
}


int find(string text, string match) {
    if (text.length < match.length) {
        return -1;
    }
    for (i in 0 .. text.length - match.length + 1)
        if (text[i .. i + match.length] == match) return cast(int) i;
    return -1;
}

string[] split(mut string text, string sep) {
    mut string[] result;
    while (true) {
        int pos = find(text, sep);
        if (pos == -1) {
            result ~= text;
            return result;
        }
        result ~= text[0 .. pos];
        text = text[pos + sep.length .. $];
    }
}

string join(string[] array, string sep) {
    mut string result;
    for (i, element in array) {
        if (i > 0) result ~= sep;
        result ~= element;
    }
    return result;
}

bool exists(string file) {
    auto fn = toStringz(file);
    int F_OK = 0;
    bool ret = access(fn, F_OK) != -1;
    free(fn);
    return ret;
}

alias SEEK_SET = 0;
alias SEEK_END = 2;

string read(string file) {
    // thanks,
    // https://stackoverflow.com/questions/14002954/c-programming-how-to-read-the-whole-file-contents-into-a-buffer
    char* fn = toStringz(file);
    void* f = fopen(fn, "rb");
    fseek(f, 0, SEEK_END);
    size_t fsize = cast(size_t) ftell(f);
    fseek(f, 0, SEEK_SET);  /* same as rewind(f); */

    char[] buffer = new char[](fsize);
    fread(buffer.ptr, 1, fsize, f);
    fclose(f);
    free(fn);

    return buffer;
}

void write(string file, string content) {
    char* fn = toStringz(file);
    char* wb = toStringz("wb");
    void* f = fopen(fn, wb);
    free(wb);
    fwrite(content.ptr, 1, content.length, f);
    fclose(f);
    free(fn);
}
