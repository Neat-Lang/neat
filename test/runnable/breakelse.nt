module breakelse;

macro import std.macro.assert;

void basetest() {
    void check((bool | :test) value, bool ifTaken) {
        if (bool b = value.case(:test: breakelse)) {
            assert(ifTaken);
        } else {
            assert(!ifTaken);
        }

        if (bool b = value.case(:test: breakelse)) {
            assert(ifTaken);
            return;
        }
        assert(!ifTaken);
    }
    check(value=false, ifTaken=false);
    check(value=true, ifTaken=true);
    check(value=:test, ifTaken=false);
}

void findtest() {
    (size_t | :else) find(string text, string marker) {
        for (mut size_t i = 0; i <= text.length - marker.length; i++) {
            if (text[i .. i + marker.length] == marker)
                return i;
        }
        return :else;
    }

    if (size_t pos = "Helloworld".find("owo")?) {
        assert(pos == 4);
    } else {
        assert(false);
    }
    assert("Helloworld".find("owo").else(return) == 4);
}

void main() {
    basetest;
    findtest;
}
