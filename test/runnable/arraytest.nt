module arraytest;

macro import std.macro.assert;

void main() {
    mut int[] arr;
    assert(arr.length == 0);
    // arr = [2, 3];
    arr = new int[](0) ~ 2 ~ 3;
    assert(arr.length == 2);
    assert(arr[1] == 3);
    arr = arr ~ 4; // [2, 3, 4]
    assert(arr.length == 3);
    assert(arr[2] == 4);
    arr = arr ~ (new int[](0) ~ 5); // [2, 3, 4, 5]
    assert(arr.length == 4);
    assert(arr[3] == 5);
    assert(arr == [2, 3, 4, 5]);
    assert(arr[$ - 1] == 5);
    assert(arr[0 .. $ - 1] == [2, 3, 4]);
    assert(arr[1 .. 3] == [3, 4]);
    assert(arr.ptr[1 .. 2] == arr[1 .. 2]);
    assert("Hello World"["Hello ".length .. "Hello World".length] == "World");
    int[] arr = [];
    {
        mut int count;
        int[] test() { count += 1; return [1, 2]; }
        assert(test()[$ - 1] == 2);
        assert(count == 1);
    }
    doublingTestArrElem();
    doublingTestArrArr();
    appendLoopTest();
    mutateDirectlyTest();
    castTest();
    // polysemous array literal
    float[] arr = [2, 3];
}

void doublingTestArrElem() {
    mut int[] a = [1, 2, 3, 4];
    a ~= 5;
    int[] a1 = a ~ 6;
    int[] a2 = a ~ 7;
    assert(a1 == [1, 2, 3, 4, 5, 6]);
    assert(a2 == [1, 2, 3, 4, 5, 7]);
    assert(a1.ptr is a.ptr);
    assert(a2.ptr !is a.ptr);
}

void doublingTestArrArr() {
    mut int[] a = [1, 2, 3, 4];
    a ~= [5];
    int[] a1 = a ~ [6];
    int[] a2 = a ~ [7];
    assert(a1 == [1, 2, 3, 4, 5, 6]);
    assert(a2 == [1, 2, 3, 4, 5, 7]);
    assert(a1.ptr is a.ptr);
    assert(a2.ptr !is a.ptr);
}

void appendLoopTest() {
    mut size_t[] ia;
    for (i in 0 .. 100) ia ~= i;
    for (i in 0 .. 100) assert(ia[i] == i);
}

void mutateDirectlyTest() {
    mut int mut[] ia;
    ia ~= 4;
    ia[0] = 5;
}

void castTest() {
    char[] foo = "A";
    ubyte[] bar = cast(ubyte[]) foo;
    assert(bar == [cast(ubyte) 65]);
    char[] baz = "ABCD";
    int[] ble = cast(int[]) baz;
    assert(ble == [1145258561]);
}
