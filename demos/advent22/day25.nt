module day25;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.stdio;

void main()
{
    auto sum = [sum a for a in stdin.byLine.map(a => decodeSnafu(a))];
    //print("sum is $sum, snafu $(sum.encodeSnafu)");
}

long decodeSnafu(string s) {
    mut long factor = 1;
    mut long res;
    for (i in 0 .. s.length) {
        res += factor * s[$ - 1 - i].case(
            '0': 0,
            '1': 1,
            '2': 2,
            '-': -1,
            '=': -2);
        factor *= 5;
    }
    return res;
}

string encodeSnafu(long l) {
    mut int digits = 1;
    while (l > decodeSnafu(['2' for i in 0 .. digits]) || l < decodeSnafu(['=' for i in 0 .. digits])) {
        digits ++;
    }
    char mut[] upper = cast(char mut[])['2' for i in 0 .. digits];
    char mut[] lower = cast(char mut[])['=' for i in 0 .. digits];
    for (digit in 0 .. digits) {
        bool test(char ch) {
            lower[digit] = ch;
            upper[digit] = ch;
            return l >= (cast(char [])lower).decodeSnafu && l <= (cast(char [])upper).decodeSnafu;
        }
        bottom die() assert(false);
        test('=') || test('-') || test('0') || test('1') || test('2') || die;
    }
    assert(cast(char [])lower == cast(char [])upper);
    return cast(char [])lower;
}
