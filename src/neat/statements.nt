module neat.statements;

macro import package(compiler).std.macro.once;

import backend.base;
import helpers;
import neat.base;
import neat.bottom;
import neat.expr;
import neat.util;
import polyhash;

class AssignStatement : Statement
{
    Reference target;

    Expression value;

    (LocRange | :none) locRange;

    this(this.target, this.value, this.locRange) {
        if (!target.type.same(value.type)) {
            print("internal error: cannot assign $(value.type.repr) to $(target.type.repr)");
            assert(false);
        }
    }

    override void emit(Generator output)
    {
        this.locRange.case {
            LocRange locRange:
                output.fun.setLocation(locRange.toBackendLoc(output.fileIdTable));
            :none: {}
        }
        Type valueType = this.value.type;
        int targetReg = this.target.emitLocation(output);
        int valueReg = this.value.emit(output);

        output.fun.store(valueType.emit(output.platform), targetReg, valueReg);
    }

    override void hash(Hash hash) { hash.adds("AssignStatement"); target.hash(hash); value.hash(hash); }
    override string repr() { return "$(target.repr) = $(value.repr);"; }
}

class ReturnStatement : Statement
{
    Expression value;

    (LocRange | :none) locRange;

    this(this.value, this.locRange) { }

    override void emit(Generator output)
    {
        this.locRange.case {
            LocRange locRange: output.fun.setLocation(locRange.toBackendLoc(output.fileIdTable));
            :none: {}
        }
        int reg = this.value.emit(output);

        output.fun.ret(reg);
        output.fun.setLabel(output.fun.getLabel);
    }

    override void hash(Hash hash) { hash.adds("ReturnStatement"); value.hash(hash); }
    override string repr() { return "return $(value.repr);"; }
}

class IfStatement : Statement
{
    Expression test;

    Statement then;

    nullable Statement else_;

    (LocRange | :none) locRange;

    this(this.test, this.then, this.else_, this.locRange) { }

    override void emit(Generator output)
    {
        this.locRange.case {
            LocRange locRange: output.fun.setLocation(locRange.toBackendLoc(output.fileIdTable));
            :none: {}
        }
        int reg = this.test.emit(output);

        string label = output.fun.getLabel;
        if (this.else_)
            output.fun.testBranch(reg, label ~ "_then", label ~ "_else");
        else
            output.fun.testBranch(reg, label ~ "_then", label ~ "_fin");

        output.fun.setLabel(label ~ "_then");
        this.then.emit(output);
        output.fun.branch(label ~ "_fin");

        if (this.else_)
        {
            output.fun.setLabel(label ~ "_else");
            this.else_.emit(output);
            output.fun.branch(label ~ "_fin");
        }
        output.fun.setLabel(label ~ "_fin");
    }

    override void hash(Hash hash) {
        hash.adds("IfStatement");
        test.hash(hash);
        then.hash(hash);
        if (else_) else_.hash(hash);
        else hash.adds("no else");
    }
    override string repr() {
        string res = "if ($(test.repr)) $(then.repr)";
        if (else_) return res ~ " else $(else_.repr)";
        else return res;
    }
}

class ASTBreak : ASTSymbol
{
    this(this.locRange) { }

    override (Symbol | fail Error) compile(Context context)
    {
        auto loopScope = findParent!LoopScope(context.namespace);
        locRange.assert(!!loopScope, "Cannot 'break': not in a loop.")?;
        auto stmt = loopScope.breakFrom(context, locRange)?;

        return new StatementExpression(stmt, new UnreachableExpr, gifted=false);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astBreak", [], locRange);
    }
    override string repr() { return "break"; }
}

class ASTContinue : ASTSymbol
{
    this(this.locRange) { }

    override (Symbol | fail Error) compile(Context context)
    {
        auto loopScope = findParent!LoopScope(context.namespace);
        locRange.assert(!!loopScope, "Cannot 'continue': not in a loop.")?;
        auto stmt = loopScope.continueFrom(context, locRange)?;

        return new StatementExpression(stmt, new UnreachableExpr, gifted=false);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astContinue", [], locRange);
    }
    override string repr() { return "continue"; }
}

class Branch : Statement
{
    string label;

    LocRange locRange;

    this(this.label, this.locRange) { }

    override void emit(Generator output)
    {
        output.fun.setLocation(this.locRange.toBackendLoc(output.fileIdTable));
        output.fun.branch(this.label);
        output.fun.setLabel(output.fun.getLabel);
    }

    override void hash(Hash hash) { hash.adds("Branch"); hash.adds(label); }
}

class ASTExprStatement : ASTStatement
{
    ASTSymbol value;

    this(this.value, this.locRange) { }

    override (StatementCompileResult | fail Error) compile(Context context)
    {
        auto expr = this.value.compile(context)?.beExpressionImplCall(context, this.locRange)?;

        return StatementCompileResult(discard(context, expr, this.locRange)?, context.namespace);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astExpressionStmt", [value.quote(quoter)], locRange);
    }

    override string repr() { return "$(value.repr); "; }
}

// see ExprInfo info in Expression
// this is a "move" not in the sense that the source gets destroyed,
// as that it steals the reference belonging to the source. Essentially,
// it takes ownership of the source expression.
(Statement | fail Error) move(Context context, Reference target, Expression source, LocRange locRange)
{
    if (source.info.lifetime == Lifetime.gifted) {
        // steal the reference
        return new AssignStatement(target, source, :none);
    }
    return new AssignStatement(target, source.copy(context, locRange)?, :none);
}

class ExprStatement : Statement
{
    Expression value;

    (LocRange | :none) locRange;

    this(this.value, this.locRange = :none) { assert(!!value); }

    override void emit(Generator output)
    {
        this.locRange.case {
            LocRange locRange: output.fun.setLocation(locRange.toBackendLoc(output.fileIdTable));
            :none: {}
        }
        this.value.emit(output);
    }

    override void hash(Hash hash) { hash.adds("ExprStatement"); value.hash(hash); }
    override string repr() { return "$(value.repr);"; }
}

Statement destroy(Context context, Expression expr, LocRange locRange)
{
    auto type = expr.type;
    if (auto endLifetime = type.endLifetime(context, expr)) {
        return endLifetime;
    }
    // Still evaluate expr.
    return new ExprStatement(expr, locRange);
}

(Statement | fail Error) discard(Context context, Expression expr, LocRange locRange)
{
    auto type = expr.type;
    context.compiler.discardErrorCheck(expr, locRange)?;
    if (expr.info.lifetime == Lifetime.gifted && !type.same(once new Void)) {
        return destroy(context, expr, locRange);
    } else {
        return new ExprStatement(expr, locRange);
    }
}

/**
 * Generic loop class, covering For and While.
 *
 *  setup // may be null for while loop
 * start:
 *  if (!condition) goto break
 *  body
 * continue:
 *  loopstep // may be null for while loop
 *  goto start
 * break:
 */
class Loop : Statement
{
    string label;

    nullable Statement setup;

    Expression condition;

    Statement body_;

    nullable Statement loopstep;

    (LocRange | :none) locRange;

    this(this.label, this.setup, this.condition, this.body_, this.loopstep, this.locRange) { }

    override void emit(Generator output)
    {
        this.locRange.case {
            LocRange locRange: output.fun.setLocation(locRange.toBackendLoc(output.fileIdTable));
            :none: {}
        }
        if (this.setup) this.setup.emit(output);

        output.fun.branch(label ~ "_start");

        output.fun.setLabel(label ~ "_start"); // start:
        int condReg = this.condition.emit(output);
        output.fun.testBranch(condReg, label ~ "_body", label ~ "_break");

        output.fun.setLabel(label ~ "_body");
        this.body_.emit(output);
        output.fun.branch(label ~ "_continue");
        output.fun.setLabel(label ~ "_continue");
        if (this.loopstep) this.loopstep.emit(output);
        output.fun.branch(label ~ "_start");
        output.fun.setLabel(label ~ "_break");
    }

    override void hash(Hash hash) {
        hash.adds("LoopStatement");
        hash.adds(label);
        if (setup) setup.hash(hash);
        else hash.adds("no setup");
        condition.hash(hash);
        body_.hash(hash);
        if (loopstep) loopstep.hash(hash);
        else hash.adds("no loopstep");
    }
}

class LabelLoopScope : LoopScope
{
    string label;
    this(this.label, this.parent) { this.isContextScope = true; }
    override (Statement | fail Error) breakFrom(Context context, LocRange locRange) {
        auto branch = new Branch(this.label ~ "_break", locRange);

        return sequence2(context.compiler.unwindScope(context, this, new NoopStatement)?, branch);
    }
    override (Statement | fail Error) continueFrom(Context context, LocRange locRange) {
        auto branch = new Branch(this.label ~ "_continue", locRange);

        return sequence2(context.compiler.unwindScope(context, this, new NoopStatement)?, branch);
    }
    override string repr() => "LabelLoopScope";
}

class SequenceStatement : Statement
{
    Statement[] statements;

    this(this.statements) { }

    override void emit(Generator output)
    {
        for (statement in this.statements) {
            statement.emit(output);
        }
    }

    override void hash(Hash hash)
    {
        hash.adds("SequenceStatement");
        hash.addl(statements.length);
        for (statement in statements)
            statement.hash(hash);
    }
    override string repr() {
        mut string res = "{ ";
        for (statement in this.statements) res ~= statement.repr ~ " ";
        return res ~ "}";
    }
}

Statement sequence(Statement left, nullable Statement right)
{
    if (!right) return left;
    auto rightNonNull = right.notNull;
    if (left.instanceOf(NoopStatement)) return rightNonNull;
    if (rightNonNull.instanceOf(NoopStatement)) return left;
    auto prevSequence = left.instanceOf(SequenceStatement);
    if (prevSequence) return new SequenceStatement(prevSequence.statements ~ rightNonNull);
    return new SequenceStatement([left, rightNonNull]);
}

Statement sequence2(nullable Statement first, Statement second) {
    if (auto first = first) return sequence(first, second);
    return second;
}

class StatementExpression : Expression
{
    Statement statement;

    Expression expression;

    this(this.statement, this.expression, this.info) {
        assert(!!statement);
        assert(!!expression);
        this.type = this.expression.type;
    }

    this(this.statement, this.expression, bool gifted) {
        assert(!!statement);
        assert(!!expression);
        this.type = this.expression.type;
        if (gifted) this.info = ExprInfo(Lifetime.gifted);
        else this.info = expression.info;
    }

    override int emit(Generator generator)
    {
        this.statement.emit(generator);
        return this.expression.emit(generator);
    }

    override string repr() {
        return "({ $(statement.repr); $(expression.repr); })";
    }

    override void hash(Hash hash) {
        hash.adds("StatementExpression");
        statement.hash(hash);
        expression.hash(hash);
    }
}
