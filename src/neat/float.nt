module neat.float;

macro import package(compiler).std.macro.once;

import backend.base;
import neat.base;
import neat.runtime;
import polyhash;

class Float : Type
{
    BackendType type;
    this() {
        this.type = new BackendFloatType;
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Float); }

    override string repr() { return "float"; }

    override string mangle() { return "float"; }

    override (nullable Expression | Error) implicitConvertFrom(
        Context context, Expression source, LocRange locRange)
    {
        if (auto dblLit = source.instanceOf(DoubleLiteral))
        {
            return new FloatLiteral(cast(float) dblLit.value);
        }
        return null;
    }


    override void hash(Hash hash) { hash.adds("float"); }
}

class Double : Type
{
    BackendType type;
    this() {
        this.type = new BackendDoubleType;
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) { return !!other.instanceOf(Double); }

    override string repr() { return "double"; }

    override string mangle() { return "double"; }

    override void hash(Hash hash) { hash.adds("double"); }
}

class ASTFloatLiteral : ASTSymbol
{
    float value;

    this(this.value) { }

    override (Symbol | Error) compile(Context context)
    {
        return new FloatLiteral(this.value);
    }
}

class FloatLiteral : Expression
{
    float value;
    this(this.value) { this.type = once new Float; this.info = ExprInfo(Lifetime.permanent); }
    override int emit(Generator output) { return output.fun.floatLiteral(this.value); }
    override void hash(Hash hash) { hash.adds("FloatLiteral"); hash.adds(ftoa(value)); }
    override string repr() { return "$value"; }
}

class ASTDoubleLiteral : ASTSymbol
{
    double value;

    this(this.value) { }

    override (Symbol | Error) compile(Context context)
    {
        return new DoubleLiteral(this.value);
    }
}

class DoubleLiteral : Expression
{
    double value;
    this(this.value) { this.type = once new Double; this.info = ExprInfo(Lifetime.permanent); }
    override int emit(Generator output) { return output.fun.doubleLiteral(this.value); }
    override void hash(Hash hash) { hash.adds("DoubleLiteral"); hash.adds(ftoa(value)); }
    override string repr() { return "$value"; }
}
