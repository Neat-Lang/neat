module neat.function_;

macro import package(compiler).std.macro.listcomprehension;
macro import package(compiler).std.macro.once;

import backend.base;
import helpers;
import neat.base;
import neat.types;
import neat.util;
import polyhash;

class Function : FunctionDeclaration
{
    ASTStatement statement;

    /**
     * If the function has a declared return type, we defer compilation until later.
     * If it has an auto return type, it is compiled on resolution. In this case,
     * the resulting function is stored here.
     */
    nullable CompiledFunction compiled;

    MacroState macroState;

    nullable Namespace parent;

    bool hasThisArg;

    LocRange locRange;

    string comment; // for docgen

    string uniqId; // for nested functions

    string mangleCache;

    this(this.name, this.retWIP, this.params, this.statement, this.macroState, this.hasThisArg,
         this.locRange)
    {
        this.contextType = null;
        this.parent = null;
        this.uniqId = null;
    }

    void resetMangleCache()
    {
        if (this.uniqId == "")
            mangleCache = "$(manglePrefix)_$(mangleSuffix)";
        else mangleCache = "$(manglePrefix)_$(mangleSuffix)_$uniqId";
    }

    override string mangle()
    {
        return mangleCache;
    }

    string manglePrefix()
    {
        return parent.mangle;
    }

    string mangleSuffix()
    {
        // This is all sorts of dirty, but I don't want to give up mangle precaching,
        // and return type mangling isn't all THAT important anyways.
        string retMangle() {
            if (auto ret = this.retWIP) return ret.mangle;
            return "auto";
        }
        auto paramMangle = "$(this.params.length)_"
            ~ [join with "_" param.type.mangle for param in this.params];
        return "$(name)_$(retMangle)_$(paramMangle)";
    }

    override string repr()
    {
        mut string repr = this.name;
        if (auto parentFun = findParent!FunctionScope(this.parent)) {
            return parentFun.repr ~ "." ~ repr;
        }
        if (hasThisArg) {
            repr = this.contextType.repr ~ "::" ~ repr;
        }
        // TODO
        // if (auto mod = this.parent.instanceOf(Module)) repr = mod.name ~ "." ~ repr;
        return repr;
    }

    override void declare(Generator generator)
    {
        string mangle = this.mangle;
        if (generator.mod.declared(mangle)) return;

        Type voidp = once new Pointer(new Void);

        mut auto paramTypes = [param.type.emit(generator.platform) for param in this.params];
        if (this.contextType)
            paramTypes = [voidp.emit(generator.platform)] ~ paramTypes;

        generator.mod.declare(
            mangle,
            this.ret.emit(generator.platform),
            paramTypes,
            variadic=false
        );
    }

    CompiledFunction mkCompiledFunction(
        Function fun, Statement compiledStatement, FunctionScope stackframe, Statement[] argAssignments)
    {
        return new CompiledFunction(fun, compiledStatement, stackframe, argAssignments);
    }

    (void | fail Error) inferReturnType(Context context) {
        auto compiledFun = compile(context)?;
        this.retWIP = compiledFun.stackframe.finalRet;
    }

    (CompiledFunction | fail Error) compile(Context context)
    {
        if (auto compiledFun = this.compiled) return compiledFun;

        auto compiler = context.compiler;

        auto stackframe = new FunctionScope(
            compiler, this.retWIP, this.contextType, this.parent.notNull, this.mangle, this.repr,
            this.locRange);
        auto framePtr = compiler.reference(compiler.stackFrame(new Void));
        auto icontext = makeIContext(
            compiler, context.platform, this.macroState,
            context.compilingModule, context.loopPass,
            context.modulePreProcessor, context.modulePostProcessor);
        auto context = makeContext(icontext, stackframe).withFramePointer(framePtr);

        mut Namespace scope_ = stackframe;
        mut int extra = 0;
        if (this.contextType)
            extra = 1;

        auto argAssignments = new Statement[](this.params.length + extra);

        mut nullable VariableDeclaration thisDecl;
        if (auto contextType = this.contextType) {
            // unnamed variable because of "first field in stackframe is 'this'" logic
            mut string framePtrName;
            if (this.hasThisArg) framePtrName = "this";
            // FIXME if heap allocated, copy, don't borrow! as below!
            // Make sure the type is the right one! No void*!
            thisDecl = new VariableDeclaration(
                scope_, framePtrName, context.platform, contextType,
                mut=false, borrowed=true, hidden=framePtrName == "");

            Type voidp = once new Pointer(new Void);

            scope_ = thisDecl;

            argAssignments[0] = compiler.assignStatement(
                thisDecl.accessDecl(context),
                new PointerCast(contextType, new ArgExpr(0, voidp)));
        }

        mut auto context = context.withNamespace(scope_);

        for (int i, param in this.params) {
            auto argExpr = new ArgExpr(extra + i, param.type);

            if (param.isThisAssignment) {
                this.locRange.assert(!!thisDecl, "no this. args outside class")?;

                auto target = compiler.accessMemberWithLifetime(
                        context, thisDecl.accessDecl(context), param.name, this.locRange, false)?
                    .instanceOf(Reference);
                this.locRange.assert2(!!target, "not a reference: ", param.name)?;
                auto target = target.notNull;
                // TODO location
                argAssignments[extra + i] = compiler.assignStatement(target, argExpr.copy(context, __RANGE__)?);
            } else {
                if (param.mutable) {
                    // We're mutable, but functions borrow the caller args.
                    // So despite being lexical, we copy them.
                    // (Also goes for heap allocated functions, as they outlive the caller.)
                    auto argDecl = new VariableDeclaration(
                        scope_, param.name, context.platform, param.type,
                        mut=param.mutable, borrowed=false, hidden=false);
                    auto target = argDecl.accessDecl(context);

                    // TODO location
                    argAssignments[extra + i] = compiler.assignStatement(target, argExpr.copy(context, __RANGE__)?);
                    scope_ = argDecl;
                } else {
                    auto argDecl = new VariableDeclaration(
                        scope_, param.name, context.platform, param.type, mut=false, borrowed=true, hidden=false);

                    argAssignments[extra + i] = compiler.assignStatement(argDecl.accessDecl(context), argExpr);
                    scope_ = argDecl;
                }
            }
        }

        context = context.withNamespace(scope_);

        /**
         * This handles the case of a function with "optional void return", such as `(void | fail Error)`.
         * Void-returning functions do not require a terminating return. This extends to optional void return
         * functions, but simply emitting "ret;" is a type error.
         * So we need to implicitly convert `void` to the return type.
         */
        ASTStatement funWithVoidReturn() {
            return this.statement;
        }

        auto pair = this.statement.compile(context)?;
        auto pairContext = context.withNamespace(pair.namespace);
        mut auto compiledStatement = compiler.unwindScope(pairContext, stackframe, pair.statement)?;

        if (auto convert = context.compiler.implicitConvertTo(context, new VoidExpression, stackframe.finalRet)) {
            import neat.statements : ReturnStatement;
            compiledStatement = context.compiler.sequence(
                compiledStatement,
                new ReturnStatement(convert, this.locRange));
        } else {
            // TODO missing return error here
        }

        this.compiled = mkCompiledFunction(this, compiledStatement, stackframe, argAssignments);
        return this.compiled.notNull;
    }
}

class CompiledFunction : FinishedSymbol
{
    Function fun;

    Statement compiledStatement;

    FunctionScope stackframe;

    Statement[] argAssignments;

    this(this.fun, this.compiledStatement, this.stackframe, this.argAssignments) { }

    override void emit(Generator generator)
    {
        if (!generator.once(this.fun.mangle)) { print("double-emit " ~ this.fun.mangle); assert(false); }
        // print("emit " ~ this.fun.mangle);

        assert(!generator.fun);
        Type voidp = once new Pointer(new Void);

        mut auto paramTypes = [param.type.emit(generator.platform) for param in this.fun.params];
        if (this.fun.contextType)
            paramTypes = [voidp.emit(generator.platform)] ~ paramTypes;
        auto retType = this.fun.ret.emit(generator.platform);

        generator.fun = generator.mod.define(
            this.fun.mangle,
            this.fun.repr,
            retType,
            paramTypes,
            this.fun.locRange.toBackendLoc(generator.fileIdTable)
        );
        generator.frameReg = generator.fun.staticAlloca(this.stackframe.(new BackendSpacerType(maxSize, maxAlignment)));

        [assignment.emit(generator) for assignment in this.argAssignments];
        this.compiledStatement.emit(generator);

        // TODO crash unless ret is void
        generator.fun.ret(generator.fun.zeroLiteral(retType));
        generator.fun.done;
        generator.fun = null;
        generator.frameReg = -1;
    }

    override void hash(Hash hash) {
        hash.adds("fndef");
        hash.adds(fun.mangle);
        fun.ret.hash(hash);
        if (fun.contextType) fun.contextType.hash(hash);
        else hash.adds("null");
        hash.addl(fun.params.length);
        [({ hash.adds(param.name); param.type.hash(hash); }) for param in fun.params];
        this.compiledStatement.hash(hash);
    }
}

class FunctionScope : Namespace, Returnable, Declarable
{
    CompilerBase compiler;

    nullable Type ret;

    nullable Type extra;

    string mangle_;

    string repr_;

    LocRange locRange;

    int maxSize;

    int maxAlignment;

    this(this.compiler, this.ret, this.extra, this.parent, this.mangle_, this.repr_, this.locRange) {
        this.isContextScope = true;
        this.maxSize = 0;
        this.maxAlignment = 1;
    }

    Type finalRet() {
        if (!ret) ret = new Void;
        return ret.notNull;
    }

    Type spacerType() {
        return new StackframeSpacer(maxSize, maxAlignment);
    }

    override LatentVariable declare(string name, Type[] frame, bool mut, bool borrowed, Platform platform) {
        // borrowed == "no cleanup on scope exit".
        // This is not safe in conjunction with mut (cleanup on reassign).
        assert(!borrowed || !mut);

        // TODO dedicated stackframe type so we don't need to keep recreating struct type instances
        mut auto vars = [new StructMemberDeclaration(name, Protection.public_, type) for type in frame];
        auto structType = this.compiler.struct_("", vars, this.locRange, this.mangle_);
        auto backendType = structType.emit(platform);

        int max(int a, int b) => a if a > b else b;
        this.maxSize = max(this.maxSize, backendType.size(platform));
        this.maxAlignment = max(this.maxAlignment, backendType.alignment(platform));
        return new LatentVariableImpl(name, type_=frame[$ - 1], structType, cast(int) vars.length - 1,
                                  mut=mut, borrowed=borrowed);
    }

    override string mangle() { return this.mangle_; }

    override string repr() => repr_;

    // TODO use util.TypeMerger
    override (Type | fail Error) mergeReturn(Context context, Expression retExpr, LocRange locRange) {
        if (!this.ret) this.ret = retExpr.type;
        auto retType = this.ret.notNull;
        if (context.compiler.implicitConvertTo(context, retExpr, retType))
            return retType;
        return locRange.fail("cannot return $(retExpr.type.repr): clashes with existing type $(this.ret.repr)");
    }

    override (nullable Symbol | fail Error) lookup(
        string name, Context context, LookupReason reason, LocRange locRange)
    {
        assert(!!this.parent);

        mut nullable Expression nextFramePointer = null;
        if (this.extra && context.framePointer) {
            // first field in stackframe must be parent
            // TODO better?
            auto framePtr = new PointerCast(once new Pointer(new Pointer(new Void)), context.framePointer.notNull);
            nextFramePointer = context.compiler.dereference(framePtr);
        }

        return this.parent.lookup(name, context.withFramePointer(nextFramePointer), reason, locRange);
    }
}

class StackframeSpacer : Type
{
    int size, alignment;

    BackendType type;

    this(this.size, this.alignment) {
        this.type = new BackendSpacerType(size, alignment);
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) {
        if (auto otherSpacer = other.instanceOf(StackframeSpacer))
            return size == otherSpacer.size && alignment == otherSpacer.alignment;
        return false;
    }

    override string repr() => "stackframe($type)";

    override string mangle() => "spacer_$(size)_$(alignment)";

    override void hash(Hash hash) { hash.adds("spacer"); hash.addl(size); hash.addl(alignment); }
}


/**
 * Used to allow referencing the types of parameters from the return type,
 * for instance in typeof().
 */
class ReturnTypeNamespace : Namespace
{
    Parameter[] params;

    this(this.parent, this.params) { }

    override (nullable Symbol | fail Error) lookup(
        string name, Context context, LookupReason reason, LocRange locRange)
    {
        for (param in this.params) {
            if (param.name == name) {
                import neat.expr : NullExpr;

                return new NullExpr(param.type);
            }
        }
        if (this.parent) return this.parent.lookup(name, context, reason, locRange);
        return null;
    }

    override string repr() => "ReturnTypeNamespace";
}

class LatentVariableImpl : LatentVariable
{
    string name;

    Type type_;

    Type stackFrameType;

    int offset;

    bool mut;

    bool borrowed;

    ExprInfo info;

    this(this.name, this.type_, this.stackFrameType, this.offset, this.mut, this.borrowed) {
        assert (!mut || !borrowed);
        if (mut) this.info = ExprInfo(Lifetime.ephemeral);
        else this.info = ExprInfo(Lifetime.lexical);
    }

    override Type type() => this.type_;

    override Expression localStackFrame(Context context) {
        return context.framePointer.notNull;
    }

    override Reference access(Context context)
    {
        auto frame = new PointerCast(new Pointer(stackFrameType), context.framePointer.notNull);
        auto reference = context.compiler.structMemberReference(
            context.compiler.dereference(frame), offset);
        return new InfoReference(reference, mut, info);
    }
}

class VariableDeclaration : DeclarationHolder
{
    string name;

    LatentVariable variable;

    bool hidden;

    bool borrowed;

    this(this.parent, this.name, Platform platform, Type type, bool mut, this.borrowed, this.hidden)
    {
        mut Type[] reverseFrame = [type];
        mut Namespace current = parent.notNull;
        while (true) {
            if (current.instanceOf(Declarable)) break;
            if (auto vd = current.instanceOf(VariableDeclaration)) {
                reverseFrame ~= vd.variable.type;
            }
            current = current.parent.notNull;
        }
        auto frame = [reverseFrame[$ - 1 - i] for i in 0 .. reverseFrame.length];
        this.variable = findParent!Declarable(this).notNull.declare(
            name, frame, mut=mut, borrowed=borrowed, platform);
        this.isContextScope = true;
    }

    override bool freeOnExit() {
        return !borrowed;
    }

    override Reference accessDecl(Context context)
    {
        return access(context.withFramePointer(this.variable.localStackFrame(context)));
    }

    Reference access(Context context)
    {
        return this.variable.access(context);
    }

    override (nullable Symbol | fail Error) lookup(
        string name, Context context, LookupReason reason, LocRange locRange)
    {
        // Frame may be null for struct nested in function.
        if (auto frame = context.framePointer) {
            if (this.name == name) {
                return access(context);
            }
            // soft destructuring
            if (!hidden && this.name == "") {
                auto unnamedVar = access(context);
                auto target = context.compiler.accessMemberWithLifetime(
                        context, unnamedVar, name, locRange, true)?;
                if (target) return target;
            }
        }
        if (this.parent) return this.parent.lookup(name, context, reason, locRange);
        return null;
    }
    override string repr() => "VariableDeclaration($name)";
}

class StackFrame : Reference
{
    Type targetType;

    // why not mutable? Variable access will override the reference - at that point, mut should be enabled as required.
    // If you somehow manage to get a raw reference to this class, by no means should you be able to write it!
    this(this.targetType) {
        this.type = this.targetType;
        this.mutable = false;
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator generator)
    {
        assert(false);
    }

    override int emitLocation(Generator generator)
    {
        return generator.frameReg;
    }

    override void hash(Hash hash) { hash.adds("StackFrame"); targetType.hash(hash); }

    override string repr() { return "__frame"; }
}

class InfoReference : Reference
{
    Reference base;

    this(this.base, this.mutable, this.info) { this.type = base.type; }

    override int emit(Generator output) {
        int loc = emitLocation(output);
        return output.fun.load(this.type.emit(output.platform), loc);
    }

    override int emitLocation(Generator output) {
        int reg = base.emitLocation(output);
        // immutable, meaning the value will never be muted.
        if (!mutable) output.fun.markPointerInvariant(reg);
        return reg;
    }
    // TODO hash ExprInfo
    override void hash(Hash hash) { hash.adds("InfoReference"); base.hash(hash); }
    override string repr() { return "InfoReference($(base.repr): $(info.repr))"; }
}

class ArgExpr : Expression
{
    int index;

    this(this.index, this.type) { this.info = ExprInfo(Lifetime.lexical); }

    override int emit(Generator output)
    {
        return output.fun.arg(this.index);
    }

    override void hash(Hash hash) { hash.adds("ArgExpr"); hash.addl(index); }

    override string repr() return "%arg$index";
}

class FunctionReference : FunctionReferenceBase
{
    FunctionDeclarationBase fun;

    this(this.fun) {
        mut auto params = this.fun.params;
        if (this.fun.contextType) params = [Parameter.fromType(once new Pointer(new Void))] ~ params;

        this.type = new FunctionPointer(this.fun.ret, params);
        this.info = ExprInfo(Lifetime.permanent);
    }

    override FunctionDeclarationBase getFunction() { return fun; }

    override int emit(Generator output)
    {
        this.fun.declare(output);

        return output.fun.getFuncPtr(this.type.emit(output.platform), this.fun.mangle);
    }

    override void hash(Hash hash) { hash.adds("FunctionReference"); hash.adds(fun.mangle); }
    override string repr() return "&$(fun.mangle)";
}

class NestedFunction : LateSymbol
{
    Function fun;

    Expression baseExpr;

    this(this.fun, this.baseExpr) {
        // becomes true in 'new &bla' formalism (TODO parameter?)
        this.refcounted = false;
    }

    override LateSymbolResult resolve(Context context) {
        // no need for setup/teardown here - nested functions can't depend on complex expressions.
        auto funcPtr = new FunctionReference(this.fun);
        auto firstArg = new PointerCast(once new Pointer(new Void), baseExpr);

        return LateSymbolResult(setup=null, funcPtr=funcPtr, firstArg=firstArg, teardown=null);
    }
    override string repr() return "TODO NestedFunction";
}

class LatentNestedFunction : LatentSymbol
{
    Function fun;

    this(this.fun) { }

    override Symbol resolve(Context context, LocRange locRange) {
        return new NestedFunction(this.fun, context.framePointer.notNull);
    }
    override string repr() return "TODO LatentNestedFunction";
}

(Parameter | fail Error) compile(ASTParameter param, Context context) {
    (nullable Expression | fail Error) defaultValue(ASTParameter param, Type type) {
        if (!param.defaultValue) return null;
        auto context = context.withNamespace(findParent!ModuleBase(context.namespace));
        return param.defaultValue
            .compile(context)?
            .beExpressionImplCall(context, param.locRange)?
            .expectImplicitConvertTo(type, context, param.locRange)?;
    }
    auto type = param.type.compile(context)?.beType(param.locRange)?;
    auto defaultValue = defaultValue(param, type)?;
    return Parameter(isThisAssignment=false, param.name, param.mutable, type=type, defaultValue=defaultValue);
}

(Parameter | fail Error) compile(ASTThisAssignment param, Type type, Context context) {
    (nullable Expression | fail Error) defaultValue() {
        if (!param.defaultValue) return null;
        return param.defaultValue.compile(context)?
            .beExpressionImplCall(context, param.locRange)?
            .expectImplicitConvertTo(type, context, param.locRange)?;
    }
    return Parameter(isThisAssignment=true, param.name, mutable=false, type=type, defaultValue=defaultValue?);
}

class ASTFunction : ASTSymbolDeclaration
{
    (ASTSymbol | :auto_) ret;

    ASTParameter[] params;

    bool isDeclaration;

    ASTStatement statement;

    MacroState macroState;

    // for docgen
    string comment;

    this(this.name, this.ret, this.params, this.isDeclaration, this.locRange, this.statement,
         this.macroState, this.comment) { }

    override (Symbol | fail Error) compileSymbol(Context context)
    {
        // FIXME parameter mangling
        // TODO: Why are these in a separate paramContext? What breaks if we remove this?
        // TODO: Why can't IdCounter be global? Why do we need more than one?
        // TODO: I think we just need a dedicated id counter for "label that is never backend emitted".
        auto paramContext = context.withLabelPrefix(
            "$(context.namespace.mangle)_$(this.name)");
        auto params = [.compile(param, paramContext)? for param in this.params];

        // It's nice to be able to reference the function
        // parameters in a typeof() in the return type.
        auto returnTypeNamespace = new ReturnTypeNamespace(context.namespace, params);
        auto returnTypeContext = context.withNamespace(returnTypeNamespace);

        if (this.isDeclaration)
        {
            (ASTSymbol | fail Error) ret() {
                this.ret.case {
                    ASTSymbol sym: return sym;
                    :auto_: return this.locRange.fail("Cannot use 'auto' return type for function declaration");
                }
            }
            auto ret = ret?;
            return new FunctionDeclaration(
                this.name, ret.compile(returnTypeContext)?.beType(ret.locRange)?, params);
        }

        // FIXME: nullptr_t
        // this.ret.case(Type type: type, :auto_: null);
        (nullable Type | fail Error) ret() {
            this.ret.case {
                ASTSymbol ret: return ret.compile(returnTypeContext)?.beType(ret.locRange)?;
                :auto_: return null;
            }
        }
        auto fun = new Function(
            this.name,
            ret?,
            params,
            this.statement, this.macroState, hasThisArg=false, this.locRange);

        fun.comment = this.comment;

        (void | fail Error) inferReturnType() {
            this.ret.case {
                ASTSymbol ret: {}
                :auto_: fun.inferReturnType(context)?;
            }
        }

        if (auto functionScope = findParent!FunctionScope(context.namespace)) {
            auto spacerType = functionScope.spacerType;
            auto voidp = once new Pointer(new Void);
            auto latent = new LatentNestedFunction(fun);

            fun.contextType = new Pointer(spacerType);
            fun.uniqId = context.getLabel;

            /**
             * Dirty hack: this is not the final `fun.parent`.
             * To enable mutual recursion, fun.parent is patched again in ASTNestedFunctionDeclStatement
             * with a namespace that contains every function in a cluster.
             * We already set it here so that `inferReturnType` can do a sensible compile in the
             * auto return case. Auto return functions don't cluster anyways.
             */
            fun.parent = context.namespace;
            fun.resetMangleCache;
            inferReturnType?;

            context.compilingModule.track(fun);

            return latent;
        }

        fun.parent = context.namespace;
        fun.resetMangleCache;
        inferReturnType?;
        return fun;
    }

    override string repr() { return "repr(ASTFunction)"; }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTFunction'!"); assert(false); }
}

(nullable ASTDeclaration | fail Error) parseFunction(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    auto comment = parser.parseLastComment;
    auto from = parser.from;
    mut uninitialized (ASTSymbol | :auto_) ret;
    if (parser.acceptIdentifier("auto")) {
        ret = :auto_;
    } else if (auto retType = lexicalContext.compiler.parseType(parser, lexicalContext)?) {
        ret = retType;
    } else {
        parser.revert;
        return null;
    }
    string name = parser.parseIdentifier;
    // avoid 'mut typeof(expr)' from matching as a function
    // TODO reserved identifier list
    auto locRange = parser.to(from);
    if (!name.length || name == "typeof")
    {
        parser.revert;
        return null;
    }
    (nullable ASTSymbolDeclaration | fail Error) parseRest() {
        if (!parser.acceptToken(TokenType.lparen))
            return null;
        auto params = parseParameterList(parser, lexicalContext, variadic=false, thisAssignment=false)?;
        assert(!params.variadic);
        ASTParameter pick((ASTParameter | ASTThisAssignment) value) {
            value.case {
                ASTParameter p: return p;
                ASTThisAssignment a: assert(false);
            }
        }
        auto params = [pick(entry) for entry in params.params];
        ASTStatement stmt = lexicalContext.compiler.parseFunctionBody(parser, lexicalContext)?;
        return new ASTFunction(
            name, ret, params, isDeclaration=false, locRange, stmt,
            lexicalContext.macroState, comment);
    }
    if (auto ret = lexicalContext.compiler.parseTemplateStub(parser, lexicalContext, name, comment, &parseRest)?) {
        parser.commit;
        return ret;
    }
    if (auto ret = parseRest?) {
        parser.commit;
        return ret;
    }
    parser.revert;
    return null;
}

((ASTParameter | ASTThisAssignment)[] params, bool variadic | fail Error) parseParameterList(
    Parser parser, LexicalContext lexicalContext, bool variadic, bool thisAssignment)
{
    mut (ASTParameter | ASTThisAssignment)[] params;
    mut bool haveVariadic = false;
    mut bool hadDefaultValue = false;
    (nullable ASTSymbol | fail Error) parseDefaultValue() {
        mut nullable ASTSymbol defaultValue;
        if (parser.acceptToken(TokenType.equal)) {
            auto defaultValue = lexicalContext.compiler.parseExpression(parser, lexicalContext)?;
            if (!defaultValue) return parser.fail("default parameter value expected");
            hadDefaultValue = true;
            return defaultValue;
        } else if (hadDefaultValue) {
            return parser.fail("only default parameters allowed after default parameter");
        }
        return null;
    }
    while (!parser.acceptToken(TokenType.rparen)) {
        if (params.length > 0) {
            if (!parser.acceptToken(TokenType.comma)) {
                return parser.fail("',' or ')' expected");
            }
        }
        // foo(int a, )
        if (parser.acceptToken(TokenType.rparen)) break;

        auto from = parser.from;
        if (variadic) {
            parser.begin;
            if (parser.acceptToken3(TokenType.dot, TokenType.dot, TokenType.dot)
                && parser.acceptToken(TokenType.rparen)) {
                parser.commit;
                haveVariadic = true;
                break;
            }
            parser.revert;
        }
        if (thisAssignment && parser.acceptIdentifier("this") && parser.acceptToken(TokenType.dot))
        {
            string paramName = parser.parseIdentifier;
            auto defaultValue = parseDefaultValue?;
            params ~= ASTThisAssignment(paramName, defaultValue, parser.to(from));
            continue;
        }
        mut bool mutable;
        if (parser.acceptIdentifier("mut")) mutable = true;
        nullable ASTSymbol argtype = lexicalContext.compiler.parseType(parser, lexicalContext)?;
        parser.assert_(!!argtype, "parameter type expected")?;
        string paramName = parser.parseIdentifier;
        // parser.assert_(paramName.length > 0, "parameter name expected")?;
        auto defaultValue = parseDefaultValue?;

        params ~= ASTParameter(
            name=paramName,
            mutable,
            type=argtype.notNull,
            defaultValue=defaultValue,
            parser.to(from));
    }
    return (params, haveVariadic);
}
