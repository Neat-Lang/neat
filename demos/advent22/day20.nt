module day20;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.math;
import std.stdio;
import std.string;

void main()
{
    auto lines = stdin.byLine
        .filter(a => !a.empty)
        .map(a => a.atoi)
        .array;
    alias Sequence = (int initialIndex, long value) mut[];
    void process(Sequence sequence, int rounds) {
        void swap(size_t a, size_t b) {
            auto v = sequence[a % $];
            // FIXME array index context for assignment
            sequence[a % sequence.length] = sequence[b % $];
            sequence[b % sequence.length] = v;
        }
        void swapForward(size_t pos, long distance) {
            for (x in 0 .. distance % (sequence.length - 1)) {
                swap(pos + x, pos + x + 1);
            }
        }
        void swapBackward(size_t pos, long distance) {
            for (x in 0 .. distance % (sequence.length - 1)) {
                swap(pos - x, pos - x - 1);
            }
        }
        for (round in 0 .. rounds) {
            for (i in 0 .. sequence.length) {
                auto entry = [first (pos=j, value=a.value) for j, a in sequence
                    where a.initialIndex == i];
                if (entry.value > 0)
                    swapForward(entry.pos, entry.value);
                else
                    swapBackward(entry.pos, -entry.value);
                // print("$i: moved $(entry.value): $([a.value for a in sequence])");
            }
        }
    }
    long numAfter0(Sequence sequence, size_t offs) {
        mut auto pos = [first i for i, a in sequence where a.value == 0];
        for (_ in 0 .. offs) pos = (pos + 1) % sequence.length;
        return sequence[pos].value;
    }
    void report(Sequence sequence, string prefix) {
        auto res1 = sequence.numAfter0(1000);
        auto res2 = sequence.numAfter0(2000);
        auto res3 = sequence.numAfter0(3000);
        print("$prefix: $res1 + $res2 + $res3 == $(res1 + res2 + res3)");
    }
    Sequence sequence1 = [(initialIndex=cast(int) i, value=cast(long) a) for i, a in lines].dup;
    sequence1.process(rounds=1);
    sequence1.report("First half");
    Sequence sequence2 = [
        (initialIndex=cast(int) i, value=cast(long) a * 811589153) for i, a in lines].dup;
    sequence2.process(rounds=10);
    sequence2.report("Second half");
}
