module neat.runtime;

public import std.stdio : print;

string itoa(int i) {
    import neat.runtime.stdlib : snprintf;

    int len = snprintf(null, 0, "%i".ptr, i);
    string res = new string(len + 1);

    return res[0 .. snprintf(res.ptr, res.length, "%i".ptr, i)];
}

int atoi(string s) {
    import neat.runtime.stdlib : atoi, free;

    char* temp = toStringz(s);
    int res = atoi(temp);
    free(temp);
    return res;
}

long atol(string s) {
    import neat.runtime.stdlib : atoll, free;

    char* temp = toStringz(s);
    long res = atoll(temp);
    free(temp);
    return res;
}

string ftoa(double d) {
    import neat.runtime.stdlib : snprintf;

    int len = snprintf(null, 0, "%f".ptr, d);
    string res = new string(len + 1);

    return res[0 .. snprintf(res.ptr, res.length, "%f".ptr, d)];
}

string dtoa_hex(double d) {
    import neat.runtime.stdlib : snprintf;

    int len = snprintf(null, 0, "%llx".ptr, *cast(long*) &d);
    string res = new string(len + 1);
    return res[0 .. snprintf(res.ptr, res.length, "%llx".ptr, *cast(long*) &d)];
}

char* toStringz(string s) {
    import neat.runtime.stdlib : malloc, memcpy;

    char* ret = cast(char*) malloc(s.length + 1);
    memcpy(dest=ret, src=s.ptr, s.length);
    ret[s.length] = '\0';
    return ret;
}

double atof(string s) {
    import neat.runtime.stdlib : atof, free;

    char *temp = toStringz(s);
    double res = atof(temp);
    free(temp);
    return res;
}

string ltoa(long l) {
    import neat.runtime.stdlib : snprintf;

    int len = snprintf(null, 0, "%lld".ptr, l);
    string res = new string(len + 1);

    return res[0 .. snprintf(res.ptr, res.length, "%lld".ptr, l)];
}

string btoa(bool b) {
    return "true" if b else "false";
}

string ctoa(char c) {
    return "'" ~ c ~ "'";
}

template atoa(T) {
    string atoa(T[] array) {
        mut string result;
        for (i, part in array) {
            if (i) result ~= ", ";
            result ~= "$part";
        }
        return "[$result]";
    }
}

string ptoa(void* ptr) {
    import neat.runtime.stdlib : snprintf;

    if (!ptr) return "null";
    auto ptrCode = "%016p".ptr if sizeof(size_t) == 8 else "%08p".ptr;
    int len = snprintf(null, 0, ptrCode, ptr);
    string res = new string(len + 1);

    return res[0 .. snprintf(res.ptr, res.length, ptrCode, ptr)];
}

void assert(int test) {
    import neat.runtime.stdlib : exit, fputs, stderr;

    if (!test) {
        fputs("Assertion failed! Aborting.\n".ptr, stderr);
        exit(1);
    }
}

extern(C) void neat_runtime_refcount_inc(string s, void* ptr);
extern(C) int neat_runtime_refcount_dec(string s, void* ptr);
