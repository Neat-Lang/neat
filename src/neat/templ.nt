module neat.templ;

macro import package(compiler).std.macro.listcomprehension;

import neat.base;
import neat.class_;
import neat.enums;
import neat.function_;
import neat.runtime : assert;
import neat.struct_;
import neat.util;
import package(compiler).std.thread;

(nullable ASTSymbol | fail Error) parseTemplateInstantiation(Parser parser, LexicalContext lexicalContext, ASTSymbol base)
{
    parser.begin;
    auto instanceFrom = parser.from;
    // TODO better way to exclude !operator cases
    if (!parser.acceptToken(TokenType.exclamationmark)
        || parser.acceptToken(TokenType.equal)
        || parser.acceptIdentifier("is"))
    {
        parser.revert;
        return null;
    }
    auto instanceLocRange = parser.to(instanceFrom);
    mut ASTSymbol[] templateArgs;
    (void | fail Error) getTemplateArg(bool short_) {
        if (short_) {
            auto from = parser.from;
            auto templateArg = parser.parseIdentifier;
            auto locRange = parser.to(from);
            parser.assert_(templateArg != "", "template argument expected")?;
            templateArgs ~= lexicalContext.compiler.astIdentifier(templateArg, locRange);
        } else {
            auto templateArg = lexicalContext.compiler.parseType(parser, lexicalContext)?;
            parser.assert_(!!templateArg, "template argument expected")?;
            templateArgs ~= templateArg.notNull;
        }
    }

    if (parser.acceptToken(TokenType.lparen)) {
        // ( [a [, a]*]? )
        if (!parser.acceptToken(TokenType.rparen)) {
            getTemplateArg(false)?;
            while (!parser.acceptToken(TokenType.rparen)) {
                parser.expectToken(TokenType.comma)?;
                getTemplateArg(false)?;
            }
        }
    } else {
        getTemplateArg(true)?;
    }
    parser.commit;
    return new ASTTemplateInstance(base, templateArgs, instanceLocRange);
}

class ASTTemplateInstance : ASTSymbol
{
    ASTSymbol templateDecl;

    ASTSymbol[] types;

    this(this.templateDecl, this.types, this.locRange) { }

    override (Symbol | fail Error) compile(Context context)
    {
        /**
         * UFCS rewriting:
         * foo.bar!baz: ASTTemplateInstance(ASTMemberBase(foo, bar), baz)
         * => bar!baz(foo): ASTCall(ASTTemplateInstance(bar, baz), foo)
         */
        mut ASTSymbol decl = this.templateDecl;
        if (auto astMember = decl.instanceOf(ASTMemberBase)) {
            auto base = astMember.base.compile(context)?;
            if (auto target = astMember.checkUfcs(context, base)?) {
                // bar!baz(foo)
                auto reinstance = new ASTTemplateInstance(target, this.types, this.locRange);
                ASTSymbol astMemberBase = new ASTSymbolHelper(base, astMember.base.locRange);
                return context.compiler.astCall(reinstance, [astMemberBase], astMember.locRange).compile(context);
            }
            // rebuild AST with compiled base
            decl = context.compiler.astMember(
                new ASTSymbolHelper(base, astMember.base.locRange), astMember.member, astMember.locRange);
        }
        auto symbol = decl.compile(context)?;
        auto types = [type.compile(context)?.beType(type.locRange)? for type in this.types];
        auto templDecl = symbol.instanceOf(ScopeBoundTemplateDecl);

        locRange.assert(!!templDecl, "cannot instantiate non-template '$(symbol.repr)'")?;

        return templDecl.instantiate(context, this.locRange, types);
    }

    override string repr() {
        return templateDecl.repr ~ "!(" ~ [join with ", " type.repr for type in types] ~ ")";
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTTemplateInstance'!"); assert(false); }
}

class TemplateInstantiationNamespace : Namespace
{
    string[] parameterNames;

    Type[] parameterTypes;

    string memberName;

    Symbol memberValue;

    this(this.parent, this.parameterNames, this.parameterTypes) {
        this.isContextScope = false;
    }

    override (nullable Symbol | fail Error) lookup(
        string name, Context context, LookupReason reason, LocRange locRange)
    {
        for (i, parameterName in parameterNames) {
            if (name == parameterName) return parameterTypes[i];
        }
        if (!memberName.empty && name == memberName) return memberValue;
        return parent.lookup(name, context, reason, locRange);
    }

    override string mangle() {
        string mangle(Type[] types) {
            return "$(types.length)" ~ [join "_$(type.mangle)" for type in types];
        }
        return this.parent.mangle ~ "_instance_" ~ parameterTypes.mangle;
    }

    override string repr() => "TemplateInstantiationNamespace";
}

class ScopeBoundTemplateDecl : Symbol
{
    TemplateDecl latent;

    // Held to allow resolving nested functions.
    nullable Expression frame;

    this(this.latent, this.frame) { }

    (Symbol | fail Error) instantiate(Context context, LocRange locRange, Type[] parameters)
    {
        context.pushErrorLoc(locRange);
        auto ret = this.latent.getInstance(context.withFramePointer(this.frame), locRange, parameters);
        context.popErrorLoc;
        return ret;
    }
    override string repr() return "TODO ScopeBoundTemplateDecl";
}

// very similar to ASTTemplateDecl
// they'll differentiate themselves later, when constraints are added.
class TemplateDecl : LatentSymbol
{
    nullable Namespace parent;

    ASTTemplateDecl decl;

    (Type[] types, (Symbol symbol, ModuleBase mod | :instantiating) value)[] instantiations;

    Mutex mutex;

    this(this.parent, this.decl) {
        this.mutex = new Mutex;
    }

    override Symbol resolve(Context context, LocRange locRange) {
        return new ScopeBoundTemplateDecl(this, context.framePointer);
    }

    string mangle() {
        // TODO is this sufficient?
        return this.parent.mangle ~ "_" ~ this.decl.name;
    }

    bool same(TemplateDecl other) {
        return this.mangle == other.mangle; // hax
    }

    (Symbol | fail Error) getInstance(Context context, LocRange locRange, Type[] parameters)
    {
        if (parameters.length != this.decl.typeParameterNames.length) {
            return locRange.fail(
                "Unexpected number of parameters to template: " ~
                "expected $(this.decl.typeParameterNames.length), but got $(parameters.length)");
        }
        bool areSame(Type[] left, Type[] right) {
            if (left.length != right.length) return false;
            return [all left[i].same(right[i]) for i in 0 .. left.length];
        }
        string mangle(Type[] types) {
            return "$(types.length)" ~ [join "_$(type.mangle)" for type in types];
        }

        with (this.mutex.locked) {
            // TODO account for false "loops" from threads somehow
            for (entry in this.instantiations) {
                if (entry.types.areSame(parameters)) {
                    entry.value.case {
                        :instantiating:
                            return locRange.fail("Template instantiation loop");
                        (Symbol symbol, ModuleBase mod):
                            context.compilingModule.addModuleDependency(mod);
                            if (auto latent = symbol.instanceOf(LatentSymbol)) {
                                return latent.resolve(context, locRange);
                            }
                            return symbol;
                    }
                }
            }
        }

        /*
         * Emit instance into new module.
         * This is so that an instantiation with the same types in different modules
         * gets the same reused symbols.
         */
        string moduleMangle = this.mangle ~ "_instance_" ~ parameters.mangle;
        ModuleBase module_ = context.compiler.createModule(
            this.decl.name, moduleMangle, moduleParseTaskId=this.decl.moduleParseTaskId, locRange, null);

        mut size_t offset;
        with (this.mutex.locked) {
            this.instantiations ~= (parameters, :instantiating);
            offset = this.instantiations.length - 1;
        }

        auto instanceNamespace = new TemplateInstantiationNamespace(
                this.parent, this.decl.typeParameterNames, parameters);
        auto instanceContext = context
            .withNamespace(instanceNamespace)
            .withCompilingModule(module_);
        auto astSymbolDecl = this.decl.content.instanceOf(ASTSymbolDeclaration);
        this.decl.content.locRange.assert(!!astSymbolDecl, "invalid declaration for template")?;
        Symbol value = astSymbolDecl.notNull.compileSymbol(instanceContext)?;

        instanceNamespace.memberName = this.decl.content.name;
        instanceNamespace.memberValue = value;

        with (this.mutex.locked) {
            this.instantiations[offset].value = (value, module_);
        }

        Symbol resolvedValue() {
            if (auto latent = value.instanceOf(LatentSymbol)) {
                return latent.resolve(context, locRange);
            }
            return value;
        }
        auto resolvedValue = resolvedValue;

        module_.track(resolvedValue);

        module_.compile(instanceContext)?;

        context.compilingModule.addModuleDependency(module_);

        return resolvedValue;
    }
    override string repr() return "TODO TemplateDecl";
}

class ASTTemplateDecl : ASTSymbolDeclaration
{
    string[] typeParameterNames;

    ASTSymbolDeclaration content;

    string comment;

    // task id of the ASTModule task of the containing module
    string moduleParseTaskId;

    this(this.name, this.typeParameterNames, this.content, this.comment, this.moduleParseTaskId) { }

    override (Symbol | fail Error) compileSymbol(Context context) {
        return new TemplateDecl(context.namespace, this);
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTTemplateDecl'!"); assert(false); }

    nullable ASTFunction eponymousFun() {
        if (auto ret = eponymousProp) return ret.instanceOf(ASTFunction);
        return null;
    }

    nullable ASTSymbolDeclaration eponymousProp() {
        if (content.name == this.name)
            return content;
        return null;
    }

    override string repr() { return "template $name"; }
}

(nullable ASTTemplateDecl | fail Error) parseTemplateDecl(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    auto comment = parser.parseLastComment;
    if (!parser.acceptIdentifier("template")) {
        parser.revert;
        return null;
    }
    parser.commit;
    auto name = parser.parseIdentifier;
    parser.expectToken(TokenType.lparen)?;
    string[] typeParameters = parser.parseTemplateParameters(lexicalContext, swallowErrors=false)?
        .case(:nothing: ({ assert(false); null; }));
    parser.expectToken(TokenType.lcurlybracket)?;
    // TODO generalize (parseSymbol)?
    mut uninitialized ASTSymbol member;
    parser.strip;
    auto contentFrom = parser.from;
    nullable ASTSymbolDeclaration member = parseTemplateContents(parser, lexicalContext)?
        .(that.instanceOf(ASTSymbolDeclaration) if that else null);
    if (!member) {
        return parser.to(contentFrom).fail("template member expected");
    }

    parser.expectToken(TokenType.rcurlybracket)?;
    return new ASTTemplateDecl(
        name, typeParameters, member.notNull, comment, lexicalContext.moduleParseTaskId);
}

(nullable ASTSymbolDeclaration | fail Error) parseTemplateStub(
    Parser parser, LexicalContext lexicalContext, string name, string comment,
    (nullable ASTSymbolDeclaration | fail Error) delegate() parseInner)
{
    parser.begin;
    if (!parser.acceptToken(TokenType.lparen)) {
        parser.revert;
        return null;
    }
    parser.parseTemplateParameters(lexicalContext, swallowErrors=true)?.case {
        :nothing:
            parser.revert;
            return null;
        string[] typeParameters:
            auto inner = parseInner()?;
            if (!inner) {
                parser.revert;
                return null;
            }
            parser.commit;
            return new ASTTemplateDecl(
                name, typeParameters, inner.notNull, comment, lexicalContext.moduleParseTaskId);
    }
}

(string[] | fail Error | :nothing) parseTemplateParameters(
    Parser parser, LexicalContext lexicalContext, bool swallowErrors)
{
    mut string[] typeParameters;
    // ( [identifier [, identifier]*]? )
    auto typeParameter = parser.parseIdentifier;
    if (typeParameter.length == 0) {
        if (!parser.acceptToken(TokenType.rparen)) {
            if (swallowErrors) return :nothing;
            parser.expectToken(TokenType.rparen)?;
        }
    } else {
        typeParameters ~= typeParameter;
        while (!parser.acceptToken(TokenType.rparen)) {
            if (!parser.acceptToken(TokenType.comma)) {
                if (swallowErrors) return :nothing;
                parser.expectToken(TokenType.comma)?;
            }
            auto typeParameter = parser.parseIdentifier;
            if (typeParameter.length == 0) {
                if (swallowErrors) return :nothing;
                return parser.fail("type parameter expected");
            }
            typeParameters ~= typeParameter;
        }
    }
    return typeParameters;
}

// parse "the sort of thing that can appear in a `template`"
// TODO better name for this category. Maybe it really is parseDeclaration?
(nullable ASTDeclaration | fail Error) parseTemplateContents(Parser parser, LexicalContext lexicalContext) {
    if (auto classDecl = parseClassDecl(parser, lexicalContext)?) {
        return classDecl;
    }
    if (auto intfDecl = parseIntfDecl(parser, lexicalContext)?) {
        return intfDecl;
    }
    if (auto decl = lexicalContext.compiler.parseDeclaration(parser, lexicalContext)?) {
        return decl;
    }
    if (auto fun = parseFunction(parser, lexicalContext)?) {
        return fun;
    }
    if (auto enumDecl = parseEnumDecl(parser, lexicalContext)?) {
        return enumDecl;
    }
    return null;
}
