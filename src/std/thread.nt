module std.thread;

import c.pthread;
import neat.runtime : assert;
import std.stdio;

pragma(lib, "pthread");

/**
 * This class implements mutual exclusion.
 *
 * `lock` and `unlock` calls must be paired. Only one thread may be between `lock`
 * and `unlock` at the same time. To enforce this, the second thread's `lock` will
 * block until the first thread calls `unlock`.
 */
class Mutex
{
    pthread_mutex_t mutex;
    mut bool isLocked;

    this() {
        mut pthread_mutexattr_t attrs;
        pthread_mutexattr_init(&attrs);
        pthread_mutexattr_settype(&attrs, PTHREAD_MUTEX_ERRORCHECK);
        pthread_mutex_init(&mutex, &attrs);
        isLocked = false;
    }

    /// Lock the mutex.
    void lock() {
        int ret = pthread_mutex_lock(&mutex);
        if (ret) {
            import c.stdlib : exit;
            print("pthread_mutex_lock $ret");
            exit(1);
        }
        assert(!isLocked);
        isLocked = true;
    }
    /// Scope guard that automatically calls lock on scope entry and unlock on scope exit.
    LockGuard locked() {
        return LockGuard(this);
    }
    /**
     * Scope guard that automatically calls unlock on scope entry and lock on scope exit.
     *
     * Used to implement work loops that want to release their lock to do some task.
     */
    UnlockGuard unlocked() {
        return UnlockGuard(this);
    }
    /// Unlock the mutex.
    void unlock() {
        assert(isLocked);
        isLocked = false;
        int ret = pthread_mutex_unlock(&mutex);
        if (ret) {
            import c.stdlib : exit;
            print("pthread_mutex_unlock $ret");
            exit(1);
        }
    }
}


unittest
{
    auto mutex = new Mutex;

    assert(!mutex.isLocked);
    with (mutex.locked) {
        assert(mutex.isLocked);
    }
    assert(!mutex.isLocked);
}

unittest
{
    auto mutex = new Mutex;

    void returnTest() {
        with (mutex.locked) {
            return;
        }
    }
    returnTest;
    assert(!mutex.isLocked);
}

private struct LockGuard
{
    Mutex mutex;
    void onEnter() {
        mutex.lock;
    }
    void onExit() {
        mutex.unlock;
    }
}

private struct UnlockGuard
{
    Mutex mutex;
    void onEnter() {
        mutex.unlock;
    }
    void onExit() {
        mutex.lock;
    }
}

/**
 * This class implements condition variables.
 *
 * A condition variable allows a thread to wait until a condition is signaled.
 * The provided mutex must be locked when `wait` is called. It will be locked
 * when wait returns, but be unlocked for the intermediate time.
 */
class CondVar
{
    pthread_cond_t cond;

    Mutex mutex;

    this(this.mutex) { pthread_cond_init(&cond, null); }

    /// Wait for a thread to signal us.
    void wait() {
        assert(mutex.isLocked);
        mutex.isLocked = false;
        int ret = pthread_cond_wait(&cond, &this.mutex.mutex);
        if (ret) {
            import c.stdlib : exit;
            print("pthread_cond_wait $ret");
            exit(1);
        }
        assert(!mutex.isLocked);
        mutex.isLocked = true;
    }

    /// Wake up (at least) one waiting thread.
    void signal() {
        int ret = pthread_cond_signal(&cond);
        if (ret) {
            import c.stdlib : exit;
            print("pthread_cond_signal $ret");
            exit(1);
        }
    }

    /// Wake up all waiting threads.
    void broadcast() {
        int ret = pthread_cond_broadcast(&cond);
        if (ret) {
            import c.stdlib : exit;
            print("pthread_cond_broadcast $ret");
            exit(1);
        }
    }
}

/**
 * A convenience wrapper around CondVar that allows waiting
 * for the outcome of an operation.
 */
template Waitable(T)
{
    class Waitable
    {
        Mutex mutex;
        CondVar signal;
        mut T value;
        /// Create the class with an initial value.
        this(this.value) {
            this.mutex = new Mutex;
            this.signal = new CondVar(this.mutex);
        }
        /// Set the stored value to a new value.
        void set(T value) {
            with (mutex.locked) {
                this.value = value;
                signal.broadcast;
            }
        }
        /// Provide an action that updates the stored value.
        void update(T delegate!(T) action) {
            with (mutex.locked) {
                this.value = action(this.value);
                signal.broadcast;
            }
        }
        /// Wait for the stored value to fulfill the condition.
        void waitFor(bool delegate!(T) condition) {
            T id(T value) { return value; }
            waitReact(condition, &id);
        }
        /// Wait for the stored value to fulfill the condition, then modify it.
        void waitReact(bool delegate!(T) condition, T delegate!(T) react) {
            with (mutex.locked) while (true) {
                if (condition(this.value)) {
                    this.value = react(this.value);
                    signal.broadcast;
                    return;
                }
                signal.wait;
            }
        }
    }
}

/**
 * This class implements a counting semaphore.
 *
 * `acquire` will only return when a matching number
 * of `release` calls has taken place.
 */
class Semaphore
{
    Waitable!int waitable;

    /// Initialize the class with a number of available tokens.
    this(int i) { this.waitable = new Waitable!int(i); }

    /// Consume a token if available; block if not.
    void acquire() {
        bool greaterZero(int i) { return i > 0; }
        int decrement(int i) { return i - 1; }
        waitable.waitReact(&greaterZero, &decrement);
    }

    /// Provide a token.
    void release() {
        int increment(int i) { return i + 1; }
        waitable.update(&increment);
    }
}

/**
 * The superclass for a task that can be scheduled to run on a thread pool.
 */
abstract class Task
{
    abstract void run();
}

private class Thread
{
    pthread_t thr;
    ThreadPool pool;
    void delegate() runDg;

    this(this.pool) { runDg = &run; }
    void start() {
        // placeholder that's definitely (I'd hope so!) large enough for a pthread_attr_t.
        mut pthread_attr_t attr;
        pthread_attr_init(&attr);
        pthread_attr_setstacksize(&attr, 8*1024*1024);
        pthread_create(&thr, &attr, &call_thread_dg, &runDg);
    }
    void run() {
        while (true) {
            pool.getTask.run;
            pool.doneTasks.release;
        }
    }
}

/**
 * A thread pool decouples threads and units of action. It manages multiple threads
 * and keeps a queue of tasks, which are distributed over threads as they become available.
 */
class ThreadPool
{
    Mutex mutex;
    mut Task[] tasks;
    Thread[] threads;
    mut int queuedTasks;
    Semaphore waitingTasks;
    Semaphore doneTasks;

    /// Create a thread pool with a number of threads.
    this(int i) {
        this.mutex = new Mutex;
        this.waitingTasks = new Semaphore(0);
        this.doneTasks = new Semaphore(0);
        for (j in 0 .. i) {
            auto thread = new Thread(this);
            thread.start;
            threads ~= thread;
        }
    }
    /**
     * Returns when all queued tasks have completed.
     * The callback will be invoked with a number between 0 and 1, indicating progress.
     * Intended for standalone tools that want to present a progress bar.
     */
    void waitComplete(void delegate!(float) progress) {
        mut int tasks;
        with (this.mutex.locked) {
            tasks = this.queuedTasks;
            this.queuedTasks = 0;
        }
        for (i in 0 .. tasks) {
            this.doneTasks.acquire;
            progress((cast(int) i + 1) * 1.0f / tasks);
        }
    }
    /**
     * Add a task to the pool's task queue.
     */
    void addTask(Task task) {
        with (mutex.locked) {
            tasks ~= task;
            this.queuedTasks += 1;
        }
        this.waitingTasks.release;
    }
    /**
     * For internal use, returns a task when one has been queued.
     */
    Task getTask()  {
        this.waitingTasks.acquire;
        with (mutex.locked) {
            auto ret = tasks[0];
            tasks = tasks[1 .. $];
            return ret;
        }
    }
}

// TODO: null to function ptr
private void nothing(void*) { }

// TODO: tomorrow, class in template docgen!
/**
 * This class wraps a value that is unique per thread accessing it.
 */
template ThreadLocal(T) {
    class ThreadLocal {
        pthread_key_t key;
        /// Initialize a `ThreadLocal`.
        this() {
            pthread_key_create(&key, &nothing);
        }
        /**
         * Set the `ThreadLocal` to a new value.
         */
        void set(mut T value) {
            import neat.runtime.stdlib : malloc, memcpy, memset;

            mut auto memory = pthread_getspecific(key);
            if (!memory) {
                memory = malloc(sizeof(T));
                pthread_setspecific(key, memory);
            }
            // TODO: __leak()?
            memcpy(memory, &value, sizeof(T));
            // destroy the value without releasing it: cause a leak.
            memset(&value, 0, sizeof(T));
        }
        /**
         * Get the value stored in the `ThreadLocal`.
         * If `set` has not been called, the default value for the type
         * is returned.
         */
        T get() {
            import neat.runtime.stdlib : memcpy, memset;

            auto memory = pthread_getspecific(key);
            if (!memory) {
                T t;
                return t;
            }
            mut uninitialized T copy;
            memcpy(&copy, memory, sizeof(T));
            mut auto result = copy;
            memset(&copy, 0, sizeof(T));
            return result;
        }
    }
}
