module day19;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.math;
import std.stdio;
import std.string;

struct Resources {
    int ore;
    int clay;
    int obsidian;
    int geode;
    Resources add(Resources other)
        => Resources(ore + other.ore, clay + other.clay,
                     obsidian + other.obsidian, geode + other.geode);
    Resources addi(int other) => add(Resources(other, other, other, other));
    Resources sub(Resources other)
        => Resources(ore - other.ore, clay - other.clay,
                     obsidian - other.obsidian, geode - other.geode);
    int divmin(Resources other) {
        mut int res = int.max;
        if (other.ore) res = res.min(ore / other.ore);
        if (other.clay) res = res.min(clay / other.clay);
        if (other.obsidian) res = res.min(obsidian / other.obsidian);
        if (other.geode) res = res.min(geode / other.geode);
        return res;
    }
    bool allGrEq(Resources other)
        => ore >= other.ore && clay >= other.clay
            && obsidian >= other.obsidian && geode >= other.geode;
    string toString() => "<$ore ore, $clay clay, $obsidian obsidian, $geode geode>";
}

void main()
{
    auto findCost = (array, resource) => [
        first a.split(" ")[0].atoi for a in array where a.endsWith(resource)
        else 0];
    auto decodeCost = text => text.split(" and ").(Resources(
        ore=that.findCost("ore"),
        clay=that.findCost("clay"),
        obsidian=that.findCost("obsidian"),
        geode=that.findCost("geode")));
    auto decodeBlueprint = line => (
        oreBot=line.between("ore robot costs ", ".").decodeCost,
        clayBot=line.between("clay robot costs ", ".").decodeCost,
        obsidianBot=line.between("obsidian robot costs ", ".").decodeCost,
        geodeBot=line.between("geode robot costs ", ".").decodeCost);
    auto blueprints = stdin.byLine
        .filter(a => !a.empty)
        .map(decodeBlueprint)
        .array;
    alias Blueprint = typeof(blueprints[0]);
    int rate(int id, int tMax) {
        auto blueprint = blueprints[id];
        mut int bestGeodes;
        int recurse(int minute, Blueprint blueprint, Resources bots, Resources storage) {
            int tRem = tMax - minute;
            int minPossibleGeodes = storage.geode + bots.geode * tRem;
            if (minPossibleGeodes > bestGeodes) {
                print("$(id + 1): improved score to $(minPossibleGeodes)");
                bestGeodes = minPossibleGeodes;
            }
            if (minute == tMax) {
                return storage.geode;
            }
            Resources maxPossibleResources = storage.add(bots.addi(tRem * tRem));
            int maxAdditionalGeodeBots = maxPossibleResources.divmin(blueprint.geodeBot);
            int maxPossibleGeodes = storage.geode + bots.geode * tRem + (maxAdditionalGeodeBots * tRem + 1) / 2;
            // print("$tRem $maxPossibleResources $maxPossibleGeodeBots $maxPossibleGeodes");
            if (maxPossibleGeodes <= bestGeodes)
                return bestGeodes;
            mut int maxOutcome = bestGeodes;
            void tryBuy(Resources cost, Resources botBuilt) {
                if (storage.allGrEq(cost)) {
                    auto outcome = recurse(
                        minute + 1, blueprint,
                        bots.add(botBuilt), storage.sub(cost).add(bots));
                    if (outcome > maxOutcome) maxOutcome = outcome;
                }
            }
            tryBuy(blueprint.oreBot, Resources(1, 0, 0, 0));
            tryBuy(blueprint.clayBot, Resources(0, 1, 0, 0));
            tryBuy(blueprint.obsidianBot, Resources(0, 0, 1, 0));
            tryBuy(blueprint.geodeBot, Resources(0, 0, 0, 1));
            tryBuy(Resources(0, 0, 0, 0), Resources(0, 0, 0, 0));
            return maxOutcome;
        }
        return recurse(0, blueprint, Resources(1, 0, 0, 0), Resources(0, 0, 0, 0));
    }

    print("blueprints: $blueprints");
    auto quality = id => rate(cast(int) id, tMax=24) * (id + 1);
    auto qualities = [i.quality for i in 0 .. blueprints.length];
    auto sum = [sum a for a in qualities];
    print("qualities: $qualities, sum $sum");
    auto scores = [rate(cast(int) id, tMax=32) for id in 0 .. min(blueprints.length, 3)];
    print("scores: $scores, $(scores.mul)");
}

int mul(R)(R range) {
    mut int res = 1;
    for (a in range) res *= a;
    return res;
}

string between(string text, string from, string to) {
    int start = text.find(from);
    assert(start != -1);
    int end = text[start + from.length .. $].find(to);
    assert(end != -1);
    return text[start + from.length .. $][0 .. end];
}
