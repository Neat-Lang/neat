module backend.base;

// TODO move out of neat.
import neat.hash;
import helpers;

abstract class BackendFunction
{
    int[int] numberedRegs;

    abstract int arg(int index);
    // TODO literal(byte|short|int|long|float|double|string)
    abstract int shortLiteral(int value);
    abstract int byteLiteral(int value);
    abstract int intLiteral(long value);
    abstract int longLiteral(long value);
    abstract int wordLiteral(Platform platform, long value);
    abstract int floatLiteral(float value);
    abstract int doubleLiteral(double value);
    abstract int stringLiteral(string text);
    abstract int voidLiteral();
    abstract int zeroLiteral(BackendType type);
    abstract int structLiteral(BackendType struct_, int[] regs);
    abstract int symbolList(string name);
    abstract int globalVar(string name, BackendType type, bool define, bool threadlocal);
    abstract int binop(string op, BackendType type, int left, int right);
    abstract int bitcast(int from, BackendType to);
    abstract int zeroExtend(int value, BackendType to);
    abstract int signExtend(int value, BackendType to);
    abstract int trunc(int value, BackendType to);
    // (int, float, double) to (int, float, double)
    abstract int convert(int reg, BackendType to);
    abstract int call(BackendType ret, string name, int[] args);
    abstract int getFuncPtr(BackendType type, string name);
    abstract int callFuncPtr(BackendType type, int reg, int[] args);
    abstract int load(BackendType backendType, int reg);
    // replacement for the previously used savestack/alloca/restorestack dance
    // return an alloca pointer, but it's the same pointer every time we pass over this instr
    abstract int staticAlloca(BackendType backendType);
    // Given a pointer register, indicate that every load from this register past this point
    // will produce the same value.
    void markPointerInvariant(int reg) { }
    // Given a register, return a pointer to the value in the register.
    // The caller promises to not mutate this pointer.
    // May be overridden in backend, for instance if 'reg' already has a pointer.
    int toPtr(BackendType backendType, int reg) {
        int storage = staticAlloca(backendType);
        store(backendType, storage, reg);
        markPointerInvariant(storage);
        return storage;
    }
    abstract int field(BackendType backendType, int reg, int index);
    // pointers to a zero-size field are free to be any value that is convenient, such as null.
    // TODO figure out if we want something better in that case.
    abstract int fieldOffset(BackendType backendType, int reg, size_t index);
    abstract int ptrOffset(BackendType backendType, int ptrReg, int offsetReg);
    abstract void store(BackendType backendType, int target_reg, int value_reg);
    abstract void ret(int reg);
    abstract void branch(string label);
    abstract void testBranch(int reg, string thenLabel, string elseLabel);
    abstract void switch_(int reg, (int value, string label)[] targets, string defaultLabel);
    abstract void setLabel(string label);
    abstract void setLocation(BackendLocation loc);
    abstract void unreachable();
    // TODO fix this
    abstract string getLabel();
    abstract string getCurrentLabel();
    // call when the function is finished
    void done() { }

    bool hasNumberedReg(int index) {
        return numberedRegs.has(index);
    }

    int getNumberedReg(int index) {
        assert(hasNumberedReg(index));
        return numberedRegs[index];
    }

    void setNumberedReg(int index, int value) {
        /*if (numberedRegs.has(index)) {
            print("double-write $index = $value in $this");
            assert(false);
        }*/
        numberedRegs[index] = value;
    }

    bool isBooleanOp(string op) {
        return op == "==" || op == "!=" || op == "<" || op == ">" || op == "<=" || op == ">=";
    }

    string toString() => "BackendFunction";
}

interface PhiCapable
{
    // registers must be materialized in their branch before phi is called.
    // That is, if we have deferred the computation of a register, we use
    // 'materialize' to compute it now.
    int materialize(BackendType backendType, int reg);
    int phi(BackendType backendType, (string pred, int reg)[] sources);
}

// compilation unit
abstract class BackendModule
{
    bool[string] alreadySeen;

    abstract void declare(string name, BackendType ret, BackendType[] params, bool variadic);
    abstract bool declared(string name);
    abstract BackendFunction define(
        string name, string decoration, BackendType ret, BackendType[] params, BackendLocation loc)
    {
        assert(false);
    }
    abstract void declareSymbolList(string name, size_t length);
    abstract void defineSymbolList(string name, (string | size_t)[] symbols);

    // allow to only emit a symbol once per module
    bool once(string identifier) {
        if (alreadySeen.has(identifier)) {
            return false;
        }
        alreadySeen[identifier] = true;
        return true;
    }

    // called before emitting, or whatever you do with it
    void done() { }
}

struct BackendLocation
{
    string file;
    int line;
    int column;
}

abstract class Backend
{
    abstract BackendModule createModule(
        Platform platform, string targetFile, BackendLocation loc, bool forMacro);
    abstract void hash(Hash hash);
}

struct PlatformFlags
{
    bool releaseMode;

    this() { this.releaseMode = false; }
}

class Platform
{
    BackendType nativeWordType;

    PlatformFlags platformFlags;

    /**
     * Set with `neat -version=identifier`.
     * Tested with `version (identifier) { }`.
     * This does not open a new scope.
     * NOTE: Only works in struct right now!
     */
    string[] versions;

    string ident;

    this(this.nativeWordType, this.platformFlags, this.versions) {
        this.void_ = new BackendVoidType;
        this.voidp = new BackendPointerType(this.void_);
        // add platform details to this (used for caching)
        this.ident = "$(nativeWordType.repr)";
    }

    // cached type instances
    // TODO remove for once
    BackendType void_;
    BackendType voidp;
}

abstract class BackendType
{
    abstract string repr();
    abstract int size(Platform platform);
    abstract int alignment(Platform platform);
    abstract bool same(BackendType other);
    string toString() => repr;
}

class BackendLongType : BackendType
{
    this() { }
    override string repr() { return "long"; }
    override int size(Platform platform) { return 8; }
    override int alignment(Platform platform) { return 8; }
    override bool same(BackendType other) { return !!other.instanceOf(BackendLongType); }
}

class BackendIntType : BackendType
{
    this() { }
    override string repr() { return "int"; }
    override int size(Platform platform) { return 4; }
    override int alignment(Platform platform) { return 4; }
    override bool same(BackendType other) { return !!other.instanceOf(BackendIntType); }
}

class BackendShortType : BackendType
{
    this() { }
    override string repr() { return "short"; }
    override int size(Platform platform) { return 2; }
    override int alignment(Platform platform) { return 2; }
    override bool same(BackendType other) { return !!other.instanceOf(BackendShortType); }
}

class BackendCharType : BackendType
{
    this() { }
    override string repr() { return "char"; }
    override int size(Platform platform) { return 1; }
    override int alignment(Platform platform) { return 1; }
    override bool same(BackendType other) { return !!other.instanceOf(BackendCharType); }
}

class BackendVoidType : BackendType
{
    this() { }
    override string repr() { return "void"; }
    override int size(Platform platform) { return 0; }
    override int alignment(Platform platform) { return 1; }
    override bool same(BackendType other) { return !!other.instanceOf(BackendVoidType); }
}

class BackendFloatType : BackendType
{
    this() { }
    override string repr() { return "float"; }
    override int size(Platform platform) { return 4; }
    override int alignment(Platform platform) { return 4; }
    override bool same(BackendType other) { return !!other.instanceOf(BackendFloatType); }
}

class BackendDoubleType : BackendType
{
    this() { }
    override string repr() { return "double"; }
    override int size(Platform platform) { return 8; }
    override int alignment(Platform platform) { return 8; }
    override bool same(BackendType other) { return !!other.instanceOf(BackendDoubleType); }
}

class BackendPointerType : BackendType
{
    BackendType target;

    this(BackendType target) { this.target = target; }

    override string repr() { return this.target.repr ~ "*"; }
    override int size(Platform platform) { return platform.nativeWordType.size(platform); }
    override int alignment(Platform platform) { return platform.nativeWordType.size(platform); }
    override bool same(BackendType other) {
        auto otherPtr = other.instanceOf(BackendPointerType);
        return otherPtr && this.target.same(otherPtr.target);
    }
}

class BackendFunctionPointerType : BackendType
{
    BackendType ret;
    BackendType[] params;
    bool variadic;

    this(this.ret, this.params, this.variadic) { }

    override int size(Platform platform) { return platform.nativeWordType.size(platform); }
    override int alignment(Platform platform) { return platform.nativeWordType.size(platform); }
    override bool same(BackendType other) {
        auto otherFp = other.instanceOf(BackendFunctionPointerType);
        if (!otherFp || !this.ret.same(otherFp.ret) || this.params.length != otherFp.params.length)
            return false;
        for (mut int i = 0; i < this.params.length; i += 1)
            if (!this.params[i].same(otherFp.params[i])) return false;
        if (otherFp.variadic != this.variadic) return false;
        return true;
    }
    override string repr() {
        mut string args;
        for (i, param in params) {
            if (i) args ~= ", ";
            args ~= param.repr;
        }
        return "$(ret.repr) function($args)";
    }
}

class BackendStructType : BackendType
{
    BackendType[] members;

    this(BackendType[] members) { this.members = members; }

    override string repr() {
        if (!members.length) return "{ }";
        mut string ret = "{ ";
        for (i, member in members) {
            if (i) ret ~= ", ";
            ret ~= member.repr;
        }
        return ret ~ " }";
    }

    int memberOffset(int index, Platform platform) {
        (int size, int alignment) prefix = calcPrefix(platform, this.members[0 .. index]);
        int memberAlignment = this.members[index].alignment(platform);
        return roundToNext(prefix.size, memberAlignment);
    }

    override int size(Platform platform) {
        // TODO destructuring by unnamed variable
        (int size, int alignment) pair = calcPrefix(platform, this.members);

        return roundToNext(pair.size, pair.alignment);
    }

    override int alignment(Platform platform) {
        (int size, int alignment) pair = calcPrefix(platform, this.members);

        return pair.alignment;
    }

    override bool same(BackendType other) {
        auto otherStr = other.instanceOf(BackendStructType);
        if (!otherStr || this.members.length != otherStr.members.length)
            return false;
        for (mut int i = 0; i < this.members.length; i += 1)
            if (!this.members[i].same(otherStr.members[i])) return false;
        return true;
    }
}

class BackendSpacerType : BackendType
{
    int size_;
    int alignment_;

    this(int size, int alignment) { this.size_ = size; this.alignment_ = alignment; }

    override string repr() { return "TODO spacer"; }
    override int size(Platform platform) { return this.size_; }
    override int alignment(Platform platform) { return this.alignment_; }
    override bool same(BackendType other) {
        auto otherSpacer = other.instanceOf(BackendSpacerType);
        return otherSpacer && this.size_ == otherSpacer.size_ && this.alignment_ == otherSpacer.alignment_;
    }
}

class BackendStaticArrayType : BackendType
{
    BackendType element;
    int length;

    this(BackendType element, int length) { this.element = element; this.length = length; }

    override string repr() { return element.repr ~ "[" ~ itoa(length) ~ "]"; }
    override int size(Platform platform) { return element.size(platform) * length; }
    override int alignment(Platform platform) { return this.element.alignment(platform); }
    override bool same(BackendType other) {
        auto otherSA = other.instanceOf(BackendStaticArrayType);
        return otherSA && this.length == otherSA.length && this.element.same(otherSA.element);
    }
}

(int size, int alignment) calcPrefix(Platform platform, BackendType[] members)
{
    mut int structSize = 0;
    mut int structAlign = 1;
    for (mut int i = 0; i < members.length; i += 1) {
        auto member = members[i];
        int alignment = member.alignment(platform);
        int size = member.size(platform);
        // round to next <alignment>
        structSize = roundToNext(structSize, alignment) + size;
        if (alignment > structAlign) structAlign = alignment;
    }
    return (structSize, structAlign);
}

int roundToNext(mut int size, int alignment)
{
    size = size + alignment - 1;
    // alignment is a power of two, so alignment - 1 is a mask
    // size -= size % alignment;
    size = size - (size & (alignment - 1));
    return size;
}
