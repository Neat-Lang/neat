module day3;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.stdio;
import std.string;

int priority(char ch) {
    if (ch >= "a"[0] && ch <= "z"[0]) return 1 + ch - "a"[0];
    if (ch >= "A"[0] && ch <= "Z"[0]) return 27 + ch - "A"[0];
    assert(false);
}

T[] overlap(T)(T[] first, T[] second) {
    return first.filter(a => [any a == b for b in second]).array;
}

T[] overlap3(T)(T[] first, T[] second, T[] third) {
    return first.overlap(second).overlap(third);
}

void main()
{
    auto lines = stdin.byLine.filter(a => !a.empty).array;
    auto result1 = lines
        .map(a => (left=a[0..$/2], right=a[$/2..$]))
        .map(pair => pair.(overlap(left, right))[0])
        .([sum ch.priority for ch in that]);
    print("Sum of priorities is $result1");
    auto result2 = lines
        .([that[i*3 .. (i+1)*3] for i in 0 .. that.length / 3])
        .map(group => overlap3(group[0], group[1], group[2])[0])
        .([sum ch.priority for ch in that]);
    print("Sum of badge priorities is $result2");
}
