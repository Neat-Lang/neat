module neat.pragmas;

import helpers;
import neat.base;
import neat.expr;
import neat.runtime : assert;
import neat.types;
import polyhash;

(nullable ASTPragma | fail Error) parsePragma(Parser parser, LexicalContext lexicalContext)
{
    if (!parser.accept("pragma"))
        return null;
    parser.expectToken(TokenType.lparen)?;
    auto from = parser.from;
    auto name = parser.parseIdentifier;
    auto locRange = parser.to(from);
    mut ASTSymbol[] args;
    while (parser.acceptToken(TokenType.comma)) {
        if (auto arg = lexicalContext.compiler.parseExpression(parser, lexicalContext)?)
            args ~= arg;
        else return parser.fail("Expected expression argument");
    }
    parser.expectToken(TokenType.rparen)?;
    parser.expectToken(TokenType.semicolon)?;
    return new ASTPragma(name, args, locRange);
}

class ASTPragma : ASTPragmaBase
{
    string name;

    ASTSymbol[] args;

    LocRange locRange;

    this(this.name, this.args, this.locRange) { }

    override (FinishedSymbol | fail Error) compile(Context context) {
        if (this.name == "lib") {
            if (this.args.length != 1)
                return this.locRange.fail("Unexpected arguments for pragma(lib)");
            auto asStr = this.args[0].instanceOf(ASTStringLiteral);
            if (!asStr) return this.args[0].locRange.fail("Expected string as argument for pragma(lib)");
            return new PragmaLibHint(asStr.text);
        }
        // Note: We don't skip unknown pragmas, because we don't
        // care about cross-compiler compat. (what other compilers?)
        return this.locRange.fail("Unknown pragma '$name'");
    }
}

class PragmaLibHint : FinishedSymbol
{
    string library;

    this(this.library) { }

    override void emit(Generator generator) {
        generator.addLibrary(this.library);
    }

    override void hash(Hash hash) {
        hash.adds("pragma_lib");
        hash.adds(this.library);
    }
}
