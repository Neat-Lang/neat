module neat.decl;

import neat.base;
import neat.statements;
import neat.util;

class ASTAliasDecl : ASTSymbolDeclaration
{
    ASTSymbol target;

    this(this.name, this.target, this.locRange=__RANGE__) { }

    override (Namespace | Error) compile(Context context) {
        if let(auto astIndex = context.compiler.destructAstIndex(target)?) {
            auto name = this.name.name(context.warmContext);
            /**
             * Magic that enables `alias a = foo[5]; a = 3;`
             */
            return new IndexNamespace(name, expr=target, base=astIndex.base, index=astIndex.index,
                parent=context.namespace);
        }
        return super.compile(context);
    }

    override (Symbol | Error) compileSymbol(Context context) {
        return this.target.compile(context)?;
    }
}

(nullable ASTDeclaration | Error) parseAliasDecl(Parser parser, LexicalContext lexicalContext) {
    parser.begin;
    auto comment = parser.parseLastComment;
    if (!parser.acceptIdentifier("alias")) {
        parser.revert;
        return null;
    }
    auto from = parser.from;
    auto name = lexicalContext.compiler.parseIdentifierSymbol(parser, lexicalContext)??
        else return parser.fail("alias name expected");
    parser.commit;
    auto locRange = parser.to(from);
    (nullable ASTSymbolDeclaration | Error) parseRest() {
        parser.expectToken(TokenType.equal)?;
        parser.begin;
        mut nullable ASTSymbol target = lexicalContext.compiler.parseType(parser, lexicalContext)?;
        if (target && target.instanceOf(ASTIdentifier)) {
            // It was a very trivial type; let's try to get it as an
            // expression instead in case there's some expression stuff after it.
            target = null;
            parser.revert;
            parser.begin;
        }
        if (!target) target = lexicalContext.compiler.parseExpression(parser, lexicalContext)?;
        auto target = target? else return parser.from.fail("alias target expected");
        parser.expectToken(TokenType.semicolon)?;
        parser.commit;
        return new ASTAliasDecl(name, target, locRange);
    }
    if (auto ret = lexicalContext.compiler.parseTemplateStub(parser, lexicalContext, name, comment, &parseRest)?)
        return ret;
    return parseRest?;
}

class IndexNamespace : Namespace
{
    string name;

    ASTSymbol expr;

    ASTSymbol base;

    ASTSymbol index;

    this(this.name, this.expr, this.base, this.index, Namespace parent) {
        super(parent, isContextScope=parent.isContextScope);
    }

    override (nullable Symbol | Error) lookup(
        string name, Context context, LookupReason reason, LocRange locRange)
    {
        if (name != this.name)
            return this.parent?.lookup(name, context, reason, locRange)?? else null;

        if (reason == LookupReason.identifier || reason == LookupReason.ufcs) {
            auto ret = this.expr.compile(context)?;
            return ret;
        } else if (reason == LookupReason.assignment) {
            auto base = this.base.compile(context)?.beExpressionImplCall(context, this.base.locRange)?;
            return new IndexAssignmentHelper(base, index=this.index, this.expr.locRange);
        } else {
            assert(false);
        }
    }

    override string repr() => "$name ($(expr.repr))";
}

class IndexAssignmentHelper : AssignmentHelper
{
    Expression base;

    ASTSymbol index;

    LocRange locRange;

    this(this.base, this.index, this.locRange) {}

    override (nullable Statement | Error) assign(Context context, Expression value) {
        return this.base.type.indexAssignment(context, this.base, this.index, value, this.locRange);
    }

    override bool mayCallImplicit() => false;
}
