module neat.FileIdTableImpl;

macro import package(compiler).std.macro.listcomprehension;

import package(compiler).std.file;
import package(compiler).std.json;
import package(compiler).std.thread;

import neat.base;
import neat.runtime;

extern(C) int open(char*, int flags, int mode);
extern(C) int close(int);
extern(C) int flock(int fd, int operation);
alias O_CREAT = (64);
alias LOCK_EX = (2);

final class FileIdTableImpl : FileIdTable
{
    mut bool[int] pinnedFileIds;

    FileIdCache fileIdCache;

    Mutex mutex;

    mut string[int] fileName;

    this() { this.fileIdCache = new FileIdCache; this.mutex = new Mutex; }

    override int toFileId(string filename) with (this.mutex.locked) {
        int id = fileIdCache.getIdFor(filename);
        fileName[id] = filename;
        return id;
    }

    override void setInheritedFileId(int id, string filename) with (this.mutex.locked) {
        if (fileIdCache.getIdFor(filename, id) != id) {
            // TODO delete .obj if compiler hash mismatches stored hash on start
            print("Error: object cache does not match compiler build, please 'rm -rf .obj/'");
            exit(1);
        }
        fileName[id] = filename;
    }

    override string toFileName(int fileId) with (this.mutex.locked) {
        if (fileName.has(fileId)) return fileName[fileId];
        return "[UNKNOWN ?$fileId]";
    }

    /**
     * When compiling an expression that will evaluate to a fileId in the target binary,
     * the fileId used must be pinned so that the FileIdTable created in the target binary
     * can be prepopulated.
     */
    override void pin(int fileId) with (this.mutex.locked) {
        pinnedFileIds[fileId] = true;
    }
}

/**
 * Cache assigned file IDs between runs.
 * Avoids file ID divergence in multithreaded builds.
 */
class FileIdCache
{
    Mutex mutex;

    alias file = (".obj/file_id_cache.json");

    // used to avoid write corruption
    mut int serialCounter;

    mut int[string] fileId;

    mut bool[int] used;

    this() {
        this.mutex = new Mutex;
        this.serialCounter = 0;
    }

    int getIdFor(string name, int defaultId = -1) with (this.mutex.locked) {
        while (true) {
            if (this.fileId.has(name)) return this.fileId[name];
            mut int setId = defaultId if defaultId != -1 else nextFreeId;
            if (set(name, setId)) return setId;
        }
    }

    private int nextFreeId() {
        mut int i = 0;
        while (used.has(i)) i++;
        return i;
    }

    private bool set(string name, int id) {
        version (windows) {}
        else {
            auto lockFd = open(file, O_CREAT, 0x1A4 /* 0644 */);
            flock(lockFd, LOCK_EX);
        }
        // we can still open the file with other FDs.
        int oldSerialCounter = this.serialCounter;
        load;
        if (oldSerialCounter != this.serialCounter)
            return false;
        this.fileId[name] = id;
        this.used[id] = true;
        save;
        version (windows) {}
        else {
            close(lockFd);
        }
    }

    private void load() {
        if (!file.exists || file.readText.empty) return;
        JSONValue cache = JSONValue.loadFile(file);
        auto obj = cache.expect!((string key, JSONValue value)[])? else return;
        for (kv in obj) {
            auto name = kv.key;
            auto id = kv.value.expect!int?;
            if (name == "serialCounter") {
                this.serialCounter = serialCounter;
            } else {
                this.fileId[name] = id;
                this.used[id] = true;
            }
        }
    }

    private void save() {
        mut (string key, JSONValue value)[] entries;
        for (key in fileId.keys) {
            entries ~= (key, JSONValue(fileId[key]));
        }
        entries ~= ("serialCounter", JSONValue(++this.serialCounter));
        auto cache = JSONValue(entries);
        file.writeText(cache.toString);
    }
}

private (T | :else) expect(T)(JSONValue value) {
    value.value.case {
        T t: return t;
        default: return :else;
    }
}
