module day2;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.stdio;
import std.string;

enum Shape { rock, paper, scissors }
enum Outcome { win, loss, draw }
alias Game = (Shape theirs, Shape mine);

Game parseInterp1(string theirs, string mine)
{
    return (
        Shape.rock if theirs == "A" else Shape.paper if theirs == "B" else Shape.scissors,
        Shape.rock if mine == "X" else Shape.paper if mine == "Y" else Shape.scissors);
}

(Shape theirs, Outcome mine) parseInterp2(string theirs, string mine)
{
    return (
        Shape.rock if theirs == "A" else Shape.paper if theirs == "B" else Shape.scissors,
        Outcome.loss if mine == "X" else Outcome.draw if mine == "Y" else Outcome.win);
}

Game resolve((Shape theirs, Outcome required) strategy)
{
    return strategy.((
        theirs=theirs,
        ours=[
            first mine for mine in [Shape.rock, Shape.paper, Shape.scissors]
            where outcome((theirs, mine)) == required]));
}

Outcome outcome(Game game) {
    bool beats(Shape mine, Shape theirs) return
        mine == Shape.rock && theirs == Shape.scissors
        || mine == Shape.paper && theirs == Shape.rock
        || mine == Shape.scissors && theirs == Shape.paper;
    if (game.mine == game.theirs) return Outcome.draw;
    if (game.mine.beats(game.theirs)) return Outcome.win;
    return Outcome.loss;
}

int judgeGame(Game game) return game.outcome.(
    6 if that == Outcome.win
    else 3 if that == Outcome.draw
    else 0);

int judgeShape(Shape shape) return shape.(
    1 if that == Shape.rock
    else 2 if that == Shape.paper
    else 3);

void main()
{
    auto input = stdin.byLine
        .filter(a => !a.empty)
        .map(a => a.split(" ").((theirs=that[0], mine=that[1])))
        .array;

    auto strategy1 = input.map(a => parseInterp1(theirs=a.theirs, mine=a.mine)).array;
    auto score1 = [sum (a.judgeGame + a.mine.judgeShape) for a in strategy1];
    print("Strategy guide score, interpretation 1 is $score1");

    auto strategy2 = input.map(a => parseInterp2(theirs=a.theirs, mine=a.mine).resolve).array;
    auto score2 = [sum (a.judgeGame + a.mine.judgeShape) for a in strategy2];
    print("Strategy guide score, interpretation 2 is $score2");
}
