module spinny;

macro import std.macro.cimport;
import c_header("GL/gl.h");
import c_header("GL/glu.h");
import c_header("GLFW/glfw3.h");
import std.math;
import std.math.matrix;
import std.stdio;

version (windows) {
    pragma(lib, "opengl32");
    pragma(lib, "glu32");
    pragma(lib, "glfw3");
} else {
    pragma(lib, "GL");
    pragma(lib, "GLU");
    pragma(lib, "glfw");
}

alias rings = 10;
alias texWidth = 768;
alias ringSteps = 90;
alias PI2 = (cast(float) (PI * 2));

class Ring {
    float speed;
    int textureId;
    mut float rotation;
    this(this.speed, this.textureId) {
        this.rotation = 0;
    }
    void step(float f) {
        this.rotation += this.speed * f;
    }
}

Ring[] initRings() {
    mut Ring[] result;
    for (i in 0 .. rings) {
        auto speed = powf(randf * 10, 1.6) - 10;
        mut int textureId;
        glGenTextures(1, &textureId);
        auto data = new ubyte mut[](texWidth * 4);
        mut bool solid = false;
        for (i in 0 .. texWidth) {
            if (randf < 0.1) {
                solid = !solid;
            }
            data[i * 4 + 0] = 0;
            data[i * 4 + 1] = 0;
            data[i * 4 + 2] = 0;
            data[i * 4 + 3] = cast(ubyte) ((255 if randf > 0.5 else 0) if solid else 0);
        }
        glBindTexture(GL_TEXTURE_2D, textureId);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, texWidth, 1,
            0, GL_RGBA, GL_UNSIGNED_BYTE, data.ptr);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
        result ~= new Ring(speed, textureId);
    }
    return result;
}

void display(Ring[] rings) {
    glTranslatef(0, 0, -2.0f);
    for (int i, ring in rings) {
        glPushMatrix;
            glTranslatef(0, (i - cast(int) rings.length / 2) * 0.15f, 0);
            glRotatef(ring.rotation, 0, 1, 0);
            glBindTexture(GL_TEXTURE_2D, ring.textureId);
            glBegin(GL_QUADS);
            for (i in 0 .. ringSteps) {
                float at = i * 1.0f / ringSteps;
                float to = (i + 1) * 1.0f / ringSteps;
                glTexCoord2f(at, 0); glVertex3f(sin(at * PI2), 0, cos(at * PI2));
                glTexCoord2f(to, 0); glVertex3f(sin(to * PI2), 0, cos(to * PI2));
                glTexCoord2f(to, 1); glVertex3f(sin(to * PI2), 0.1, cos(to * PI2));
                glTexCoord2f(at, 1); glVertex3f(sin(at * PI2), 0.1, cos(at * PI2));
            }
            glEnd;
        glPopMatrix;
    }
}

void step(Ring[] rings, float step) {
    for (ring in rings) {
        ring.step(step);
    }
}

void main(string[] args) {
    glfwInit;

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 2);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);

    auto window = glfwCreateWindow(800, 600, "Spinny Barcode Demo", null, null);

    glfwMakeContextCurrent(window);
    glfwSwapInterval(1);

    glClearColor(1, 1, 1, 1);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    glAlphaFunc(GL_GREATER, 0);
    glEnable(GL_TEXTURE_2D);
    glEnable(GL_ALPHA_TEST);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_BLEND);

    auto rings = initRings;
    mut float lastFrameTime = 0;
    mut float delay = 0;

    while (!glfwWindowShouldClose(window)) {
        mut int width, height;
        glfwGetFramebufferSize(window, &width, &height);
        glViewport(0, 0, width, height);

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity;
        gluPerspective(80, width * 1.0f/height, 0.01f, 100.0f);
        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity;

        display(rings);

        glfwSwapBuffers(window);
        auto time = cast(float) glfwGetTime;
        delay = time - lastFrameTime;
        lastFrameTime = time;
        step(rings, delay);
        glfwPollEvents;
    }

    glfwDestroyWindow(window);
    glfwTerminate;
}

extern(C) int rand();

float randf() {
    int randPos() {
    int i = rand;
    return i if i > 0 else -i;
    }
  return (randPos % 100_000) / 100_000.0f;
}
