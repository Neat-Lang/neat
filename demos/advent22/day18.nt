module day18;

import std.algorithm;
import std.stdio;
import std.string;

void main()
{
    auto decodeVector = line => line
        .split(",")
        .(V(that[0].atoi, that[1].atoi, that[2].atoi));
    auto cubes = stdin.byLine
        .filter(a => !a.empty)
        .map(decodeVector)
        .array;
    auto adjacentSides = [
        V(1, 0, 0),
        V(-1, 0, 0),
        V(0, 1, 0),
        V(0, -1, 0),
        V(0, 0, 1),
        V(0, 0, -1),
    ];
    alias PathId = int;
    mut (:unknown | :solid | :explored, PathId)[V] material;
    for (cube in cubes) material[cube] = :solid;
    mut int surfaceExposed = 0;
    mut auto boundingBox = (from=V(1), to=V(-1));
    for (cube in cubes) {
        boundingBox.from = min(boundingBox.from, cube);
        boundingBox.to = max(boundingBox.to, cube);
    }
    for (cube in cubes) {
        for (adjacentSide in adjacentSides) {
            auto mat = material.get(cube + adjacentSide, :unknown);
            surfaceExposed += 0 if mat == :solid else 1;
        }
    }
    print("exposed sides: $surfaceExposed");
    mut (:air | :solid)[PathId] outcome;
    bool canPathToOutside(V pos, PathId pathId) {
        if (boundingBox.from.(pos.x < x || pos.y < y || pos.z < z)
            || boundingBox.to.(pos.x > x || pos.y > y || pos.z > z))
            return true;
        material.get(pos, :unknown).case {
            :unknown:
                material[pos] = (:explored, pathId);
                for (adjacentSide in adjacentSides) {
                    if (canPathToOutside(pos + adjacentSide, pathId))
                        return true;
                }
            :solid: {}
            (:explored, PathId otherId):
                if (otherId == pathId) return false;
                return outcome[otherId] == :air;
        }
        return false;
    }
    mut int surfaceExposedToAir = 0;
    mut PathId pathCounter = 0;
    for (cube in cubes) {
        for (adjacentSide in adjacentSides) {
            if (canPathToOutside(cube + adjacentSide, pathId=pathCounter)) {
                outcome[pathCounter++] = :air;
                surfaceExposedToAir ++;
            }
            else {
                outcome[pathCounter++] = :solid;
            }
        }
    }
    print("surface exposed to actual air: $surfaceExposedToAir");
}

V max(V a, V b) => V(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z));
V min(V a, V b) => V(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z));
int max(int a, int b) => a if a > b else b;
int min(int a, int b) => a if a < b else b;

alias V = Vector(int, 3);
