module neat.unittest_;

import helpers;
import neat.base;
import neat.function_;
import neat.types;
import neat.util;
import package(compiler).std.string : startsWith, endsWith;

(nullable ASTUnitTest | fail Error) parseUnitTest(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    parser.strip;
    auto from = parser.from;
    if (!parser.acceptIdentifier("unittest")) {
        parser.revert;
        return null;
    }
    parser.commit;
    auto locRange = parser.to(from);
    parser.strip;
    auto text = parser.text;
    ASTStatement body_ = lexicalContext.compiler.parseStatement(parser, lexicalContext)?;
    mut auto bodyText = text[0 .. text.length - parser.text.length];
    if (bodyText.startsWith("{") && bodyText.endsWith("}")) {
        bodyText = bodyText[1 .. $ - 1];
    }
    return new ASTUnitTest(body_, lexicalContext.macroState, locRange, bodyText);
}

class ASTUnitTest
{
    ASTStatement body_;

    MacroState macroState;

    LocRange locRange;

    // The source representation block of the unittest.
    // Used for docgen.
    string bodyText;

    this(this.body_, this.macroState, this.locRange, this.bodyText) { }

    FunctionDeclaration compile(Context context)
    {
        import package(compiler).std.string : replace;

        auto modname = findParent!ModuleBase(context.namespace).name.replace(".", "_");
        auto unittestFun = new UnittestFunction(this.locRange, modname, this.body_, this.macroState);

        unittestFun.parent = context.namespace;
        unittestFun.resetMangleCache;
        return unittestFun;
    }
}

class UnittestFunction : Function
{
    string modname;

    this(this.locRange, this.modname, this.statement, this.macroState)
    {
        this.name = "";
        this.retWIP = new Void;
        this.params = [];
        this.hasThisArg = false;
        this.heapAllocated = false;
    }

    override string manglePrefix()
    {
        return this.parent.mangle() ~ "_unittest_" ~ modname ~ "_" ~ ltoa(locRange.from.row);
    }

    // FIXME isn't this kinda sus?
    override CompiledFunction mkCompiledFunction(
        Function fun, Statement compiledStatement, FunctionScope stackframe, Statement[] argAssignments)
    {
        return new CompiledUnittestFunction(fun, compiledStatement, stackframe, argAssignments);
    }
}

class CompiledUnittestFunction : CompiledFunction
{
}
