// TODO: $var escaping
module std.macro.quasiquoting;

import package(compiler).neat.base;

class QuasiQuoterImpl : Quoter
{
    ASTSymbol compilerExpr;

    this(this.compiler, this.compilerExpr) { }

    override ASTSymbol compilerCall(string name, ASTSymbol[] parameters, LocRange locRange) {
        return compiler.astCall(
            compiler.astMember(compilerExpr, name, locRange), parameters ~ quoteLocRange(locRange), locRange);
    }

    override ASTSymbol quoteLocRange(LocRange locRange) {
        return compiler.astCall(
            compiler.astIdentifier("LocRange", __RANGE__), [
                compiler.astStringLiteral(locRange.filename, __RANGE__),
                compiler.astTupleLiteral([
                    compiler.astNumberLiteral(locRange.from.row, __RANGE__),
                    compiler.astNumberLiteral(locRange.from.column, __RANGE__)], __RANGE__),
                compiler.astTupleLiteral([
                    compiler.astNumberLiteral(locRange.to.row, __RANGE__),
                    compiler.astNumberLiteral(locRange.to.column, __RANGE__)], __RANGE__)
            ], __RANGE__);
    }
}

class QuasiQuoting : Macro
{
    this() { }
    override void apply(MacroArgs args) {
        if (auto args = args.instanceOf(ParsePropertyArgs)) {
            args.result = this.parse(args.parser, args.lexicalContext, args.left);
        }
    }

    (nullable ASTSymbol | fail Error) parse(Parser parser, LexicalContext lexicalContext, ASTSymbol compilerExpr) {
        auto compiler = lexicalContext.compiler;

        auto quoter = new QuasiQuoterImpl(compiler, compilerExpr);

        parser.begin;
        if (!parser.acceptToken(TokenType.dot)) {
            parser.revert;
            return null;
        }
        auto ident = parser.parseIdentifier;
        if (ident == "\$stmt") {
            parser.commit;
            auto stmt = compiler.parseStatement(parser, lexicalContext)?;
            parser.assert_(!!stmt, "statement expected")?;
            return stmt.quote(quoter);
        }
        if (ident == "\$expr") {
            parser.commit;
            auto expr = compiler.parseExpression(parser, lexicalContext)?;
            parser.assert_(!!expr, "expression expected")?;
            return expr.quote(quoter);
        }
        if (ident == "\$type") {
            parser.commit;
            auto type = compiler.parseType(parser, lexicalContext)?;
            parser.assert_(!!type, "type expected")?;
            return type.quote(quoter);
        }
        parser.revert();
        return null;
    }
}

void addQuasiQuotingMacro(MacroState macroState)
{
    macroState.addMacro(new QuasiQuoting);
}

macro(addQuasiQuotingMacro);
