module neat.delegate_;

macro import package(compiler).std.macro.once;

import backend.base;
import helpers;
import neat.base;
import neat.hash;
import neat.types;
import neat.util;

class ASTDelegate : ASTSymbol
{
    ASTSymbol ret;

    bool copyable;

    ASTSymbol[] params;

    this(this.ret, this.copyable, this.params, this.locRange) { }

    override (Type | fail Error) compile(Context context)
    {
        Type ret = this.ret.compile(context)?.beType(this.locRange)?;
        mut Type[] params;
        for (arg in this.params) {
            params ~= arg.compile(context)?.beType(arg.locRange)?;
        }

        return new Delegate(ret, copyable, params);
    }

    override string repr() {
        mut string res = ret.repr;
        res ~= " delegate";
        if (!copyable) res ~= "!";
        res ~= "(";
        for (i, p in params) {
            if (i) res ~= ", ";
            res ~= p.repr;
        }
        res ~= ")";
        return res;
    }
}

/**
 * { void *ptr; Ret(Args...) funcptr; }
 * void delegate!() is uncopyable, and the type of nested functions in stack-allocated functions
 */
class Delegate : Type
{
    Type ret;

    Type[] params;

    bool copyable;

    this(this.ret, this.copyable, this.params) {
        // FIXME nullable qualifier
        this.zeroInitializable = true;
    }

    override (Expression | fail Error) copy(Context context, Expression source, LocRange locRange) {
        import neat.runtime : die;
        context.assert2(copyable, locRange, "cannot copy uncopyable delegate type")?;
        (nullable Expression | fail Error) do_(Expression source) {
            auto ptr = new DelegateDataPtr(source);
            return context.compiler.statementExpression(
                context.compiler.exprStatement(
                    context.compiler.simpleCall(
                        context, "neat_runtime_class_refcount_inc", new Void, [ptr], __RANGE__)),
                source);
        }
        return context.compiler.exprWithTemporaryExpr(context.getUniqueId, source, &do_)?.notNull;
    }

    override nullable Statement endLifetime(Context context, Expression value) {
        if (!copyable) return null;
        auto ptr = new DelegateDataPtr(value);
        return context.compiler.exprStatement(
            context.compiler.simpleCall(
                context, "neat_runtime_class_refcount_dec", new Void, [ptr], __RANGE__));
    }

    override BackendType emit(Platform platform) {
        auto params = new BackendType mut[](this.params.length + 1);
        params[0] = platform.voidp;
        for (i, param in this.params) params[i + 1] = param.emit(platform);
        auto fp = new BackendFunctionPointerType(
            this.ret.emit(platform), params.freeze, variadic=false, platform);
        return new BackendStructType([platform.voidp, fp]);
    }

    override bool same(Type other) {
        if (auto otherPtr = other.instanceOf(Delegate)) {
            if (!this.ret.same(otherPtr.ret)) return false;
            if (copyable != otherPtr.copyable) return false;
            if (this.params.length != otherPtr.params.length) return false;
            for (i, param in this.params)
                if (!param.same(otherPtr.params[i])) return false;
            return true;
        }
        return false;
    }

    override (nullable Expression | fail Error) implicitConvertTo(
        Context context, Expression source, Type target, LocRange locRange)
    {
        auto otherPtr = target.instanceOf(Delegate).case(null: return null);
        if (!this.ret.same(otherPtr.ret)) return null;
        if (this.params.length != otherPtr.params.length) return null;
        for (i, param in this.params)
            if (!param.same(otherPtr.params[i])) return null;

        // this is the important bit: noncopyable doesn't implconv to copyable.
        if (!copyable && otherPtr.copyable) return null;

        return context.compiler.castTo(target, source);
    }

    override (nullable Expression | fail Error) implicitConvertFrom(
        Context context, Expression source, LocRange locRange)
    {
        if (source.type.instanceOf(NullPointer)) {
            return new NullExpr(this);
        }
        return null;
    }

    override string repr() {
        mut string ret = this.ret.repr ~ " delegate";
        if (!copyable) ret ~= "!";
        ret ~= "(";
        for (i, param in this.params) {
            if (i) ret ~= ", ";
            ret ~= param.repr;
        }
        return ret ~ ")";
    }

    override string mangle() {
        // return "dg_" ~ this.ret.repr ~ "_" ~ this.params.map!repr.join("_");
        mut string ret = "dg_";
        if (copyable) ret ~= "copyable_";
        ret ~= this.ret.mangle;
        for (param in this.params)
            ret ~= "_" ~ param.mangle;
        return ret;
    }

    override void hash(Hash hash) {
        hash.adds("dgptr");
        hash.addl(copyable);
        ret.hash(hash);
        hash.addl(params.length);
        for (param in this.params)
            param.hash(hash);
    }
}

class DelegateExpr : Expression
{
    Expression funcPtr;

    Expression thisPtr;

    bool copyable;

    this(this.funcPtr, this.thisPtr, this.copyable) {
        FunctionPointer type = this.funcPtr.type.instanceOf(FunctionPointer).notNull;

        // drop thisptr - implicit!
        assert(type.params.length >= 1);
        mut Type[] types;
        for (a in type.params[1 .. $]) types ~= a.type;
        this.type = new Delegate(type.ret, copyable=this.copyable, types);
        if (this.copyable) {
            // if it's a class, we took a ref in ASTReference.
            // if it's a nested function, we allocated it with 1 ref.
            this.info = ExprInfo(Lifetime.gifted);
        } else {
            // local declaration, lexical lifetime
            this.info = ExprInfo(Lifetime.lexical);
        }
    }

    override int emit(Generator output)
    {
        int thisReg = this.thisPtr.emit(output);
        int funcReg = this.funcPtr.emit(output);
        auto voidp = output.platform.voidp;
        auto thisType = this.type.emit(output.platform);
        return output.fun.structLiteral(thisType, [thisReg, funcReg]);
    }

    override void hash(Hash hash) { hash.adds("DelegateExpr"); this.funcPtr.hash(hash); this.thisPtr.hash(hash); }
    override string repr() return "TODO DelegateExpr";
}

class DelegateDataPtr : Expression
{
    Expression dg;

    this(this.dg) {
        this.type = once new Pointer(new Void);
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator output)
    {
        int reg = this.dg.emit(output);

        return output.fun.field(this.dg.type.emit(output.platform), reg, 0);
    }

    override void hash(Hash hash) { hash.adds("DelegateDataPtr"); this.dg.hash(hash); }
    override string repr() return "$(dg.repr).data";
}

class DelegateFuncPtr : Expression
{
    Expression dg;

    this(this.dg) {
        auto nestfp = this.dg.type.instanceOf(Delegate);
        assert(!!nestfp);
        mut Parameter[] params;
        params ~= Parameter.fromType(once new Pointer(new Void));
        for (paramType in nestfp.params)
            params ~= Parameter.fromType(paramType);
        this.type = new FunctionPointer(nestfp.ret, params);
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator output)
    {
        int reg = this.dg.emit(output);

        return output.fun.field(this.dg.type.emit(output.platform), reg, 1);
    }

    override void hash(Hash hash) { hash.adds("DelegateFuncPtr"); this.dg.hash(hash); }
    override string repr() return "$(dg.repr).funcptr";
}
