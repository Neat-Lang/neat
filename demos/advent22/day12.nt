module day12;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.math;
import std.stdio;
import std.string;

void main()
{
    auto lines = stdin.byLine
        .filter(a => !a.empty)
        .array;
    auto startY = [first i for i, line in lines where line.any(ch => ch == 'S')];
    auto startX = [first i for i, ch in lines[startY] where ch == 'S'];
    auto endY = [first i for i, line in lines where line.any(ch => ch == 'E')];
    auto endX = [first i for i, ch in lines[endY] where ch == 'E'];
    auto start = vec2l(startX, startY);
    auto end = vec2l(endX, endY);
    auto heights = lines
        .map(line => line.map(ch => ch.height).array)
        .array;
    auto size = vec2l(heights[0].length, heights.length);
    auto bestScore = cast(int mut[][])[[-1 for i in 0 .. size.x] for j in 0 .. size.y];
    bestScore[end.y][end.x] = 0;
    mut vec2l[] checkQueue = [end];
    while (!checkQueue.empty) {
        auto to = checkQueue[$ - 1];
        checkQueue = checkQueue[0 .. $ - 1];
        auto myScore = bestScore[to.y][to.x];
        assert(myScore != -1);
        bool reachableFrom(vec2l from) {
            return from.(x >= 0 && y >= 0 && x < size.x && y < size.y
                && heights[to.y][to.x] <= heights[y][x] + 1);
        }
        void check(vec2l d) {
            auto from = to + d;
            if (reachableFrom(from) && bestScore[from.y][from.x].(that == -1 || myScore + 1 < that)) {
                bestScore[from.y][from.x] = myScore + 1;
                checkQueue ~= from;
            }
        }
        check(vec2l(0, -1));
        check(vec2l(0, 1));
        check(vec2l(-1, 0));
        check(vec2l(1, 0));
    }
    print("shortest path length: $(bestScore[start.y][start.x])");
    auto locations = [join [vec2l(x, y) for x in 0 .. size.x] for y in 0 .. size.y];
    auto aSquares = [start] ~ [l for l in locations where heights[l.y][l.x] == 0];
    auto shortestFromA = [min bestScore[a.y][a.x] for a in aSquares where bestScore[a.y][a.x] != -1];
    print("shortest path from any a square: $(shortestFromA)");
}

alias vec2l = Vector(size_t, 2);

int height(char ch) => 0 if ch == 'S' else 25 if ch == 'E' else ch - 'a';
