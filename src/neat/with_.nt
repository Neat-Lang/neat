module neat.with_;

import helpers;
import neat.base;
import neat.function_ : VariableDeclaration;
import neat.util;

class WithNamespace : Namespace, Unwindable
{
    LatentVariable latent;

    bool isPtr;

    LocRange locRange;

    this(this.parent, this.latent, this.isPtr, this.locRange=__CALLER__) { this.isContextScope = parent.isContextScope; }

    override (nullable Statement | Error) unwind(Context context) {
        auto temporary = accessDecl(context);
        if (auto exit = temporary.type.accessMember(
                context, temporary, "onExit", Protection.private_, this.locRange)?) {
            return context.compiler.exprStatement(exit.beExpressionImplCall(context, this.locRange)?);
        }
        return null;
    }

    Reference accessDecl(Context context)
    {
        if (isPtr) return context.compiler.dereference(latent.access(context));
        else return latent.access(context);
    }

    override (nullable Symbol | Error) lookup(
        string name, Context context, LookupReason reason, LocRange locRange)
    {
        if (context.framePointer) {
            auto temporary = accessDecl(context);
            auto member = context.compiler.accessMember(context, temporary, name, locRange, true)?;
            if (member) return member;
        }
        if (this.parent) return this.parent.lookup(name, context, reason, locRange);
        return null;
    }

    override string repr() => "WithNamespace";
}

class WithTypeNamespace : Namespace
{
    Type type;

    LocRange locRange;

    this(this.parent, this.type, this.locRange=__CALLER__) { this.isContextScope = parent.isContextScope; }

    override (nullable Symbol | Error) lookup(
        string name, Context context, LookupReason reason, LocRange locRange)
    {
        auto protection = type.protectionAt(context.namespace);
        auto member = type.accessMember(context, null, name, protection, locRange)?;
        if (member) return member;
        if (this.parent) return this.parent.lookup(name, context, reason, locRange);
        return null;
    }

    override string repr() => "WithTypeNamespace";
}

class ASTWithStatement : ASTStatement
{
    ASTSymbol expr;

    ASTStatement stmt;

    this(this.expr, this.stmt, this.locRange=__CALLER__) { }

    override (StatementCompileResult | Error) compile(Context context)
    {
        auto outerNamespace = context.namespace;

        auto sym = this.expr.compile(context)?;
        if (auto type = sym.instanceOf(Type)) {
            // with (type) accesses static members
            auto subContext = context.withNamespace(new WithTypeNamespace(context.namespace, type, this.locRange));
            auto subStmtPair = this.stmt.compile(subContext)?;
            auto stmt = subStmtPair.statement;
            auto stmt = context.compiler.unwindScope(subContext, outerNamespace, stmt)?;
            return StatementCompileResult(stmt, outerNamespace);
        }

        Expression expr = sym.beExpressionImplCall(context, this.expr.locRange)?;
        bool isPtr = !!expr.instanceOf(Reference);

        Type varType() {
            if (isPtr) return new Pointer(expr.type);
            return expr.type;
        }

        // TODO with (mut expr) so we can borrow vars here.
        (Expression | Error) takeExpr() {
            if (isPtr) return context.compiler.reference(expr.instanceOf(Reference)? else die);
            if (expr.info.lifetime == Lifetime.ephemeral || expr.info.lifetime == Lifetime.lexical)
                return expr.copy(context, this.expr.locRange)?;
            return expr;
        }

        auto outerNamespace = context.namespace;
        auto withVarDecl = context.compiler.variableDeclaration(
                context.namespace, "__with", context, varType, mut=true, borrowed=false, hidden=true);
        auto var = withVarDecl.instanceOf(VariableDeclaration).variable;
        auto context = context.withNamespace(withVarDecl);

        mut Reference target = var.access(context);
        assert(target.info.lifetime == Lifetime.ephemeral);
        auto set = context.compiler.assignStatement(target, takeExpr?);

        if (isPtr) target = context.compiler.dereference(target);

        mut nullable Statement prefix, suffix;
        if (auto enter = target.type.accessMember(
            context, target, "onEnter", Protection.private_, this.locRange)?) {
            prefix = context.compiler.exprStatement(enter.beExpressionImplCall(context, this.locRange)?);
        }
        // onExit is called by the unwind.
        // if (auto exit = ... )

        auto subContext = context.withNamespace(new WithNamespace(context.namespace, var, isPtr, this.locRange));
        auto subStmtPair = this.stmt.compile(subContext)?;

        with (context.compiler) {
            auto stmt = subStmtPair.statement;
            auto stmt = sequence(sequence(sequence(set, prefix), stmt), suffix);
            auto stmt = unwindScope(subContext, outerNamespace, stmt)?;
            return StatementCompileResult(stmt, outerNamespace);
        }
    }
}

(ASTStatement | Error) parseWithStatement(Parser parser, LexicalContext lexicalContext, LocRange from)
{
    parser.expectToken(TokenType.lparen)?;
    auto subExpr = lexicalContext.compiler.parseExpression(parser, lexicalContext)??
        else return parser.fail("with expression expected");
    parser.expectToken(TokenType.rparen)?;
    auto locRange = parser.to(from);
    auto body_ = lexicalContext.compiler.parseStatement(parser, lexicalContext)?;

    return new ASTWithStatement(subExpr, body_, locRange);
}
