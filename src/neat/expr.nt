module neat.expr;

macro import std.macro.hash;
macro import std.macro.once;

import backend.base;
import helpers;
import neat.array;
import neat.base;
import neat.hash;
import neat.types;
import neat.util;

/**
 * TODO implicitConvertTo should only require Type - ie. return a Expression function(Expression).
 * This will require types such as nullptr_t - but also "decaying types" such as StringLiteralType,
 * which when assigned to a variable implicitly converts to string.
 */
nullable Expression implicitConvertTo(Context context, Expression from, Type to)
{
    auto fromType = from.type;

    if (fromType.same(to)) return from;
    if (fromType.instanceOf(Integer) && to.instanceOf(Long))
    {
        return new IntToLong(from);
    }
    if (fromType.instanceOf(Short) && to.instanceOf(Integer))
    {
        return new ShortToInt(from);
    }
    if (fromType.instanceOf(Character) && to.instanceOf(Integer))
    {
        return new CharToInt(from);
    }
    if (fromType.instanceOf(UByte) && to.instanceOf(Integer))
    {
        return new CharToInt(from);
    }
    if (fromType.instanceOf(Boolean) && (to.instanceOf(Integer) || to.instanceOf(Long)))
    {
        // TODO transition to bytes
        if (to.instanceOf(Long)) return new IntToLong(new CastExpr(new Integer, from));
        return new CastExpr(to, from);
        // return new CharToInt(from);
    }
    if (fromType.instanceOf(Short) && to.instanceOf(Long))
    {
        return new IntToLong(new ShortToInt(from));
    }
    if (fromType.instanceOf(Integer) && to.instanceOf(Float) ||
        fromType.instanceOf(Integer) && to.instanceOf(Double) ||
        fromType.instanceOf(Float) && to.instanceOf(Double))
    {
        return new FloatConvert(from, to);
    }
    // short-sized literals shrink to short
    auto literal = from.instanceOf(IntLiteral);

    if (literal && to.instanceOf(Short) && literal.value >= -32768 && literal.value <= 32767)
    {
        return new ShortLiteral(literal.value);
    }
    // FIXME byte
    if (literal && to.instanceOf(Character) && literal.value >= -128 && literal.value <= 127)
    {
        return new CharLiteral(literal.value, :char_);
    }
    if (literal && to.instanceOf(UByte) && literal.value >= 0 && literal.value <= 255)
    {
        return new CharLiteral(literal.value, :ubyte_);
    }
    // any pointer casts to void*
    if (fromType.instanceOf(Pointer) && to.same(once new Pointer(new Void)))
    {
        return new PointerCast(to, from);
    }
    if (from.instanceOf(StringLiteral) && to.same(once new Pointer(new Character)))
    {
        return new ArrayPointer(new Character, from);
    }
    nullable Expression fromImplicit = to.implicitConvertFrom(context, from);
    if (fromImplicit) return fromImplicit;
    nullable Expression toImplicit = fromType.implicitConvertTo(context, from, to);
    if (toImplicit) return toImplicit;
    return null;
}

class BinaryOp : Expression
{
    string op;

    Expression left;

    Expression right;

    LocRange locRange;

    this(this.op, this.left, this.right, this.locRange) {
        this.info = ExprInfo(Lifetime.permanent);
        string op = this.op;
        bool isFloating(Type type) { return type.instanceOf(Float) || type.instanceOf(Double); }
        if (op == "<<" || op == ">>" || op == ">>>" || op == "&" || op == "|" || op == "^") {
            locRange.hardCheck(!left.type.isFloating, "cannot use float for bitop");
            locRange.hardCheck(!right.type.isFloating, "cannot use float for bitop");
            if (right.type.instanceOf(Long)) this.type = right.type;
            else this.type = left.type;
        } else  if (op == "+" || op == "-" || op == "*" || op == "/" || op == "%") {
            // select "biggest" type of the operators
            if (right.type.instanceOf(Long)) this.type = right.type;
            else if (right.type.instanceOf(Double)) this.type = right.type;
            else if (right.type.instanceOf(Float) && !left.type.instanceOf(Double))
                this.type = right.type;
            else this.type = left.type;
        }
        else if (op == "==" || op == "!=" || op == ">=" || op == "<=" || op == ">" || op == "<" || op == "is")
            this.type = once new Boolean;
        else {
            locRange.hardCheck(false, "unknown op '" ~ op ~ "'");
        }
    }

    override int emit(Generator output)
    {
        mut Expression left = this.left;
        mut Expression right = this.right;
        mut Type ltype = left.type;
        mut Type rtype = right.type;
        // FIXME afaik this is just used for == 0 checks. make those properly generate longs.
        if (ltype.instanceOf(Integer) && rtype.instanceOf(Long)) {
            left = new IntToLong(left);
            ltype = rtype;
        }
        if (ltype.instanceOf(Long) && rtype.instanceOf(Integer)) {
            right = new IntToLong(right);
            rtype = ltype;
        }
        mut string op = this.op;
        if (this.op == "is")
        {
            op = "==";
        }
        else if (this.op != "==") // you can == pointers
        {
            if (!(ltype.instanceOf(Integer) || ltype.instanceOf(Long) ||
                ltype.instanceOf(Character) || ltype.instanceOf(UByte) ||
                ltype.instanceOf(Float) || ltype.instanceOf(Double) ||
                ltype.instanceOf(Boolean)))
            {
                this.locRange.hardCheck(
                    false, "$(this.op) (l) expected bool/int/float/double/long/char, not $(ltype.repr)");
            }
        } else {
            if (!(ltype.instanceOf(Integer) || ltype.instanceOf(Long) ||
                ltype.instanceOf(Character) || ltype.instanceOf(UByte) ||
                ltype.instanceOf(Float) || ltype.instanceOf(Double) ||
                ltype.instanceOf(Boolean) ||
                ltype.instanceOf(Pointer) || ltype.instanceOf(FunctionPointer)))
            {
                this.locRange.hardCheck(
                    false, "$(this.op) (l) expected bool/int/float/double/long/char/pointer/fp, not $(ltype.repr)");
            }
        }
        if (!ltype.same(rtype)) {
            this.locRange.hardCheck(false, "$(this.op): types don't match, $(ltype.repr), $(rtype.repr)");
        }
        int leftreg = left.emit(output);
        int rightreg = right.emit(output);
        return output.fun.binop(op, ltype.emit(output.platform), leftreg, rightreg);
    }

    override void hash(Hash hash) { hash.adds("BinaryOp"); hash.adds(op); left.hash(hash); right.hash(hash); }

    override string repr() { return "($(left.repr) $op $(right.repr))"; }
}

class PointerOffset : Expression
{
    Expression pointer;

    Expression offset;

    this(this.pointer, this.offset)
    {
        // Why??
        this.info = ExprInfo(Lifetime.lexical);
        assert(!!this.pointer.type.instanceOf(Pointer));
        this.type = this.pointer.type;
    }

    override int emit(Generator output)
    {
        auto type = pointer.type.instanceOf(Pointer);

        int baseReg = pointer.emit(output);
        int offsetReg = offset.emit(output);
        return output.fun.ptrOffset(type.target.emit(output.platform), baseReg, offsetReg);
    }

    override void hash(Hash hash) { hash.adds("PointerOffset"); pointer.hash(hash); offset.hash(hash); }

    override string repr() { return "($(pointer.repr) + $(offset.repr))"; }
}

class IntToLong : Expression
{
    Expression intValue;

    this(this.intValue) {
        this.type = once new Long;
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator output) {
        assert(!!this.intValue.type.instanceOf(Integer));

        int intValue = this.intValue.emit(output);
        return output.fun.signExtend(intValue, once new BackendLongType);
    }

    override void hash(Hash hash) { hash.adds("IntToLong"); intValue.hash(hash); }

    override string repr() { return intValue.repr; }
}

class ShortToInt : Expression
{
    Expression shortValue;

    this(this.shortValue) {
        this.type = once new Integer;
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator output) {
        assert(!!this.shortValue.type.instanceOf(Short));

        int shortValue = this.shortValue.emit(output);
        return output.fun.signExtend(shortValue, once new BackendIntType);
    }

    override void hash(Hash hash) { hash.adds("ShortToInt"); shortValue.hash(hash); }

    override string repr() { return shortValue.repr; }
}

class CharToInt : Expression
{
    Expression charValue;

    this(this.charValue) {
        this.type = once new Integer;
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator output) {
        assert(this.charValue.type.instanceOf(Character)
            || this.charValue.type.instanceOf(UByte)
            || this.charValue.type.instanceOf(Boolean));

        int charValue = this.charValue.emit(output);
        return output.fun.zeroExtend(charValue, once new BackendIntType);
    }

    override void hash(Hash hash) { hash.adds("CharToInt"); charValue.hash(hash); }
    override string repr() return "cast(int) $(charValue.repr)";
}

// (int, float, double) to (int, float, double)
class FloatConvert : Expression
{
    Expression from;

    this(this.from, this.type) {
        assert(this.type.instanceOf(Integer) || this.type.instanceOf(Float) || this.type.instanceOf(Double));
        assert(!this.from.type.same(this.type));
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator output) {
        int from = this.from.emit(output);
        return output.fun.convert(from, this.type.emit(output.platform));
    }

    override void hash(Hash hash) { hash.adds("FloatConvert"); from.hash(hash); type.hash(hash); }
    override string repr() return "cast($(type.repr)) $(from.repr)";
}

class BoolOr : Expression
{
    Expression left;

    Expression right;

    this(this.left, this.right) {
        this.type = once new Boolean;
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator output)
    {
        /**
         * result = left;
         * if (left) goto past;
         * result = right;
         * past:
         */
        BackendType intType = once new BackendIntType;
        int result = output.fun.staticAlloca(intType);

        int leftValue = this.left.emit(output);
        output.fun.store(intType, result, leftValue);

        auto label = output.fun.getLabel;
        output.fun.testBranch(leftValue, label ~ "_past", label ~ "_right"); // if (left)
        output.fun.setLabel(label ~ "_right");

        int rightValue = this.right.emit(output);
        output.fun.store(intType, result, rightValue);
        output.fun.branch(label ~ "_past");

        output.fun.setLabel(label ~ "_past");
        return output.fun.load(intType, result);
    }

    override void hash(Hash hash) { hash.adds("BoolOr"); left.hash(hash); right.hash(hash); }

    override string repr() return "$(left.repr) || $(right.repr)";
}

class BoolAnd : Expression
{
    Expression left;

    Expression right;

    this(this.left, this.right) {
        this.type = once new Boolean;
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator output)
    {
        /**
         * result = left;
         * if (left) result = right;
         */
        BackendType intType = once new BackendIntType;
        int result = output.fun.staticAlloca(intType);

        int leftValue = this.left.emit(output);
        output.fun.store(intType, result, leftValue);

        auto label = output.fun.getLabel;
        output.fun.testBranch(leftValue, label ~ "_true", label ~ "_past"); // if (left)
        output.fun.setLabel(label ~ "_true");

        int rightValue = this.right.emit(output);
        output.fun.store(intType, result, rightValue);
        output.fun.branch(label ~ "_past");

        output.fun.setLabel(label ~ "_past");
        return output.fun.load(intType, result);
    }

    override void hash(Hash hash) { hash.adds("BoolAnd"); left.hash(hash); right.hash(hash); }

    override string repr() return "$(left.repr) && $(right.repr)";
}

class ASTIntLiteral : ASTSymbol
{
    int value;

    this(this.value, this.locRange) { }

    override (Symbol | fail Error) compile(Context context)
    {
        return new IntLiteral(this.value);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astIntLiteral", [
            quoter.compiler.astIntLiteral(this.value, locRange)
        ], locRange);
    }

    override string repr() { return itoa(value); }
}

class IntLiteral : Expression
{
    int value;
    this(this.value) { this.type = once new Integer; this.info = ExprInfo(Lifetime.permanent); }
    override int emit(Generator output) { return output.fun.intLiteral(this.value); }
    override void hash(Hash hash) { hash.adds("IntLiteral"); hash.addl(value); }
    override string repr() { return "$value"; }
}

class WordLiteral : Expression
{
    long value;
    this(this.type, this.value) { this.info = ExprInfo(Lifetime.permanent); }
    override int emit(Generator output) { return output.fun.wordLiteral(output.platform, this.value); }
    override void hash(Hash hash) { hash.adds("WordLiteral"); hash.addl(value); }
    override string repr() { return "$value"; }
}

class BoolLiteral : Expression
{
    bool value;
    this(this.value) { this.type = once new Boolean; this.info = ExprInfo(Lifetime.permanent); }
    // FIXME transition to bytes
    override int emit(Generator output) { return output.fun.intLiteral(this.value); }
    override void hash(Hash hash) { hash.adds("BoolLiteral"); hash.addl(value); }
    override string repr() return "true" if value else "false";
}

class ASTLongLiteral : ASTSymbol
{
    long value;

    this(this.value, this.locRange) { }

    override (Symbol | fail Error) compile(Context context)
    {
        return new LongLiteral(this.value);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astLongLiteral", [
            quoter.compiler.astLongLiteral(this.value, locRange)
        ], locRange);
    }
}

class LongLiteral : Expression
{
    long value;
    this(this.value) { this.type = once new Long; this.info = ExprInfo(Lifetime.permanent); }
    override int emit(Generator output) { return output.fun.longLiteral(this.value); }
    override void hash(Hash hash) { hash.adds("LongLiteral"); hash.addl(value); }
    override string repr() { return "$value"; }
}

class ShortLiteral : Expression
{
    int value;
    this(this.value) { this.type = once new Short; this.info = ExprInfo(Lifetime.permanent); }
    override int emit(Generator output) { return output.fun.shortLiteral(this.value); }
    override void hash(Hash hash) { hash.adds("ShortLiteral"); hash.addl(value); }
    override string repr() { return "$value"; }
}

class ASTCharLiteral : ASTSymbol
{
    char value;
    this(this.value, this.locRange) {}
    override (Symbol | fail Error) compile(Context context) {
        return new CharLiteral(cast(int) this.value, :char_);
    }
    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astCharLiteral", [
            quoter.compiler.astCharLiteral(this.value, locRange)], locRange);
    }
}

class CharLiteral : Expression
{
    int value;
    this(this.value, (:char_ | :ubyte_) type) {
        this.type = type.case((:char_): once new Character, (:ubyte_): once new UByte);
        this.info = ExprInfo(Lifetime.permanent);
    }
    override int emit(Generator output) { return output.fun.byteLiteral(this.value); }
    override void hash(Hash hash) { hash.adds("CharLiteral"); hash.addl(value); }
    override string repr() return "cast(char) $value";
}

class ASTFloatLiteral : ASTSymbol
{
    float value;

    this(this.value) { }

    override (Symbol | fail Error) compile(Context context)
    {
        return new FloatLiteral(this.value);
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTFloatLiteral'"); assert(false); }
}

class FloatLiteral : Expression
{
    float value;
    this(this.value) { this.type = once new Float; this.info = ExprInfo(Lifetime.permanent); }
    override int emit(Generator output) { return output.fun.floatLiteral(this.value); }
    override void hash(Hash hash) { hash.adds("FloatLiteral"); hash.adds(ftoa(value)); }
    override string repr() { return "$value"; }
}

class ASTDoubleLiteral : ASTSymbol
{
    double value;

    this(this.value) { }

    override (Symbol | fail Error) compile(Context context)
    {
        return new DoubleLiteral(this.value);
    }

    override ASTSymbol quote(Quoter quoter) { print("cannot quote 'ASTDoubleLiteral'"); assert(false); }
}

class DoubleLiteral : Expression
{
    double value;
    this(this.value) { this.type = once new Double; this.info = ExprInfo(Lifetime.permanent); }
    override int emit(Generator output) { return output.fun.doubleLiteral(this.value); }
    override void hash(Hash hash) { hash.adds("DoubleLiteral"); hash.adds(ftoa(value)); }
    override string repr() { return "$value"; }
}

class ASTStringLiteral : ASTSymbol
{
    string text;

    this(this.text, this.locRange) { }

    override (Symbol | fail Error) compile(Context context)
    {
        return new StringLiteral(this.text, context.platform);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astStringLiteral", [
            quoter.compiler.astStringLiteral(this.text, locRange)], locRange);
    }

    override string repr() {
        // FIXME escaping
        return "\"$text\"";
    }
}

class StringLiteral : StringLiteralBase
{
    this(this.text, Platform platform) {
        this.type = new Array(new Character, platform);
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator output)
    {
        int len = output.fun.wordLiteral(output.platform, this.text.length);
        int ptr = output.fun.stringLiteral(this.text ~ "\x00");
        int nullptr = output.fun.bitcast(output.fun.wordLiteral(output.platform, 0), output.platform.voidp);

        return makeArray(output, once new Character, len, ptr, nullptr);
    }
    override void hash(Hash hash) { hash.adds("StringLiteral"); hash.adds(text); }
    override string repr() { return "\"$text\""; }
}

class Call : Expression
{
    FunctionDeclaration fun;

    Expression[] args;

    LocRange locRange;

    this(this.fun, this.args, this.locRange)
    {
        // these all should have been caught earlier, in validateCall!
        if (fun.variadic) {
            if (args.length < fun.numArgs) {
                print("internal error: $(locRange.repr): $(fun.name) expected at least $(fun.numArgs) args, not $(args.length)");
                exit(1);
            }
        } else {
            if (args.length != fun.numArgs) {
                print("internal error: $(locRange.repr): $(fun.name) expected $(fun.numArgs) args, not $(args.length)");
                exit(1);
            }
        }
        int extra = !!fun.contextType;
        for (i, param in fun.params) {
            if (!args[extra + i].type.same(param.type)) {
                print("internal error: $(locRange.repr): wrong type in call: $(args[extra + i].type.repr) to $(param.type.repr)");
                exit(1);
            }
        }
        this.type = this.fun.ret;
        // we take over the returned value
        this.info = ExprInfo(Lifetime.gifted);
    }

    override int emit(Generator output)
    {
        output.fun.setLocation(this.locRange.toBackendLoc);
        this.fun.declare(output);

        int[] regs = new int[](this.args.length);
        for (i, arg in this.args) {
            regs[i] = arg.emit(output);
        }
        return output.fun.call(this.type.emit(output.platform), this.fun.mangle, regs);
    }

    override void hash(Hash hash) {
        hash.adds("Call");
        hash.adds(fun.mangle);
        hash.addl(args.length);
        for (arg in args) arg.hash(hash);
    }

    override string repr() {
        mut string ret = "$(fun.name)(";
        for (i, arg in args) {
            if (i) ret ~= ", ";
            ret ~= arg.repr;
        }
        return ret ~ ")";
    }
}

enum CallQuality
{
    match,
    convRequired,
}

(Expression[] args, CallQuality quality | :argCastError, Error | :mismatch, Error | fail Error) validateCall(
    Context context, Parameter[] params, ASTArgument[] args, string name, bool variadic, LocRange locRange)
{
    size_t max(size_t a, size_t b) { if (a > b) return a; return b; }

    string info() {
        if (!name.empty) return "$(name): ";
        return "";
    }
    mut Expression[] finalArgs = new Expression[](max(args.length, params.length));
    mut bool withConv = false;
    for (i, param in params) {
        if (i >= args.length) {
            if (auto defaultValue = param.defaultValue) {
                finalArgs[i] = defaultValue;
                continue;
            }
            else return (:mismatch, locRange.fail("$(info)missing argument '$(param.name)'"));
        }
        ASTArgument arg = args[i];
        if (arg.name != "" && arg.name != param.name) {
            return (:mismatch,
                arg.locRange.fail("$(info)expected parameter named '$(param.name)', but got '$(arg.name)'"));
        }
        Expression argExpr = arg.sym.compile(context)?.beExpressionImplCall(context, arg.locRange)?;
        if (argExpr.type.same(param.type)) {
            finalArgs[i] = argExpr;
        }
        else if (auto conv = implicitConvertTo(context, argExpr, param.type)) {
            finalArgs[i] = conv;
            withConv = true;
        } else {
            return (:argCastError,
                locRange.fail("$(info)cannot implicitly convert $(argExpr.type.repr) to $(param.type.repr)"));
        }
    }
    if (variadic) {
        for (i, arg in args[params.length .. $]) {
            finalArgs[params.length + i] = arg.sym.compile(context)?.beExpressionImplCall(context, arg.locRange)?;
        }
    } else {
        if (args.length > params.length) {
            return (:mismatch,
                args[params.length].locRange.fail("$(info)extraneous argument, only $(params.length) expected"));
        }
    }
    if (withConv) return (finalArgs, CallQuality.convRequired);
    return (finalArgs, CallQuality.match);
}

(Expression | fail Error) truthy(Context context, Expression value, LocRange locRange) {
    return value.truthy2(context, locRange);
}

(Expression | fail Error) truthy2(Expression value, Context context, LocRange locRange) {
    Type type = value.type;
    locRange.assert(!!type, "internal error")?;
    auto truthyExpr = type.truthy(context, value, locRange)?;
    if (auto truthyExpr = truthyExpr) return truthyExpr;

    if (type.instanceOf(Pointer)) {
        auto sizeT = context.nativeWordType;

        return new BinaryOp("!=", new CastExpr(sizeT, value), once new IntLiteral(0), locRange);
    }
    if (auto converted = implicitConvertTo(context, value, once new Boolean)) {
        return converted;
    }
    if (!type.instanceOf(Integer) && !type.instanceOf(Long)) {
        return locRange.fail("integer or bool expected, not $(type.repr)");
    }
    return new BinaryOp("!=", value, once new IntLiteral(0), locRange);
}

(bool | :unknown | fail Error) staticTruthy(Context context, ASTSymbol value) {
    auto test = value.compile(context)?;
    if (auto boolLit = test.instanceOf(BoolLiteral)) {
        return boolLit.value;
    }
    return :unknown;
}

class ASTBinaryOp : ASTSymbol
{
    string op;

    ASTSymbol left;

    ASTSymbol right;

    this(this.op, this.left, this.right, this.locRange) { }

    override (Expression | fail Error) compile(Context context)
    {
        mut Expression left = this.left.compile(context)?.beExpressionImplCall(context, this.locRange)?;
        mut Expression right = this.right.compile(context)?.beExpressionImplCall(context, this.locRange)?;

        // TODO can we just use context.compiler.binaryOp for this? Ie.move all these checks below in there
        if (auto opOverload = left.type.binaryOp(context, this.op, left, right, this.locRange)?)
            return opOverload;

        if (this.op == "~") {
            if (!left.type.instanceOf(Array)) {
                return locRange.fail("Left hand side of concatenation isn't array, but $(left.type.repr)");
            }
            if (auto converted = implicitConvertTo(context, right, left.type.instanceOf(Array).elementType)) {
                return context.compiler.binaryOp("~", context, left, converted, this.locRange);
            }

            return context.compiler.binaryOp("~", context, left, right, this.locRange);
        }
        if (this.op == "&&")
            return new BoolAnd(
                left.truthy2(context, this.locRange)?,
                right.truthy2(context, this.locRange)?);
        if (this.op == "||")
            return new BoolOr(
                left.truthy2(context, this.locRange)?,
                right.truthy2(context, this.locRange)?);

        auto merge = mergePair(context, left, right, this.right.locRange)?;

        return new BinaryOp(this.op, merge.left, merge.right, this.locRange);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astBinaryOp", [
            quoter.compiler.astStringLiteral(op, locRange),
            left.quote(quoter),
            right.quote(quoter)], locRange);
    }

    override string repr() { return "($(left.repr) $op $(right.repr))"; }
}

class Dereference : Reference
{
    Expression base;

    Pointer pointerType;

    this(this.base)
    {
        this.pointerType = base.type.instanceOf(Pointer).notNull;
        this.type = this.pointerType.target;
        // avoid doing memory management until we figure out how to handle pointers.
        // (or if we need to at all.)
        // mutable for now, but rethink later
        this.mutable = true;
        // FIXME!!
        this.info = ExprInfo(Lifetime.lexical);
    }

    override int emit(Generator output)
    {
        int reg = this.emitLocation(output);

        return output.fun.load(this.type.emit(output.platform), reg);
    }

    override int emitLocation(Generator output)
    {
        return this.base.emit(output);
    }

    override void hash(Hash hash) { hash.adds("Dereference"); base.hash(hash); }

    override string repr() { return "*$(this.base.repr)"; }
}

class ReferenceExpression : Expression
{
    Reference base;

    this(this.base) {
        Type superType = this.base.type;

        this.type = new Pointer(superType);
        this.info = this.base.info;
    }

    override int emit(Generator output)
    {
        return this.base.emitLocation(output);
    }

    override void hash(Hash hash) { hash.adds("ReferenceExpression"); base.hash(hash); }

    override string repr() { return "&$(this.base.repr)"; }
}

/**
 * Must be initialized once with a InitializeTemporaryStatement.
 */
class PairedTemporary : Reference
{
    string regName;

    Lifetime lifetime;

    this(this.type, this.lifetime, this.regName)
    {
        this.info = ExprInfo(this.lifetime);
        this.mutable = false; // not overwritable by user code (?)
    }

    override int emitLocation(Generator output)
    {
        return output.fun.getNamedReg(this.regName);
    }

    override int emit(Generator output)
    {
        auto type = this.type.emit(output.platform);

        return output.fun.load(type, emitLocation(output));
    }

    // temp value change identified in InitializeTemporaryStatement
    // TODO use label?
    override void hash(Hash hash) {
        hash.adds("PairedTemporary");
        if (this.lifetime == Lifetime.gifted) hash.adds("gifted");
        else if (this.lifetime == Lifetime.ephemeral) hash.adds("ephemeral");
        else if (this.lifetime == Lifetime.lexical) hash.adds("lexical");
        else if (this.lifetime == Lifetime.permanent) hash.adds("permanent");
        else if (this.lifetime == Lifetime.none) hash.adds("none");
        else assert(false);
        type.hash(hash);
    }

    override string repr() { return "%$regName"; }
}

class UninitializeTemporaryStatement : Statement
{
    PairedTemporary target;

    this(this.target) { }

    override void emit(Generator output)
    {
        auto type = target.type.emit(output.platform);
        output.fun.setNamedReg(target.regName, output.fun.staticAlloca(type));
    }

    // TODO id here?
    override void hash(Hash hash) {
        hash.adds("UninitializeTemporaryStatement");
    }

    override string repr() { return "%$(target.regName) = null"; }
}

// assignment that defines a register
class InitializeTemporaryStatement : Statement
{
    PairedTemporary target;

    Expression value;

    this(this.target, this.value) { }

    override void emit(Generator output)
    {
        auto type = target.type.emit(output.platform);

        int reg = output.fun.staticAlloca(type);
        output.fun.setNamedReg(target.regName, reg);
        int value = value.emit(output);
        output.fun.store(type, reg, value);
    }

    // TODO id here?
    override void hash(Hash hash) {
        hash.adds("InitializeTemporaryStatement");
        value.hash(hash);
    }

    override string repr() { return "%$(target.regName) = $(value.repr)"; }
}

/**
 * Different from PairedTemporary in that it just uses a reg, not an alloca.
 * Must be initialized once with a InitializePairedTemporaryExprStatement
 * Cleaned up by the allocator.
 */
class PairedTemporaryExpr : Expression
{
    string regName;

    Lifetime lifetime;

    this(this.type, this.lifetime, this.regName)
    {
        this.info = ExprInfo(this.lifetime);
    }

    override int emit(Generator output)
    {
        auto type = this.type.emit(output.platform);
        return output.fun.getNamedReg(this.regName);
    }

    // temp value change identified in InitializeTemporaryExprStatement
    // TODO use label?
    override void hash(Hash hash) {
        hash.adds("PairedTemporaryExpr");
        type.hash(hash);
    }

    override string repr() { return "%$regName"; }
}

// assignment that defines a register
class InitializeTemporaryExprStatement : Statement
{
    PairedTemporaryExpr target;

    Expression value;

    this(this.target, this.value) { }

    override void emit(Generator output)
    {
        output.fun.setNamedReg(target.regName, value.emit(output));
    }

    override string repr() {
        return "%$(target.regName) = $(value.repr); ";
    }

    // TODO id here?
    override void hash(Hash hash) {
        hash.adds("InitializeTemporaryExprStatement");
        value.hash(hash);
    }
}

Expression castTo(Expression from, Type to, Context context) {
    if (auto implconv = implicitConvertTo(context, from, to)) return implconv;
    if (from.type.instanceOf(Integer) && to.instanceOf(Long))
        return new IntToLong(from);
    if (from.type.instanceOf(Short) && to.instanceOf(Integer))
        return new ShortToInt(from);
    if (from.type.instanceOf(Character) && to.instanceOf(Integer))
        return new CharToInt(from);
    if (from.type.instanceOf(Short) && to.instanceOf(Long))
        return new IntToLong(new ShortToInt(from));
    if (from.type.instanceOf(Integer) && to.instanceOf(Float) ||
        from.type.instanceOf(Integer) && to.instanceOf(Double) ||
        from.type.instanceOf(Float) && to.instanceOf(Double))
        return new FloatConvert(from, to);
    if (from.type.instanceOf(NullPointer)) return new NullExpr(to);
    return new CastExpr(to, from);
}

class CastExpr : Expression
{
    Type target;

    Expression value;

    this(this.target, this.value) { this.type = target; this.info = ExprInfo(Lifetime.none); }
    override int emit(Generator generator)
    {
        auto type = value.type;
        auto value = this.value.emit(generator);
        auto target = this.target.emit(generator.platform);
        if (type.instanceOf(Long) && this.target.instanceOf(Integer)) {
            return generator.fun.trunc(value, target);
        }
        if (type.instanceOf(Float) && this.target.instanceOf(Integer) ||
            type.instanceOf(Double) && this.target.instanceOf(Integer) ||
            type.instanceOf(Double) && this.target.instanceOf(Float))
        {
            return generator.fun.convert(value, target);
        }
        if (this.value.type.emit(generator.platform).same(target))
        {
            return value;
        }

        return generator.fun.bitcast(value, target);
    }
    override void hash(Hash hash) { hash.adds("CastExpr"); target.hash(hash); value.hash(hash); }
    override string repr() { return "cast($(target.repr)) $(value.repr)"; }
}

class ASTCastExpr : ASTSymbol
{
    ASTSymbol target;

    ASTSymbol value;

    this(this.target, this.value, this.locRange) { }

    override (Expression | fail Error) compile(Context context)
    {
        auto target = this.target.compile(context)?.beType(locRange)?;
        auto value = this.value.compile(context)?.beExpressionImplCall(context, this.locRange)?;

        auto targetArray = target.instanceOf(Array);

        if (value.type.instanceOf(Array) && targetArray)
        {
            return new ArrayCastExpr(value, targetArray.notNull);
        }

        this.locRange.assert(!value.type.instanceOf(Array), "what are you doing, casting array to non?")?;

        return value.castTo(target, context);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astCast", [
            target.quote(quoter),
            value.quote(quoter)], locRange);
    }
}

// Cast that does not affect the bit pattern
class TrivialCastExpr : Expression
{
    Type target;

    Expression value;

    this(this.target, this.value) { this.type = target; this.info = this.value.info; }

    override int emit(Generator generator)
    {
        assert(target.emit(generator.platform).same(this.value.type.emit(generator.platform)));
        return this.value.emit(generator);
    }
    override void hash(Hash hash) { hash.adds("TrivialCastExpr"); target.hash(hash); value.hash(hash); }
    override string repr() { return value.repr; }
}

class ASTNegation : ASTSymbol
{
    ASTSymbol next;

    this(this.next, this.locRange) { }

    override (Expression | fail Error) compile(Context context)
    {
        Expression isTrue = this.next.compile(context)?
            .beExpressionImplCall(context, this.locRange)?
            .truthy2(context, this.locRange)?;

        return new BinaryOp("==", isTrue, new BoolLiteral(false), this.locRange);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compilerCall("astNegation", [next.quote(quoter)], locRange);
    }
}

class SizeOf : Expression
{
    Type targetType;

    this(this.targetType) {
        this.type = once new Integer;
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator output)
    {
        int size = this.targetType.emit(output.platform).size(output.platform);

        return output.fun.intLiteral(size);
    }

    override void hash(Hash hash) { hash.adds("SizeOf"); targetType.hash(hash); }
    override string repr() return "sizeof($(targetType.repr))";
}

class ASTSizeOf : ASTSymbol
{
    ASTSymbol target;

    this(this.target) { }

    override (Symbol | fail Error) compile(Context context)
    {
        auto target = target.compile(context)?;
        if (auto expr = target.instanceOf(Expression))
            return new SizeOf(expr.type);
        if (auto type = target.instanceOf(Type))
            return new SizeOf(type);
        assert(false);
    }

    override ASTSymbol quote(Quoter quoter) {
        return quoter.compiler.astNewExpression(
            quoter.compiler.astIdentifier("ASTSizeOf", __RANGE__), [
                this.target.quote(quoter)], __RANGE__);
    }
}
