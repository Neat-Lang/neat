module std.file;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.error;
import std.stream;
import std.string : cToString, cToStringFree, toStringz;

extern(C) void free(void*);

/// The directory part of a path.
string dirname(string path) {
    import c.libgen : dirname;

    return path.toStringz.dirname.cToString;
}

unittest {
    assert("foo/bar.txt".dirname == "foo");
}

/// The base filename part of a path.
string basename(string path) {
    import c.libgen : basename;

    return path.toStringz.basename.cToString;
}

unittest {
    assert("foo/bar.txt".basename == "bar.txt");
}

version (windows) {
} else {
    /// The canonicalized absolute pathname of the parameter.
    string realpath(string path) {
        import c.stdlib : realpath;

        auto ptr = path.toStringz;
        auto ret = ptr.realpath(null).cToStringFree;

        free(ptr);
        return ret;
    }
}

/**
 *
 * If the path parameter ends with a string of the form `.abcd`, return the path with it removed.
 *
 * Else return the path unchanged.
 */
string withoutExtension(string s) {
    mut string shortened = s;
    while (shortened.length > 0 && shortened[$ - 1 .. $] != ".")
        shortened = shortened[0 .. $ - 1];
    if (shortened.length) return shortened[0 .. $ - 1]; else return s;
}

// TODO figure out why isRegularFile doesn't work on Windows.
version (windows) {
} else {
    bool isRegularFile(string path) {
        import c.sys.stat : S_IFREG, stat, stat_struct;

        mut stat_struct statbuf;
        auto pathPtr = path.toStringz;
        auto res = pathPtr.stat(&statbuf);
        if (res != 0) return false;
        free(pathPtr);
        return statbuf.st_mode & S_IFREG != 0;
    }

    unittest {
        assert(!isRegularFile("."));
        assert(!isRegularFile("nonexistent.txt"));
        assert(isRegularFile("build/neat"));
    }
}

extern(C) void* fopen(char* pathname, char* mode);
extern(C) int fseek(void* stream, size_t offset, int whence);
extern(C) size_t ftell(void* stream);
extern(C) size_t fread(void* ptr, size_t size, size_t nmemb, void* stream);
extern(C) size_t fwrite(void* ptr, size_t size, size_t nmemb, void* stream);
extern(C) int fclose(void* stream);

alias SEEK_SET = 0;
alias SEEK_END = 2;

/// Read the given file into a buffer and return the buffer.
ubyte[] readFile(string file) {
    char* fn = toStringz(file);
    char* rb = toStringz("rb");
    void* f = fopen(fn, rb);
    if (!f) {
        print("File '$file' not found");
        assert(false);
    }
    free(rb);
    fseek(f, 0, SEEK_END);
    size_t fsize = cast(size_t) ftell(f);
    fseek(f, 0, SEEK_SET);  /* same as rewind(f); */

    ubyte[] buffer = new ubyte[](fsize);
    fread(buffer.ptr, 1, fsize, f);
    fclose(f);
    free(fn);

    return buffer;
}

/// Write the given buffer into a file.
void writeFile(string file, ubyte[] data) {
    char* fn = toStringz(file);
    char* wb = toStringz("wb");
    void* f = fopen(fn, wb);
    fwrite(data.ptr, 1, data.length, f);
    fclose(f);
    free(wb);
    free(fn);
}

/// Read the given file into a string buffer and return it. The file must be a text file.
string readText(string file) {
    // TODO validate utf-8?
    return cast(string) file.readFile;
}

/// Write the given string buffer into a file.
void writeText(string path, string data) {
    // TODO validate utf-8?
    path.writeFile(cast(ubyte[]) data);
}

extern(C) int access(char* pathname, int mode);

alias F_OK = 0;

/// True if the given file exists.
bool exists(string file) {
    auto fn = toStringz(file);
    version (windows) {
        import c.windows : GetFileAttributes, INVALID_FILE_ATTRIBUTES;
        auto attributes = GetFileAttributes(fn);
        bool ret = attributes != INVALID_FILE_ATTRIBUTES;
    } else {
        bool ret = access(fn, F_OK) != -1;
    }
    free(fn);
    return ret;
}

/// Create a folder with the given path. The parent folder must exist.
void mkdir(string path) {
    import c.sys.stat : mkdir;
    auto ptr = path.toStringz;
    mkdir(ptr, 511); // 0777
    free(ptr);
}

/// Change the name or location of a file.
void rename(string source, string dest) {
    import c.stdio : rename;
    auto sourcePtr = source.toStringz, destPtr = dest.toStringz;
    rename(sourcePtr, destPtr);
    free(sourcePtr);
    free(destPtr);
}

/// Delete the given file from the filesystem.
void remove(string path) {
    import c.stdio : remove;
    auto ptr = path.toStringz;
    remove(ptr);
    free(ptr);
}

/**
 * Read a file as a stream of byte ranges.
 */
class FileSource : Source!(ubyte[]) {
    int fd;
    mut bool done;
    this(string name) {
        import c.fcntl : open, O_RDONLY;
        this.fd = open(name.toStringz, O_RDONLY, 0);
        this.done = false;
    }

    override (ubyte[] | :else | Error) get() {
        import c.unistd : close, read;
        if (done) return :else;
        auto buffer = new ubyte[](4096);
        auto bytesRead = read(this.fd, buffer.ptr, buffer.length);
        if (bytesRead <= 0) {
            this.done = true;
            close(this.fd);
            // TODO errno
            return :else if bytesRead == 0 else new Error("read() failed");
        }
        return buffer;
    }
}

// Constructors can't return Error (yet?)
(FileSink | Error) fileSink(string file) {
    import c.fcntl : open, O_WRONLY, O_CREAT, S_IRUSR, S_IWUSR;
    auto fd = open(file.toStringz, O_WRONLY | O_CREAT, S_IRUSR | S_IWUSR);
    if (fd == -1) {
        // TODO errno string, ErrnoError?
        return new Error("Could not open '$file' for writing: $(neat_runtime_errno)");
    }
    return new FileSink(fd);
}

private extern(C) int neat_runtime_errno();

/**
 * Sink byte ranges into a file.
 */
class FileSink : Sink!(ubyte[]) {
    int fd;
    this(this.fd) {}

    override (void | Error) put(ubyte[] data) {
        import c.unistd : write;
        mut size_t offset = 0;
        while (offset < data.length) {
            auto remaining = data[offset .. $];
            auto result = write(this.fd, remaining.ptr, remaining.length);
            if (result == -1) {
                // TODO errno
                return new Error("File write() failed");
            }
            offset += result;
        }
    }

    // TODO sink finalization protocol
    void close() {
        import c.unistd : close;
        close(this.fd); // Close the file when this object is destroyed
    }
}
