module neat.decl;

import neat.base;
import neat.statements;
import neat.util;

class ASTAliasDecl : ASTSymbolDeclaration
{
    ASTSymbol target;

    this(this.name, this.target, this.locRange=__RANGE__) { }

    override (Symbol | fail Error) compileSymbol(Context context) {
        return this.target.compile(context)?;
    }
}

(nullable ASTDeclaration | fail Error) parseAliasDecl(Parser parser, LexicalContext lexicalContext) {
    parser.begin;
    auto comment = parser.parseLastComment;
    if (!parser.acceptIdentifier("alias")) {
        parser.revert;
        return null;
    }
    auto from = parser.from;
    auto name = lexicalContext.compiler.parseIdentifierSymbol(parser, lexicalContext)??
        else return parser.fail("alias name expected");
    parser.commit;
    auto locRange = parser.to(from);
    (nullable ASTSymbolDeclaration | fail Error) parseRest() {
        parser.expectToken(TokenType.equal)?;
        parser.begin;
        mut nullable ASTSymbol target = lexicalContext.compiler.parseType(parser, lexicalContext)?;
        if (target && target.instanceOf(ASTIdentifier)) {
            // It was a very trivial type; let's try to get it as an
            // expression instead in case there's some expression stuff after it.
            target = null;
            parser.revert;
            parser.begin;
        }
        if (!target) target = lexicalContext.compiler.parseExpression(parser, lexicalContext)?;
        auto target = target? else return parser.from.fail("alias target expected");
        parser.expectToken(TokenType.semicolon)?;
        parser.commit;
        return new ASTAliasDecl(name, target, locRange);
    }
    if (auto ret = lexicalContext.compiler.parseTemplateStub(parser, lexicalContext, name, comment, &parseRest)?)
        return ret;
    return parseRest?;
}
