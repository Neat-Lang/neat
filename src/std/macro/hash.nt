module std.macro.hash;

macro import std.macro.quasiquoting;

import neat.runtime : assert;
import package(compiler).neat.base;
import package(compiler).neat.util;
import package(compiler).polyhash;

/**
 * This is almost certainly too clever by half.
 */
class StringHashMacro : Macro
{
    nullable Type hashType;

    this() { }

    override void apply(MacroArgs args) {
        auto callMacroArgs = args.instanceOf(CallMacroArgs);
        if (!callMacroArgs) return;
        callMacroArgs.transformed = applyActual(callMacroArgs? else die);
    }

    (nullable Expression | fail Error) applyActual(CallMacroArgs callMacroArgs) {
        auto context = callMacroArgs.context;
        auto astMember = callMacroArgs.target.instanceOf(ASTMemberBase);
        // TODO
        // if (!astMember || astMember.member != "adds") return null;

        // auto isHashMethod = callMacroArgs.target.compile(context).same(
        //   (compiler.$expr (new Hash).adds).compile(context));
        // TODO LateSymbol this
        /*
        auto classMethodPtr = callMacroArgs.target.compile(context)?.instanceOf(ClassMethodPtr);
        if (!classMethodPtr) return null;
        auto type = classMethodPtr.thisValue.type;
        // TODO look up Hash with fqn path
        if (!this.hashType) {
            auto hashType = findParent!ModuleBase(context.namespace).lookup(
                "Hash", context, LookupReason.identifier, __RANGE__)?;
            if (!hashType || !hashType.instanceOf(Type)) return null;
            this.hashType = hashType.instanceOf(Type);
        }
        Type notNullHashType() {
            if (auto type = this.hashType) return type;
            assert(false);
        }
        auto isHash = type.same(notNullHashType);
        if (!isHash) return null;
        // it's a Hash.adds() call.
        assert(callMacroArgs.args.length == 1);
        auto str = callMacroArgs.args[0].sym.compile(context)?.instanceOf(StringLiteralBase);
        if (!str) return null; // variable call
        return optimizeStringCall(astMember.base, str.text, context, callMacroArgs.locRange);
        */
        return null;
    }

    (Expression | fail Error) optimizeStringCall(ASTSymbol base, string str, Context context, LocRange locRange) {
        auto state = new PolyHash(str);
        auto add = context.compiler.astNumberLiteral(state.add, locRange);
        auto mult = context.compiler.astNumberLiteral(state.mult, locRange);

        if (auto expr = (context.compiler.$expr $base.apply($add, $mult)).compile(context)?.instanceOf(Expression))
            return expr;
        assert(false);
    }
}

void addStringHashMacro(MacroState macroState)
{
    macroState.addMacro(new StringHashMacro);
}

macro(addStringHashMacro);

