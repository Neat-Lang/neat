module neat.FileIdTableImpl;

macro import std.macro.listcomprehension;

import std.file;
import std.json;
import std.thread;

import neat.base;
import neat.runtime;

final class FileIdTableImpl : FileIdTable
{
    bool[int] pinnedFileIds;

    FileIdCache fileIdCache;

    Mutex mutex;

    this() { this.fileIdCache = new FileIdCache; this.mutex = new Mutex; }

    override int toFileId(string filename) with (this.mutex.locked) {
        fileIdCache.getCachedIdFor(filename).case(int i: return i);
        return fileIdCache.setNextFreeIdFor(filename);
    }

    override void setInheritedFileId(int id, string filename) with (this.mutex.locked) {
        if (fileIdCache.getCachedIdFor(filename).case(int i: i != id, :none: false)) {
            // TODO clear the file cache if this happens
            assert(false);
        }
        fileIdCache.setCachedIdFor(filename, id);
    }

    override string toFileName(int fileId) with (this.mutex.locked) {
        return fileIdCache.getCachedFilenameFor(fileId).case(:none: "[UNKNOWN]");
    }

    /**
     * When compiling an expression that will evaluate to a fileId in the target binary,
     * the fileId used must be pinned so that the FileIdTable created in the target binary
     * can be prepopulated.
     */
    override void pin(int fileId) with (this.mutex.locked) {
        pinnedFileIds[fileId] = true;
    }
}

/**
 * Cache assigned file IDs between runs.
 * Avoids file ID divergence in multithreaded builds.
 */
class FileIdCache
{
    Mutex mutex;

    alias file = (".obj/file_id_cache.json");

    int[string] fileId;

    string[int] fileName;

    this() {
        this.mutex = new Mutex;
        load;
    }

    (int | :none) getCachedIdFor(string name) with (this.mutex.locked) {
        if (this.fileId.has(name)) return this.fileId[name];
        return :none;
    }

    (string | :none) getCachedFilenameFor(int id) with (this.mutex.locked) {
        if (this.fileName.has(id)) return this.fileName[id];
        return :none;
    }

    int setNextFreeIdFor(string name) with (this.mutex.locked) {
        mut int i = 0;
        while (fileName.has(i)) i++;
        set(name, i);
        save;
        return i;
    }

    void setCachedIdFor(string name, int id) with (this.mutex.locked) {
        set(name, id);
        save;
    }

    private void set(string name, int id) {
        this.fileId[name] = id;
        this.fileName[id] = name;
    }

    private void load() {
        if (!file.exists) return;
        JSONValue cache = JSONValue.loadFile(file);
        auto obj = cache.expect!((string key, JSONValue value)[])?;
        for (kv in obj) {
            auto name = kv.key;
            auto id = kv.value.expect!int?;
            this.fileId[name] = id;
            this.fileName[id] = name;
        }
    }

    private void save() {
        mut (string key, JSONValue value)[] entries;
        for (key in fileId.keys) {
            entries ~= (key, JSONValue(fileId[key]));
        }
        auto cache = JSONValue(entries);
        file.writeText(cache.toString);
    }
}

private (T | fail void) expect(T)(JSONValue value) {
    value.value.case {
        T t: return t;
        default: return;
    }
}
