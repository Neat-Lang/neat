module day13;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.math;
import std.stdio;
import std.string;

void main() {
    auto lines = stdin.byLine.array;
    auto pairs = lines.splitter("")
        .map(pair => pair.array.(first=that[0].parse, second=that[1].parse))
        .array;
    auto rightIndices = [i + 1 for i, pair in pairs where compare(pair.first, pair.second) == :right];
    print("right indices $rightIndices, sum $([sum a for a in rightIndices])");
    auto dividers = [Value([Value([Value(2)])]), Value([Value([Value(6)])])];
    auto allLines = lines.filter(a => !a.empty).map(a => a.parse).array ~ dividers;
    auto smaller = cmpResult => cmpResult.case(:wrong: false, :right: true, :equal: false);
    auto sorted = allLines.sort((a, b) => compare(a, b).smaller);
    auto div1 = [first i for i, a in sorted where a == dividers[0]] + 1;
    auto div2 = [first i for i, a in sorted where a == dividers[1]] + 1;
    print("divider = $div1, divider 2 $div2, key $(div1 * div2)");
}

alias CmpResult = (:wrong | :right | :equal);

CmpResult compare(Value left, Value right) {
    left.value.case {
        int leftInt: right.value.case {
            int rightInt:
                if (leftInt < rightInt) return :right;
                if (leftInt > rightInt) return :wrong;
                return :equal;
            Value[] j: return compare(Value([left]), right);
        }
        Value[] i: right.value.case {
            int j: return compare(left, Value([right]));
            Value[] j: return compare(i, j);
        }
    }
}

CmpResult compare(Value[] left, Value[] right) {
    for (i in 0 .. max(left.length, right.length)) {
        if (i >= left.length) return :right;
        if (i >= right.length) return :wrong;
        auto cmpElement = compare(left[i], right[i]);
        if (cmpElement != :equal) return cmpElement;
    }
    return :equal;
}

struct Value {
    (Value[] | int) value;
    string toString() => value.case(Value[] e: "$e", int i: "$i");
}

Value parse(string str) => (new Parser(str)).parse;

class Parser {
    string str;
    this(this.str) {}
    Value parse() {
        if (str.front == '[') {
            str = str[1 .. $];
            mut Value[] ret;
            while (str.front != ']') {
                ret ~= parse;
                if (str.front == ',') str = str[1 .. $];
            }
            str = str[1 .. $];
            return Value(ret);
        }
        auto next = str.until(",").until("]");
        str = str[next.length .. $];
        return Value(next.atoi);
    }
}

string until(string haystack, string needle) {
    auto pos = haystack.find(needle);
    if (pos == -1) return haystack;
    return haystack[0 .. pos];
}
