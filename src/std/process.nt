module std.process;

import std.string;

extern(C) char* getenv(char* name);

/// The value of the environment variable named `name`.
string getEnv(string name) {
    return name.toStringz.getenv.cToString;
}

private extern(C) char* tmpnam(char*);
private extern(C) void neat_runtime_system(string command);
private extern(C) int neat_runtime_system_iret(string command);

/// Executes the shell command and returns the output it wrote.
string readback(string command) {
    import std.file : readText, remove;
    import std.string : toStringz;

    // meh.
    auto tmp = tmpnam(null).cToString;
    neat_runtime_system(command ~ " > " ~ tmp);
    auto ret = readText(tmp);
    remove(tmp);
    return ret;
}

/// Executes the shell command.
void system(string command) {
    neat_runtime_system(command);
}

// FIXME overloading
int system_iret(string command) {
    return neat_runtime_system_iret(command);
}

/**
 * Gets the full path of the binary of the current process.
 */
string currentProcessPath() {
    import std.file : realpath;
    version (windows) {
        import c.windows : GetModuleFileName, MAX_PATH;
        import c.stdlib : exit;
        auto buffer = new char[](MAX_PATH);
        auto len = GetModuleFileName(null, buffer.ptr, cast(int) buffer.length);
        if (len == MAX_PATH) {
            print("current module path exceeds MAX_PATH!");
            exit(1);
        }
        return buffer[0 .. len];
    } else {
        return "/proc/self/exe".realpath;
    }
}

/**
 * Executes the binary found at `path` with `args`.
 * Blocks until the binary returns.
 */
int exec(string path, string[] args) {
    import neat.runtime.stdlib : fprintf, stderr;

    version (windows) {
        import c.windows : STARTUPINFO, PROCESS_INFORMATION, CreateProcess, WaitForSingleObject, INFINITE, CloseHandle;

        mut string cmdline = path;
        for (arg in args) cmdline ~= arg;
        auto cmdlinePtr = cmdline.toStringz;
        mut STARTUPINFO info;
        mut PROCESS_INFORMATION processInfo;
        if (!CreateProcess(null, cmdlinePtr, null, null, true, 0, null, null, &info, &processInfo)) {
            fprintf(stderr, "CreateProcess() failed\n");
            return 1;
        }
        WaitForSingleObject(processInfo.hProcess, INFINITE);
        CloseHandle(processInfo.hProcess);
        CloseHandle(processInfo.hThread);
        return 0;
    } else {
        int ret = fork();
        if (ret != 0) {
            mut int wstatus;
            int ret = waitpid(ret, &wstatus, 0);
            if (ret == -1) {
                fprintf(stderr, "waitpid() failed: %s\n", strerror(neat_runtime_errno));
            }
            return wstatus;
        }
        char* pathC = toStringz(path);
        auto argsArray = new char*[](args.length + 1);
        char** argsC = argsArray.ptr;
        argsC[0] = pathC;
        for (i, arg in args) {
            argsC[i + 1] = arg.toStringz;
        }
        argsC[args.length + 1] = null;
        execv(pathC, argsC);
        return 0;
    }
}

private extern(C) int fork();
private extern(C) bool neat_runtime_waitpid(int);
private extern(C) int execv(char* pathname, char** argv);
private extern(C) int waitpid(int pid, int* wstatus, int options);
private extern(C) char* strerror(int);
private extern(C) int neat_runtime_errno();
