module polyhash;

alias Hash = PolyHash;

// Polynomial hash for composability
final class PolyHash
{
    mut long add, mult;
    this() {
        // hopefully copied from fnv
        // offset basis
        this.add = 14695981039346656037;
        this.mult = 1;
    }
    this(string s) {
        this.add = 14695981039346656037;
        this.mult = 1;
        adds(s);
    }
    void adds(string s) {
        // in a polynomial hash, we apply a string by computing h * p^(s.length) + ((s[0]*p + s[1])*p + s[2])*p...
        // iow, h * p^(s.length) + s[0] * p^(s.length - 1) + s[1] * p^(s.length - 2) + ...
        // p^(s.length) can be efficiently determined by counting along
        mut long resAdd = 0, resMult = 1;
        // INVERSE index cause we're counting up factors
        for (i in 0 .. s.length) {
            resAdd += cast(long) s[$ - 1 - i] * resMult;
            resMult *= PRIME;
        }
        apply(resAdd, resMult);
    }
    void addl(long l) {
        mut long resAdd = 0, resMult = 1;
        for (i in 0 .. 8) {
            resAdd += (l >> (8 * i)) & 0xff * resMult;
            resMult *= PRIME;
        }
        apply(resAdd, resMult);
    }
    void apply(long add, long mult) {
        this.add = this.add * mult + add;
        this.mult *= mult;
    }
    void applyHash(Hash other) {
        apply(other.add, other.mult);
    }
    string text() {
        mut string res;
        for (i in 0 .. 8) {
            char toHex(int i) {
                if (i < 10) return "0123456789"[i];
                return "ABCDEF"[i - 10];
            }
            int b = cast(int) ((add >> (8 * i)) & 0xff);
            res ~= toHex(b >> 4);
            res ~= toHex(b & 0xf);
        }
        // this makes output look fun & wavy by sometimes
        // having filenames be a bit shorter.
        while (!res.empty && res.front == '0') res = res[1 .. $];
        return res;
    }
}

private alias PRIME = 1099511628211;
