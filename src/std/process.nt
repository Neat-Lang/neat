module std.process;

import std.string;

extern(C) char* getenv(char* name);

/// The value of the environment variable named `name`.
string getEnv(string name) {
    return name.toStringz.getenv.cToString;
}

private extern(C) char* tmpnam(char*);
private extern(C) void neat_runtime_system(string command);
private extern(C) int neat_runtime_system_iret(string command);

/// Executes the shell command and returns the output it wrote.
string readback(string command) {
    import std.file : readText, remove;
    import std.string : toStringz;

    // meh.
    auto tmp = tmpnam(null).cToString;
    neat_runtime_system(command ~ " > " ~ tmp);
    auto ret = readText(tmp);
    remove(tmp);
    return ret;
}

/// Executes the shell command.
void system(string command) {
    neat_runtime_system(command);
}

// FIXME overloading
int system_iret(string command) {
    return neat_runtime_system_iret(command);
}

/**
 * Executes the binary found at `path` with `args`.
 * Blocks until the binary returns.
 */
void exec(string path, string[] args) {
    int ret = fork();
    if (ret != 0) {
        neat_runtime_waitpid(ret);
        return;
    }
    char* pathC = toStringz(path);
    auto argsArray = new char*[](args.length + 1);
    char** argsC = argsArray.ptr;
    argsC[0] = pathC;
    for (i, arg in args) {
        argsC[i + 1] = arg.toStringz;
    }
    argsC[args.length + 1] = null;
    execv(pathC, argsC);
}

private extern(C) int fork();
private extern(C) bool neat_runtime_waitpid(int);
private extern(C) int execv(char* pathname, char** argv);
