module std.json;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import neat.base;
import neat.lexer;
import neat.parser;
import std.string;

/**
 * This type represents a JSON value.
 */
struct JSONValue
{
    // TODO: Write dedicated JSON parser instead of hijacking neat's parsing.
    (:false | :true | int | string | JSONValue[] | (string key, JSONValue value)[]) value;

    /**
     * Parse a JSON value from a string.
     */
    static JSONValue parse(string str) {
        (JSONValue | fail Error) result() {
            auto parser = new ParserImpl("", str, tokenize(str, filename="")?);
            auto ret = jsonParseImpl(parser)?;
            if (!parser.eof) return parser.fail("text after json");
            return ret;
        }
        result.case {
            JSONValue value: return value;
            Error err: err.exitWithError;
        }
    }

    /**
     * Load a JSON value from a file.
     */
    static JSONValue loadFile(string file) {
        import std.file : readText;

        auto str = readText(file);
        (JSONValue | fail Error) result() {
            auto parser = new ParserImpl(file, str, tokenize(str, filename=file)?);
            auto ret = jsonParseImpl(parser)?;
            if (!parser.eof) return parser.fail("text after json");
            return ret;
        }
        result.case {
            JSONValue value: return value;
            Error err: err.exitWithError;
        }
    }

    /// Interprets a JSON value as an integer.
    int integer() {
        return this.getType!int;
    }

    /// Interprets a JSON value as a string.
    string str() {
        return this.getType!string;
    }

    /// Interprets a JSON value as a boolean.
    bool boolean() {
        value.case {
            :true: return true;
            :false: return false;
            default: assert(false);
        }
    }

    /// Interprets a JSON value as an array.
    JSONValue[] array() {
        return this.getType!(JSONValue[]);
    }

    /// Interprets a JSON value as an object.
    (string key, JSONValue value)[] object() {
        return this.getType!((string key, JSONValue value)[]);
    }

    /// Returns true if the JSON value is an array.
    bool isArray() {
        value.case {
            JSONValue[] array: return true;
            default: return false;
        }
    }

    /// Returns true if the JSON value is an object.
    bool isObject() {
        value.case {
            (string key, JSONValue value)[] obj: return true;
            default: return false;
        }
    }

    /// Returns the JSON value for a key.
    JSONValue get(string key) {
        auto obj = object;
        assert([any a.key == key for a in obj]);
        return [first a.value for a in obj where a.key == key else ({ assert(false); JSONValue(:false); })];
    }

    /// Returns true if the JSON value, which must be an object, contains the key.
    bool has(string key) {
        return [any a.key == key for a in object];
    }

    /**
     * Sets the given key to a value.
     */
    void set(string key, JSONValue value) {
        auto obj = object;
        for (i, k in obj) {
            if (k.key == key) {
                this.value = obj[0 .. i] ~ (key, value) ~ obj[i + 1 .. $];
                return;
            }
        }
        this.value = object ~ (key, value);
    }

    /// Given the value is an object, returns an array of string keys.
    string[] keys() {
        return [a.key for a in object];
    }
}

private T getType(T)(JSONValue* value) {
    value.value.case {
        T res: return res;
        default: assert(false);
    }
}

unittest
{
    auto value = JSONValue([("Hello", JSONValue("World"))]);
    assert(value.str == "{\"Hello\": \"World\"}");
    assert(JSONValue.parse("{\"Hello\": \"World\"}").str == "{\"Hello\": \"World\"}");
}
private (JSONValue | fail Error) jsonParseImpl(Parser parser) {
    if (parser.acceptToken(TokenType.doubleQuote)) {
        return JSONValue(parseStringLiteral(parser)?);
    }
    parser.parseJsonNumber?.case {
        (:failure): {}
        int value: return JSONValue(value);
    }
    if (parser.acceptIdentifier("true")) return JSONValue(:true);
    if (parser.acceptIdentifier("false")) return JSONValue(:false);
    if (parser.acceptToken(TokenType.lsquarebracket)) {
        mut JSONValue[] entries;
        if (!parser.acceptToken(TokenType.rsquarebracket)) while (true) {
            entries ~= jsonParseImpl(parser)?;
            if (parser.acceptToken(TokenType.rsquarebracket)) break;
            parser.expectToken(TokenType.comma)?;
        }
        return JSONValue(entries);
    }
    if (parser.acceptToken(TokenType.lcurlybracket)) {
        mut (string key, JSONValue value)[] entries;
        if (!parser.acceptToken(TokenType.rcurlybracket)) while (true) {
            parser.expectToken(TokenType.doubleQuote)?;
            auto key = parseStringLiteral(parser)?;
            parser.expectToken(TokenType.colon)?;
            auto value = jsonParseImpl(parser)?;
            entries ~= (key, value);
            if (parser.acceptToken(TokenType.rcurlybracket)) break;
            parser.expectToken(TokenType.comma)?;
        }
        return JSONValue(entries);
    }
    return parser.fail("unexpected input: " ~ parser.text);
}

// reused by the macro
(string | fail Error) parseStringLiteral(Parser parser)
{
    auto str = parser.acceptTokenStr(TokenType.stringLiteral)
        .case(:none: return parser.fail("lexer error: string expected"));
    if (!parser.acceptToken(TokenType.doubleQuote))
        return parser.fail("'\"' expected");
    return replaceEscapes(str);
}

// reused by the macro
(:failure | int | fail Error) parseJsonNumber(Parser parser)
{
    parser.begin;
    mut bool negative = parser.acceptToken(TokenType.lparen);
    if (parser.acceptToken(TokenType.minus))
        negative = true;
    parser.acceptTokenStr(TokenType.number).case {
        :none:
            parser.revert;
            return (:failure);
        string number:
            parser.commit;
            mut int i = atoi(number);
            if (negative) i = -i;
            return i;
    }
}

// Helper used by the macro to convert anything into JSONValue - including a JSONValue.
public JSONValue __jv(
    (bool | int | string | JSONValue[] | (string key, JSONValue value)[] | JSONValue) arg)
{
    return arg.case(
        bool b: JSONValue(b),
        int i: JSONValue(i),
        string s: JSONValue(s),
        JSONValue[] arr: JSONValue(arr),
        (string key, JSONValue value)[] hash: JSONValue(hash),
        JSONValue value: value // TODO ,
    );
}

/**
 * Converts a JSON value to a string.
 */
string toString(JSONValue jv) {
    jv.value.case {
        (:false): return "false";
        (:true): return "true";
        int i: return itoa(i);
        string s: return quote(s);
        JSONValue[] array:
            return "[" ~ [join with ", " v.toString for v in array] ~ "]";
        (string key, JSONValue value)[] obj:
            return "{" ~ [join with ", " quote(e.key) ~ ": " ~ e.value.toString for e in obj] ~ "}";
    }
}

private string quote(string s) {
    mut string quoted;
    for (ch in s) {
        if (ch == '"') quoted ~= "\\\"";
        else quoted ~= ch;
    }
    return "\"" ~ quoted ~ "\"";
}

private string replaceEscapes(string text) {
    mut string result;
    mut int i;
    while (i < text.length) {
        string ch = text[i .. i + 1];
        i += 1;
        if (ch == "\\") {
            string ctl = text[i .. i + 1];
            i += 1;
            if (ctl == "\"") {
                result ~= "\"";
            } else if (ctl == "\\") {
                result ~= "\\";
            } else {
                print("Unknown control sequence \\" ~ ctl);
                assert(false);
            }
        } else {
            result ~= ch;
        }
    }
    return result;
}
