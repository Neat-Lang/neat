module day9;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.math;
import std.stdio;
import std.string;

alias vec2i = Vector(int, 2);

// TODO big hashmap rewrite to template form

void main()
{
    auto dirToVec = dir => dir.case(
        "U": vec2i(-1, 0),
        "D": vec2i(1, 0),
        "L": vec2i(0, -1),
        "R": vec2i(0, 1));
    auto cmds = stdin.byLine
        .filter(a => !a.empty)
        .map(line => line.split(" ").(dir=that[0].dirToVec, count=that[1].atoi))
        .array;
    mut vec2i head = vec2i(0, 0), tail = vec2i(0, 0);
    mut bool[string] touched;
    void touch(vec2i p) { touched["$(p.x), $(p.y)"] = true; }
    vec2i follow(vec2i tail, vec2i head) {
        auto d = head - tail;
        auto max = d.(max(x.abs, y.abs)), min = d.(min(x.abs, y.abs));
        if (max <= 1) return tail; // touching
        if (max == min) {
            // clean diagonal move
            return tail + d / 2;
        } else if (max == 2 && min == 1) {
            // skewed diagonal move
            auto fixup = i => i.case(-2: -1, -1: -1, 1: 1, 2: 1);
            return tail + vec2i(fixup(d.x), fixup(d.y));
        } else {
            // straight move
            assert(max == 2 && min == 0);
            return tail + d / 2;
        }
    }
    for (cmd in cmds) {
        for (_ in 0 .. cmd.count) {
            head += cmd.dir;
            tail = tail.follow(head);
            touch(tail);
        }
    }
    print("Visited $(touched.keys.length) positions.");
    touched.clear;
    mut auto nodes = [vec2i(0, 0) for i in 0 .. 10];
    for (cmd in cmds) {
        for (_ in 0 .. cmd.count) {
            nodes[0] += cmd.dir;
            for (i in 1 .. nodes.length) {
                nodes[i] = nodes[i].follow(nodes[i - 1]);
            }

            touch(nodes[$ - 1]);
        }
    }
    print("Extended visited $(touched.keys.length) positions.");
}
