module std.thread;

import neat.runtime : assert;
import std.stdio;

version (windows) {
    import c.windows;
} else {
    import c.pthread;
    import c.semaphore;
    pragma(lib, "pthread");
}

/**
 * This class implements mutual exclusion.
 *
 * `lock` and `unlock` calls must be paired. Only one thread may be between `lock`
 * and `unlock` at the same time. To enforce this, the second thread's `lock` will
 * block until the first thread calls `unlock`.
 */
class Mutex
{
    version (windows) {
        CRITICAL_SECTION section;
    } else {
        pthread_mutex_t mutex;
    }
    mut bool isLocked;

    this() {
        version (windows) {
            InitializeCriticalSection(&section);
        } else {
            mut pthread_mutexattr_t attrs;
            pthread_mutexattr_init(&attrs);
            pthread_mutexattr_settype(&attrs, PTHREAD_MUTEX_ERRORCHECK);
            pthread_mutex_init(&mutex, &attrs);
        }
        isLocked = false;
    }

    // TODO class destructor
    /*
    ~this() {
        version (windows) {
            DeleteCriticalSection(&section);
        }
    }
    */

    /// Lock the mutex.
    void lock() {
        version (windows) {
            EnterCriticalSection(&section);
        } else {
            int ret = pthread_mutex_lock(&mutex);
            if (ret) {
                import c.stdlib : exit;
                print("pthread_mutex_lock $ret");
                exit(1);
            }
        }
        assert(!isLocked);
        isLocked = true;
    }
    /// Scope guard that automatically calls lock on scope entry and unlock on scope exit.
    LockGuard locked() {
        return LockGuard(this);
    }
    /**
     * Scope guard that automatically calls unlock on scope entry and lock on scope exit.
     *
     * Used to implement work loops that want to release their lock to do some task.
     */
    UnlockGuard unlocked() {
        return UnlockGuard(this);
    }
    /// Unlock the mutex.
    void unlock() {
        assert(isLocked);
        isLocked = false;
        version (windows) {
            LeaveCriticalSection(&section);
        } else {
            int ret = pthread_mutex_unlock(&mutex);
            if (ret) {
                import c.stdlib : exit;
                print("pthread_mutex_unlock $ret");
                exit(1);
            }
        }
    }
}


unittest
{
    auto mutex = new Mutex;

    assert(!mutex.isLocked);
    with (mutex.locked) {
        assert(mutex.isLocked);
    }
    assert(!mutex.isLocked);
}

unittest
{
    auto mutex = new Mutex;

    void returnTest() {
        with (mutex.locked) {
            return;
        }
    }
    returnTest;
    assert(!mutex.isLocked);
}

private struct LockGuard
{
    Mutex mutex;
    void onEnter() {
        mutex.lock;
    }
    void onExit() {
        mutex.unlock;
    }
}

private struct UnlockGuard
{
    Mutex mutex;
    void onEnter() {
        mutex.unlock;
    }
    void onExit() {
        mutex.lock;
    }
}

/**
 * This class implements condition variables.
 *
 * A condition variable allows a thread to wait until a condition is signaled.
 * The provided mutex must be locked when `wait` is called. It will be locked
 * when wait returns, but be unlocked for the intermediate time.
 */
class CondVar
{
    version (windows) {
        // ad-hoc, inefficient implementation
        Mutex innerMutex;
        mut int waiting;
        Semaphore activated, confirmed;
    } else {
        pthread_cond_t cond;
    }

    Mutex mutex;

    this(this.mutex) {
        version (windows) {
            this.innerMutex = new Mutex;
            this.waiting = 0;
            this.activated = new Semaphore(0);
            this.confirmed = new Semaphore(0);
        } else {
            pthread_cond_init(&cond, null);
        }
    }

    /// Wait for a thread to signal us.
    void wait() {
        version (windows) {
            with (innerMutex.locked)
                waiting++;
            with (mutex.unlocked) {
                activated.acquire;
                confirmed.release;
            }
        } else {
            assert(mutex.isLocked);
            mutex.isLocked = false;
            int ret = pthread_cond_wait(&cond, &this.mutex.mutex);
            if (ret) {
                import c.stdlib : exit;
                print("pthread_cond_wait $ret");
                exit(1);
            }
            assert(!mutex.isLocked);
            mutex.isLocked = true;
        }
    }

    /// Wake up (at least) one waiting thread.
    void signal() {
        version (windows) {
            with (innerMutex.locked) {
                if (waiting == 0) return;
                activated.release;
                confirmed.acquire;
                waiting--;
            }
        } else {
            int ret = pthread_cond_signal(&cond);
            if (ret) {
                import c.stdlib : exit;
                print("pthread_cond_signal $ret");
                exit(1);
            }
        }
    }

    /// Wake up all waiting threads.
    void broadcast() {
        version (windows) {
            with (innerMutex.locked) {
                for (int _ in 0 .. waiting) {
                    activated.release;
                }
                for (int _ in 0 .. waiting) {
                    confirmed.acquire;
                }
                waiting = 0;
            }
        } else {
            int ret = pthread_cond_broadcast(&cond);
            if (ret) {
                import c.stdlib : exit;
                print("pthread_cond_broadcast $ret");
                exit(1);
            }
        }
    }
}

/**
 * A convenience wrapper around CondVar that allows waiting
 * for the outcome of an operation.
 */
template Waitable(T)
{
    class Waitable
    {
        Mutex mutex;
        CondVar signal;
        mut T value;
        /// Create the class with an initial value.
        this(this.value) {
            this.mutex = new Mutex;
            this.signal = new CondVar(this.mutex);
        }
        /// Set the stored value to a new value.
        void set(T value) {
            with (mutex.locked) {
                this.value = value;
                signal.broadcast;
            }
        }
        /// Provide an action that updates the stored value.
        void update(T delegate!(T) action) {
            with (mutex.locked) {
                this.value = action(this.value);
                signal.broadcast;
            }
        }
        /// Wait for the stored value to fulfill the condition.
        void waitFor(bool delegate!(T) condition) {
            T id(T value) { return value; }
            waitReact(condition, &id);
        }
        /// Wait for the stored value to fulfill the condition, then modify it.
        void waitReact(bool delegate!(T) condition, T delegate!(T) react) {
            with (mutex.locked) while (true) {
                if (condition(this.value)) {
                    this.value = react(this.value);
                    signal.broadcast;
                    return;
                }
                signal.wait;
            }
        }
    }
}

/**
 * This class implements a counting semaphore.
 *
 * `acquire` will only return when a matching number
 * of `release` calls has taken place.
 */
class Semaphore
{
    version (windows) {
        HANDLE sem;
    } else {
        sem_t sem;
    }

    /// Initialize the class with a number of available tokens.
    this(int i) {
        version (windows) {
            this.sem = CreateSemaphore(null, i, lMaximumCount=0x7fff_ffff, name=null);
        } else {
            if (sem_init(&sem, pshared=0, value=i) == -1) {
                errnoDie("sem_init()");
            }
        }
    }

    // TODO class destructor
    /*~this() {
        if (sem_destroy(&sem) == -1) {
            errnoDie("sem_destroy()");
        }
    }*/

    /// Consume a token if available; block if not.
    void acquire() {
        version (windows) {
            int ret = WaitForSingleObject(this.sem, milliseconds=INFINITE);
            if (ret != 0) {
                import neat.runtime : die, print;
                print("WaitForSingleObject() failed: $ret");
                die;
            }
        } else {
            if (sem_wait(&sem) == -1) {
                if (neat_runtime_errno == EINTR)
                    return acquire;
                errnoDie("sem_wait()");
            }
        }
    }

    /// Provide a token.
    void release() {
        version (windows) {
            int ret = ReleaseSemaphore(this.sem, 1, lpPreviousCount=null);
            if (ret == 0) {
                import neat.runtime : die, print;
                print("ReleaseSemaphore() failed: $ret");
                die;
            }
        } else {
            if (sem_post(&sem) == -1) {
                errnoDie("sem_post()");
            }
        }
    }
}

private alias EINTR = 4;
private extern(C) int neat_runtime_errno();

private void errnoDie(string msg) {
    import neat.runtime : die, print;
    print("$msg failed: $(neat_runtime_errno)");
    die;
}

/**
 * The superclass for a task that can be scheduled to run on a thread pool.
 */
abstract class Task
{
    abstract void run();
}

private class Thread
{
    version (windows) {
        mut HANDLE thr;
    } else {
        pthread_t thr;
    }
    ThreadPool pool;
    void delegate() runDg;

    this(this.pool) { runDg = &run; }
    void start() {
        version (windows) {
            this.thr = CreateThread(null, 8*1024*1024, &callThreadDg, &runDg, 0, null);
            if (!this.thr) {
                import neat.runtime : die, print;
                print("CreateThread() failed");
                die;
            }
        } else {
            mut pthread_attr_t attr;
            pthread_attr_init(&attr);
            pthread_attr_setstacksize(&attr, 8*1024*1024);
            pthread_create(&thr, &attr, &callThreadDg, &runDg);
        }
    }
    void run() {
        while (true) {
            pool.getTask.run;
            pool.doneTasks.release;
        }
    }

    /**
     * Put the current thread to sleep for `seconds` seconds.
     */
    static void sleep(float seconds) {
        version (windows) {
            import c.windows : Sleep;
            auto millis = cast(int) (seconds * 1000);
            Sleep(millis);
        } else {
            import c.sys.time : nanosleep, timespec;
            mut timespec ts;
            ts.tv_sec = cast(int) seconds;
            ts.tv_nsec = cast(int) ((seconds - cast(int) ts.tv_sec) * 1_000_000_000);
            nanosleep(&ts, null);
        }
    }
}

// A numeric identifier uniquely describing the current thread.
long currentThreadID() {
    version (windows) {
        return GetCurrentThreadId;
    } else {
        return pthread_self;
    }
}

// TODO extern(C) with definition?
void callThreadDg(void* arg) {
    auto dg = *(cast(void delegate!()*) arg);

    dg();
}

/**
 * A thread pool decouples threads and units of action. It manages multiple threads
 * and keeps a queue of tasks, which are distributed over threads as they become available.
 */
class ThreadPool
{
    Mutex mutex;
    mut Task[] tasks;
    Thread[] threads;
    mut int queuedTasks;
    Semaphore waitingTasks;
    Semaphore doneTasks;

    /// Create a thread pool with a number of threads.
    this(int i) {
        this.mutex = new Mutex;
        this.waitingTasks = new Semaphore(0);
        this.doneTasks = new Semaphore(0);
        for (j in 0 .. i) {
            auto thread = new Thread(this);
            thread.start;
            threads ~= thread;
        }
    }
    /**
     * Returns when all queued tasks have completed.
     * The callback will be invoked with a number between 0 and 1, indicating progress.
     * Intended for standalone tools that want to present a progress bar.
     */
    void waitComplete(void delegate!(float) progress) {
        mut int tasks;
        with (this.mutex.locked) {
            tasks = this.queuedTasks;
            this.queuedTasks = 0;
        }
        for (i in 0 .. tasks) {
            this.doneTasks.acquire;
            progress((cast(int) i + 1) * 1.0f / tasks);
        }
    }
    /**
     * Add a task to the pool's task queue.
     */
    void addTask(Task task) {
        with (mutex.locked) {
            tasks ~= task;
            this.queuedTasks += 1;
        }
        this.waitingTasks.release;
    }
    /**
     * For internal use, returns a task when one has been queued.
     */
    Task getTask()  {
        this.waitingTasks.acquire;
        with (mutex.locked) {
            auto ret = tasks[0];
            tasks = tasks[1 .. $];
            return ret;
        }
    }
}

// TODO: null to function ptr
private void nothing(void*) { }

/**
 * This class wraps a value that is unique per thread accessing it.
 */
class ThreadLocal(T) {
    version (windows) {
        DWORD key;
    } else {
        pthread_key_t key;
    }
    /// Initialize a `ThreadLocal`.
    this() {
        version (windows) {
            key = TlsAlloc;
            if (key == TLS_OUT_OF_INDEXES) {
                import neat.runtime : die, print;
                print("TlsAlloc() failed: out of indexes");
                die;
            }
        } else {
            pthread_key_create(&key, &nothing);
        }
    }
    /**
     * Set the `ThreadLocal` to a new value.
     */
    void set(mut T value) {
        import neat.runtime.stdlib : malloc, memcpy, memset;

        version (windows) {
            mut void* memory = TlsGetValue(key);
        } else {
            mut void* memory = pthread_getspecific(key);
        }
        if (!memory) {
            memory = malloc(sizeof(T));
            version (windows) {
                TlsSetValue(this.key, memory);
            } else {
                pthread_setspecific(key, memory);
            }
        }
        // TODO: __leak()?
        memcpy(memory, &value, sizeof(T));
        // destroy the value without releasing it: cause a leak.
        memset(&value, 0, sizeof(T));
    }
    /**
     *Get the value stored in the `ThreadLocal`.
     * If `set` has not been called, the default value for the type
     * is returned.
     */
    T get() {
        import neat.runtime.stdlib : memcpy, memset;

        version (windows) {
            auto memory = TlsGetValue(key);
        } else {
            auto memory = pthread_getspecific(key);
        }
        if (!memory) {
            T t;
            return t;
        }
        mut uninitialized T copy;
        memcpy(&copy, memory, sizeof(T));
        mut auto result = copy;
        memset(&copy, 0, sizeof(T));
        return result;
    }
}

version (windows) {
    extern(C) int GetCurrentThreadId();
} else {
    extern(C) long pthread_self();
}
