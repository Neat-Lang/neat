module neat.hash;

macro import package(compiler).std.macro.once;
macro import package(compiler).std.macro.quasiquoting;

import neat.array;
import neat.base;
import neat.types;
import neat.util;

// fallback for macros
import polyhash;

alias Hash = PolyHash;

(Expression | fail Error) hash(ASTSymbol astValue, Context context, LocRange locRange)
{
    auto value = astValue.compile(context)?.beExpression(locRange)?;
    Parameter[] params = [
        Parameter.simple("value", value.type)];

    bool isHashable = !!value.type.instanceOf(Hashable);
    bool isArray = !!value.type.instanceOf(Array);
    bool isInt = value.type.instanceOf(Integer) || value.type.instanceOf(Long) || value.type.instanceOf(Character);
    bool isFloat = !!value.type.instanceOf(Float);
    if (!isArray && !isInt && !isFloat && !isHashable) {
        return locRange.fail("TODO: __hash() of $(value.type.repr)");
    }
    // TODO proper unsigned types
    ASTSymbol hashfn() {
        if (isArray) {
            auto array = value.type.instanceOf(Array).notNull;
            if (array.elementType.instanceOf(Character)) {
                return context.compiler.$expr ({
                    mut int hash = 0x811c9dc5;
                    for (i in 0 .. value.length / 4) {
                        int value = (cast(int*) value.ptr)[i];
                        hash ^= value;
                        hash *= 0x01000193;
                    }
                    for (i in (value.length / 4) * 4 .. value.length) {
                        hash ^= value.ptr[i];
                        hash *= 0x01000193;
                    }
                    if (hash < 0) hash = -hash;
                    hash;
                });
            }
            return context.compiler.$expr ({
                // fnv hash
                mut int hash = 0x811c9dc5;
                for (auto element in value) {
                    hash ^= __hash(element);
                    hash *= 0x01000193;
                }
                if (hash < 0) hash = -hash;
                hash;
            });
        }
        if (isInt) {
            // knuth hash
            return context.compiler.$expr ({
                mut int hash = value * cast(int) 2654435761;
                if (hash < 0) hash = -hash;
                hash;
            });
        }
        if (isFloat) {
            // knuth hash via bitcast
            return context.compiler.$expr ({
                mut int hash = *cast(int*) &value * cast(int) 2654435761;
                if (hash < 0) hash = -hash;
                hash;
            });
        }
        if (isHashable) {
            return value.type.instanceOf(Hashable)
                .hash(context.compiler, context.compiler.astIdentifier("value", __RANGE__))
                .case(Error err: exitWithError(err));
        }
        locRange.hardCheck(false, "internal error");
    }
    ASTStatement body_() {
        return context.compiler.(
            astExpressionStmt(astReturn(hashfn, __RANGE__), __RANGE__));
    }

    // TODO unsigned
    auto fn = context.compiler.createRuntimeFunction(
        context, "__hash", once new Integer, params, &body_);

    return context.compiler.mkCall(fn, [value], __RANGE__);
}
