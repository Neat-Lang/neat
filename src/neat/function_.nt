module neat.function_;

macro import package(compiler).std.macro.listcomprehension;
macro import package(compiler).std.macro.once;

import backend.base;
import helpers;
import neat.base;
import neat.expr;
import neat.quasiquoting;
import neat.types;
import neat.util;
import polyhash;

class Function : FunctionDeclaration
{
    ASTStatement statement;

    /**
     * If the function has a declared return type, we defer compilation until later.
     * If it has an auto return type, it is compiled on resolution. In this case,
     * the resulting function is stored here.
     */
    mut nullable CompiledFunction compiled;

    mut nullable QuoteScope quoteScope;

    MacroState macroState;

    mut nullable Namespace parent;

    bool hasThisArg;

    LocRange locRange;

    mut string comment; // for docgen

    mut string uniqId; // for nested functions

    mut string mangleCache;

    // This is a method that has a 'super' parameter, meaning a bunch
    // of our parameters (int, __super0 to __super(n-1)), are destined
    // for a super ctor call.
    mut (:none | int) superMagic;

    this(this.name, this.retWIP, this.params, this.statement, this.macroState, this.hasThisArg,
         this.locRange=__CALLER__)
    {
        this.contextType = null;
        this.parent = null;
        this.uniqId = null;
        this.superMagic = :none;
    }

    void resetMangleCache()
    {
        if (this.uniqId == "")
            mangleCache = "$(manglePrefix)_$(mangleSuffix)";
        else mangleCache = "$(manglePrefix)_$(mangleSuffix)_$uniqId";
    }

    override string mangle()
    {
        return mangleCache;
    }

    string manglePrefix()
    {
        return parent.mangle;
    }

    string mangleSuffix()
    {
        // This is all sorts of dirty, but I don't want to give up mangle precaching,
        // and return type mangling isn't all THAT important anyways.
        string retMangle() {
            if (auto ret = this.retWIP) return ret.mangle;
            return "auto";
        }
        auto paramMangle = "$(this.params.length)_"
            ~ [join with "_" param.type.mangle for param in this.params];
        return "$(name)_$(retMangle)_$(paramMangle)";
    }

    override string repr()
    {
        mut string repr = this.name;
        if (auto parentFun = findParent!FunctionScope(this.parent)) {
            return parentFun.repr ~ "." ~ repr;
        }
        if (hasThisArg) {
            repr = this.contextType.repr ~ "::" ~ repr;
        }
        // TODO
        // if (auto mod = this.parent.instanceOf(Module)) repr = mod.name ~ "." ~ repr;
        return repr;
    }

    override void declare(Generator generator)
    {
        string mangle = this.mangle;
        if (generator.mod.declared(mangle)) return;

        Type voidp = once new Pointer(new Void);

        mut auto paramTypes = [param.type.emit(generator.platform) for param in this.params];
        if (this.contextType) {
            paramTypes = [voidp.emit(generator.platform)] ~ paramTypes;
        }

        generator.mod.declare(
            mangle,
            this.ret.emit(generator.platform),
            paramTypes.freeze,
            variadic=false
        );
    }

    CompiledFunction mkCompiledFunction(
        Function fun, Statement compiledStatement, FunctionScope stackframe, Statement[] argAssignments)
    {
        return new CompiledFunction(fun, compiledStatement, stackframe, argAssignments);
    }

    (void | Error) inferReturnType(Context context) {
        auto compiledFun = compile(context)?;
        this.retWIP = compiledFun.stackframe.finalRet;
    }

    (CompiledFunction | Error) compile(Context context)
    {
        if (auto compiledFun = this.compiled) return compiledFun;

        auto compiler = context.compiler;

        auto stackframe = new FunctionScope(
            compiler, this.retWIP, this.contextType, this.parent? else die, this.mangle, this.repr,
            this.locRange);
        auto framePtr = compiler.reference(compiler.stackFrame(new Void));
        auto coldContext = makeColdContext(compiler, context.platform, this.macroState, context.loopPass,
            context.modulePreProcessor, context.modulePostProcessor);
        auto warmContext = new WarmContext(framePtr, frameDepth=0, context.compilingModule, new LabelCounter,
            compiler.uniqCounter, this.quoteScope, errorStack=null);
        auto context = Context(stackframe, warmContext, coldContext);

        mut Namespace scope_ = stackframe;
        mut int extraArgs = 1 if this.contextType else 0;

        auto argAssignments = new Statement mut[](this.params.length + extraArgs + superMagic.case(:none: 0, int: 1));
        mut int assignmentId = 0;

        mut nullable VariableDeclaration thisDecl;
        if (auto contextType = this.contextType) {
            // unnamed variable because of "first field in stackframe is 'this'" logic
            // FIXME if heap allocated, copy, don't borrow! as below!
            // Make sure the type is the right one! No void*!
            thisDecl = new VariableDeclaration(
                scope_, "", context, contextType,
                mut=false, borrowed=true, hidden=true);

            if (this.hasThisArg) stackframe.thisDecl = thisDecl;
            scope_ = thisDecl;

            Type voidpp = once new Pointer(new Pointer(new Void));

            auto firstArg = new ArgExpr(0, voidpp);
            // munge frame pointer for nested functions (TODO represent this by an enum or something)
            int offset = 0 if hasThisArg else 2;
            auto correctedFramePointer = compiler.pointerOffset(firstArg, compiler.intLiteral(offset));
            argAssignments[assignmentId++] = thisDecl.initialize(
                context, new PointerCast(contextType, correctedFramePointer), __RANGE__)?;
        }

        mut auto context = context.withNamespace(scope_);

        for (int i, param in this.params) {
            auto argExpr = new ArgExpr(extraArgs + i, param.type);

            if (param.isThisAssignment) {
                import neat.base : assert;
                this.locRange.assert(!!thisDecl, () => "no this. args outside class")?;
                auto thisVar = thisDecl.access(context);
                auto target = compiler.accessMember(
                        context, thisVar, param.name, this.locRange, false)?
                    .instanceOf(Reference)?
                    else return this.locRange.fail("not a reference: $(param.name)");
                checkAssignmentQuarantine(context, param.locRange, thisVar.type, argExpr.type)?;
                argAssignments[assignmentId++] = compiler.assignStatement(
                    target, argExpr.copy(context, param.locRange)?);
            } else {
                auto argDecl = new VariableDeclaration(
                    scope_, param.name, context, param.type,
                    mut=param.mutable, borrowed=!param.mutable, hidden=false);
                argAssignments[assignmentId++] = argDecl.initialize(context, argExpr, param.locRange)?;
                scope_ = argDecl;
            }
        }

        context = context.withNamespace(scope_);

        // TODO if (int i <- superMagic) {
        superMagic.case {
            :none: {}
            int numParams:
                // TODO propagate loc from "super"
                auto astSuper = compiler.astSuper(__RANGE__);
                auto astArgs = [
                    compiler.astIdentifier("__super$i").instanceOf(ASTSymbol)? else die
                    for i in 0 .. numParams];
                auto astCall = compiler.astCall(astSuper, astArgs);
                auto astCallStmt = compiler.astExpressionStmt(astCall);
                argAssignments[assignmentId++] = astCallStmt.compile(context)?.statement;
        }

        assert(assignmentId == argAssignments.length);

        /**
         * This handles the case of a function with "optional void return", such as `(void | Error)`.
         * Void-returning functions do not require a terminating return. This extends to optional void return
         * functions, but simply emitting "ret;" is a type error.
         * So we need to implicitly convert `void` to the return type.
         */
        ASTStatement funWithVoidReturn() {
            return this.statement;
        }

        auto pair = this.statement.compile(context)?;
        auto pairContext = context.withNamespace(pair.namespace);
        mut auto compiledStatement = compiler.unwindScope(pairContext, stackframe, pair.statement)?;

        if (auto convert = context.compiler.implicitConvertTo(
            context, new VoidExpression, stackframe.finalRet, this.locRange)?)
        {
            import neat.statements : ReturnStatement;
            compiledStatement = context.compiler.sequence(
                compiledStatement,
                new ReturnStatement(convert, this.locRange));
        } else {
            // TODO missing return error here
        }

        this.compiled = mkCompiledFunction(this, compiledStatement, stackframe, argAssignments.freeze);
        return this.compiled? else die;
    }
}

class CompiledFunction : FinishedSymbol
{
    Function fun;

    Statement compiledStatement;

    FunctionScope stackframe;

    Statement[] argAssignments;

    this(this.fun, this.compiledStatement, this.stackframe, this.argAssignments) { }

    override void emit(Generator generator)
    {
        if (!generator.once(this.fun.mangle)) { print("double-emit " ~ this.fun.mangle); assert(false); }
        // print("emit " ~ this.fun.mangle);

        assert(!generator.fun);
        Type voidp = once new Pointer(new Void);

        mut auto paramTypes = [param.type.emit(generator.platform) for param in this.fun.params];
        if (this.fun.contextType)
            paramTypes = [voidp.emit(generator.platform)] ~ paramTypes;
        auto retType = this.fun.ret.emit(generator.platform);

        generator.fun = generator.mod.define(
            this.fun.mangle,
            this.fun.repr,
            retType,
            paramTypes,
            this.fun.locRange.toBackendLoc(generator.fileIdTable)
        );
        this.stackframe.framePlanner.setupStackframe(generator);

        [assignment.emit(generator) for assignment in this.argAssignments];
        this.compiledStatement.emit(generator);

        // TODO crash unless ret is void
        generator.fun.ret(generator.fun.zeroLiteral(retType));
        generator.fun.done;
        generator.fun = null;
        generator.frameReg = -1;
    }

    override void hash(Hash hash) {
        hash.adds("fndef");
        hash.adds(fun.mangle);
        fun.ret.hash(hash);
        if (fun.contextType) fun.contextType.hash(hash);
        else hash.adds("null");
        hash.addl(fun.params.length);
        [({ hash.adds(param.name); param.type.hash(hash); }) for param in fun.params];
        this.compiledStatement.hash(hash);
    }
}

/**
 * We want to only allocate a struct stackframe if we actually intend to
 * treat the stackframe as a struct, ie. pass a pointer to it to a nested
 * function. Otherwise we'd much prefer separate allocas per variable.
 * This class captures the lexical tree of variables. `captured` is set
 * if a language element needs a continuous stackframe at the lexical scope
 * of the variable. Any variables that are not captured when the function
 * is emitted will be separately allocaed.
 */
class StackframePlanner
{
    mut (Type[] frame, (int | :none) parentId, int uniqueId, bool captured) mut[] variables;

    mut int maxSize;

    mut int maxAlignment;

    this() {
        this.maxSize = 0;
        this.maxAlignment = 1;
    }

    int add(Type type, (int | :none) parentId, int uniqueId) {
        Type[] frame = parentId.case(int id: variables[id].frame, :none: null) ~ type;
        variables ~= (frame, parentId=parentId, uniqueId=uniqueId, captures=false);
        return cast(int) variables.length - 1;
    }

    Type spacerType(Platform platform, bool capture) {
        if (capture && !this.variables.empty) {
            this.capture(cast(int) this.variables.length - 1, platform);
        }
        return new StackframeSpacer(maxSize, maxAlignment);
    }

    private void capture(int id, Platform platform) {
        int max(int a, int b) => a if a > b else b;
        mut int id = id;
        auto frameType = new BackendStructType([type.emit(platform) for type in variables[id].frame], internal=true);
        this.maxSize = this.maxSize.max(frameType.size);
        this.maxAlignment = this.maxAlignment.max(frameType.alignment);
        while (!variables[id].captured) {
            with (variables[id]) {
                // FIXME this should not compile if variables[id] is not mutable!
                captured = true;
                id = parentId.case(:none: break);
            }
        }
    }

    void setupStackframe(Generator output) {
        output.frameReg = output.fun.staticAlloca(new BackendSpacerType(maxSize, maxAlignment));
        for (var in variables) {
            if (var.captured) continue;
            // uncaptured variable, generate alloca
            auto alloca = output.fun.staticAlloca(var.frame[$ - 1].emit(output.platform));
            output.fun.setNumberedReg(var.uniqueId, alloca);
        }
    }

    int fieldPtr(Expression framePointer, int frameDepth, int varId, Generator output) {
        auto var = this.variables[varId];
        if (var.captured) {
            auto frameType = new BackendStructType([type.emit(output.platform) for type in var.frame], internal=true);
            int structPtrReg = framePointer.emit(output);
            return output.fun.fieldOffset(frameType, structPtrReg, cast(int) var.frame.length - 1);
        } else {
            // else why isn't it captured? how are you
            // accessing it without having captured it?
            if (frameDepth > 0) {
                print("we are trying to access at depth $frameDepth, an uncaptured variable");
                print("(of type $(var.frame[$ - 1].repr), varId $varId) in planner $(this.ptrId)");
                print("why hasn't it been pinned? btw we are $(output.fun.name)");
                assert(false);
            }
            // return that variable's individual alloca
            return output.fun.getNumberedReg(var.uniqueId);
        }
    }
}

class FunctionScope : Namespace, Returnable, Declarable
{
    CompilerBase compiler;

    mut nullable Type ret;

    nullable Type extra;

    string mangle_;

    string repr_;

    LocRange locRange;

    mut nullable VariableDeclaration thisDecl;

    StackframePlanner framePlanner;

    this(this.compiler, this.ret, this.extra, this.parent, this.mangle_, this.repr_, this.locRange=__CALLER__) {
        this.isContextScope = true;
        this.framePlanner = new StackframePlanner;
    }

    Type finalRet() {
        if (!ret) ret = new Void;
        return ret? else die;
    }

    override LatentVariable declare(
        Context context, string name, Type type, bool mut, bool borrowed, (int | :none) parentId)
    {
        // borrowed == "no cleanup on scope exit".
        // This is not safe in conjunction with mut (cleanup on reassign).
        assert(!borrowed || !mut);

        int varId = this.framePlanner.add(type, parentId, uniqueId=context.getUniqueId);
        return new LatentVariableImpl(name, type_=type, this.framePlanner,
            mut=mut, borrowed=borrowed, varId);
    }

    override string mangle() { return this.mangle_; }

    override string repr() => repr_;

    /**
     * Note:
     * We can't use TypeMerger here, because whichever type we use first, we have to stick with.
     */
    override (Type | Error) mergeReturn(Context context, Expression retExpr, LocRange locRange) {
        if (!this.ret) this.ret = retExpr.type;
        auto retType = this.ret? else die;
        if (context.compiler.implicitConvertTo(context, retExpr, retType, locRange)?)
            return retType;
        return locRange.fail("cannot return $(retExpr.type.repr): clashes with existing type $(this.ret.repr)");
    }

    override (nullable Symbol | Error) lookup(
        string name, Context context, LookupReason reason, LocRange locRange)
    {
        assert(!!this.parent);

        if (name == "this" && thisDecl) {
            auto thisExpr = thisDecl.access(context);
            if (thisExpr.type.instanceOf(Pointer)) {
                return context.compiler.dereference(thisExpr);
            } else {
                return thisExpr;
            }
        }

        mut nullable Expression nextFramePointer = null;
        if (this.extra && context.framePointer) {
            // first variable is always parent
            auto voidpp = once new Pointer(new Void);
            nextFramePointer = new FieldRef(
                voidpp, this.framePlanner,
                context.framePointer? else die,
                context.frameDepth.case(:none: die),
                varId=0, mutable=false, info=ExprInfo(Lifetime.lexical));
        }
        auto nextContext = context.withFramePointer(nextFramePointer, context.frameDepth.case(int i: i + 1));

        return this.parent.lookup(name, nextContext, reason, locRange);
    }
}

class StackframeSpacer : Type
{
    int size, alignment;

    BackendType type;

    this(this.size, this.alignment) {
        this.type = new BackendSpacerType(size, alignment);
        this.zeroInitializable = true;
    }

    override BackendType emit(Platform platform) { return this.type; }

    override bool same(Type other) {
        if (auto otherSpacer = other.instanceOf(StackframeSpacer))
            return size == otherSpacer.size && alignment == otherSpacer.alignment;
        return false;
    }

    override string repr() => "stackframe($type)";

    override string mangle() => "spacer_$(size)_$(alignment)";

    override void hash(Hash hash) { hash.adds("spacer"); hash.addl(size); hash.addl(alignment); }
}


/**
 * Used to allow referencing the types of parameters from the return type,
 * for instance in typeof().
 */
class ReturnTypeNamespace : Namespace
{
    Parameter[] params;

    this(this.parent, this.params) { }

    override (nullable Symbol | Error) lookup(
        string name, Context context, LookupReason reason, LocRange locRange)
    {
        for (param in this.params) {
            if (param.name == name) {
                return new NullExpr(param.type);
            }
        }
        if (this.parent) return this.parent.lookup(name, context, reason, locRange);
        return null;
    }

    override string repr() => "ReturnTypeNamespace";
}

class LatentVariableImpl : LatentVariable
{
    string name;

    Type type_;

    StackframePlanner framePlanner;

    bool mut;

    bool borrowed;

    ExprInfo info;

    this(this.name, this.type_, this.framePlanner, this.mut, this.borrowed, super) {
        assert (!mut || !borrowed);
        if (mut) this.info = ExprInfo(Lifetime.ephemeral);
        else this.info = ExprInfo(Lifetime.lexical);
    }

    override Type type() => this.type_;

    override Reference access(Context context)
    {
        return new FieldRef(
            type_, framePlanner,
            context.framePointer? else die,
            context.frameDepth.case(:none: die),
            varId=id, mut, info);
    }
}

// Simple reference expression that just accesses a field on a pointer.
// Used for accessing variables in a stackframe.
class FieldRef : Reference
{
    Expression framePointer;

    int frameDepth;

    StackframePlanner framePlanner;

    int varId;

    this(this.type, this.framePlanner, this.framePointer, this.frameDepth, this.varId, this.mutable, this.info) {}

    override int emit(Generator output) {
        int locReg = emitLocation(output);
        return output.fun.load(this.type.emit(output.platform), locReg);
    }

    override int emitLocation(Generator output) {
        int fieldReg = framePlanner.fieldPtr(framePointer, frameDepth, varId, output);
        // immutable, meaning the value will never be muted.
        if (!mutable) output.fun.markPointerInvariant(fieldReg);
        return fieldReg;
    }

    override void hash(Hash hash) { hash.adds("FieldRef"); framePointer.hash(hash); hash.addl(varId); }
    override string repr() { return "FieldRef(@varId) on $(framePointer.repr)"; }
}

class VariableDeclaration : DeclarationHolder
{
    string name;

    LatentVariable variable;

    bool hidden;

    bool borrowed;

    /**
     * `mut` variables cannot be modified after the initial assignment.
     * So while we still need to write them to the stackframe for nested function access,
     * if we're doing a direct read in the same stackframe, we can just basically load once,
     * and then return the same SSA reg again and again, making it a lot easier on the optimizer.
     */
    mut nullable PairedTemporaryExpr initialCache;

    this(this.parent, this.name, Context context, Type type, bool mut, this.borrowed, this.hidden) {
        (int | :none) parentId() {
            mut Namespace current = parent? else die;
            while (!current.instanceOf(Declarable)) {
                if (auto vd = current.instanceOf(VariableDeclaration)) {
                    return vd.variable.id;
                }
                current = current.parent? else die;
            }
            return :none;
        }
        this.variable = this.findParent!Declarable?
            .declare(context, name, type, mut=mut, borrowed=borrowed, parentId)
            else die;
        this.isContextScope = true;
        this.initialCache = null;
    }

    override bool freeOnExit() {
        return !borrowed;
    }

    (Statement | Error) initialize(Context context, Expression initial, LocRange locRange) {
        bool canTakeInitialRef = initial.info.lifetime.(that == Lifetime.gifted || that == Lifetime.none);
        Expression initial = initial if (this.borrowed || canTakeInitialRef) else initial.copy(context, locRange)?;
        {
            auto initializeStmt = context.compiler.assignStatement(accessDecl(context), initial);
            auto variable = this.variable.instanceOf(LatentVariableImpl)? else return initializeStmt;
            if (variable.mut) return initializeStmt;
        }

        // the variable won't ever change, so cache the initial value and reuse it later.
        auto initialCache = new PairedTemporaryExpr(
            variable.type, Lifetime.lexical, context.getUniqueId);
        this.initialCache = initialCache;
        auto initTemp = new InitializeTemporaryExprStatement(initialCache, initial);
        auto initFromTemp = context.compiler.assignStatement(accessDecl(context), initialCache);
        return context.compiler.sequence(initTemp, initFromTemp);
    }

    override Reference accessDecl(Context context) {
        return this.variable.access(context);
    }

    override Expression access(Context context) {
        auto variable = this.variable.instanceOf(LatentVariableImpl)?
            else return accessDecl(context);
        if (variable.mut || context.frameDepth != 0 || !this.initialCache)
            return accessDecl(context);
        return this.initialCache? else die;
    }

    override (nullable Symbol | Error) lookup(
        string name, Context context, LookupReason reason, LocRange locRange)
    {
        // Frame may be null for struct nested in function.
        if (auto frame = context.framePointer) {
            if (this.name == name) {
                return access(context);
            }
            // soft destructuring
            if (!hidden && this.name == "") {
                auto unnamedVar = this.variable.access(context);
                auto target = context.compiler.accessMember(
                        context, unnamedVar, name, locRange, true)?;
                if (target) return target;
            }
        }
        if (this.parent) return this.parent.lookup(name, context, reason, locRange);
        return null;
    }
    override string repr() => "VariableDeclaration($name) > $(parent.repr)";
}

class StackFrame : Reference
{
    Type targetType;

    // why not mutable? Variable access will override the reference - at that point, mut should be enabled as required.
    // If you somehow manage to get a raw reference to this class, by no means should you be able to write it!
    this(this.targetType) {
        this.type = this.targetType;
        this.mutable = false;
        this.info = ExprInfo(Lifetime.permanent);
    }

    override int emit(Generator generator)
    {
        assert(false);
    }

    override int emitLocation(Generator generator)
    {
        return generator.frameReg;
    }

    override void hash(Hash hash) { hash.adds("StackFrame"); targetType.hash(hash); }

    override string repr() { return "__frame"; }
}

class ArgExpr : Expression
{
    int index;

    this(this.index, this.type) { this.info = ExprInfo(Lifetime.lexical); }

    override int emit(Generator output)
    {
        return output.fun.arg(this.index);
    }

    override void hash(Hash hash) { hash.adds("ArgExpr"); hash.addl(index); }

    override string repr() return "%arg$index";
}

class FunctionReference : FunctionReferenceBase
{
    FunctionDeclarationBase fun;

    this(this.fun) {
        mut auto params = this.fun.params;
        if (this.fun.contextType) params = [Parameter.fromType(once new Pointer(new Void))] ~ params;

        this.type = new FunctionPointer(this.fun.ret, params);
        this.info = ExprInfo(Lifetime.permanent);
    }

    override FunctionDeclarationBase getFunction() { return fun; }

    override int emit(Generator output)
    {
        this.fun.declare(output);

        return output.fun.getFuncPtr(this.type.emit(output.platform), this.fun.mangle);
    }

    override void hash(Hash hash) { hash.adds("FunctionReference"); hash.adds(fun.mangle); }
    override string repr() return "&$(fun.mangle)";
}

class NestedFunction : LateSymbol
{
    Function fun;

    Expression baseExpr;

    this(this.fun, this.baseExpr) {
        // becomes true in 'new &bla' formalism (TODO parameter?)
        this.refcounted = false;
    }

    override LateSymbolResult resolve(Context context) {
        // no need for setup/teardown here - nested functions can't depend on complex expressions.
        auto funcPtr = new FunctionReference(this.fun);
        auto voidpp = once new Pointer(new Pointer(new Void));
        auto firstArg = new PointerCast(voidpp, baseExpr);
        // nested function context pointer is at -2w offset to create abi compatibility between
        // class method and nested function references.
        int offset = -2;
        auto mungedFirstArg = context.compiler.(pointerOffset(firstArg, intLiteral(offset)));

        return LateSymbolResult(setup=null, funcPtr=funcPtr, firstArg=mungedFirstArg, teardown=null);
    }
    override string repr() return "TODO NestedFunction";
}

class LatentNestedFunction : LatentSymbol
{
    Function fun;

    this(this.fun) { }

    override (Symbol | Error) resolve(nullable Expression framePointer, (int | :none) frameDepth, LocRange locRange) {
        if (auto framePointer = framePointer) {
            return new NestedFunction(this.fun, framePointer);
        } else {
            return locRange.fail("Internal error: frame pointer missing when resolving nested function");
        }
    }
    override string repr() return "TODO LatentNestedFunction";
    override bool mayCallImplicit() => fun.mayCallImplicit;
}

/**
 * When used as the default value in an argument list, will be resolved to the LocRange of the caller.
 */
class ASTCallerExpr : ASTSymbol
{
    override (Symbol | Error) compile(Context context) {
        return context.fail(this.locRange, "__CALLER__ can only used as default parameter");
    }
    override string repr() => "__CALLER__";
}

(Parameter | Error) compile(ASTParameter param, Context context) {
    auto type = param.type.compile(context)?.beType(param.locRange)?;

    if (param.defaultValue?.instanceOf(ASTCallerExpr)) {
        return Parameter(isThisAssignment=false, param.name, param.mutable, type=type, defaultValue=:callerRange,
            param.locRange);
    }

    (nullable Expression | Error) defaultValue(ASTParameter param, Type type) {
        if (!param.defaultValue) return null;
        auto context = context.withNamespace(findParent!ModuleBase(context.namespace));
        return param.defaultValue
            .compile(context)?
            .beExpressionImplCall(context, param.locRange)?
            .expectImplicitConvertTo(type, context, param.locRange)?;
    }
    auto defaultValue = defaultValue(param, type)?;
    return Parameter(isThisAssignment=false, param.name, param.mutable, type=type, defaultValue=defaultValue,
        param.locRange);
}

(Parameter | Error) compile(ASTThisAssignment param, Type type, Context context) {
    if (param.defaultValue?.instanceOf(ASTCallerExpr)) {
        return Parameter(isThisAssignment=true, param.name, mutable=false, type=type, defaultValue=:callerRange,
            param.locRange);
    }

    (nullable Expression | Error) defaultValue() {
        if (!param.defaultValue) return null;
        return param.defaultValue.compile(context)?
            .beExpressionImplCall(context, param.locRange)?
            .expectImplicitConvertTo(type, context, param.locRange)?;
    }
    return Parameter(isThisAssignment=true, param.name, mutable=false, type=type, defaultValue=defaultValue?,
        param.locRange);
}

class ASTFunction : ASTSymbolDeclaration
{
    (ASTSymbol | :auto_) ret;

    ASTParameter[] params;

    bool isDeclaration;

    ASTStatement statement;

    MacroState macroState;

    // for docgen
    string comment;

    this(this.name, this.ret, this.params, this.isDeclaration, this.locRange, this.statement,
         this.macroState, this.comment) { }

    override (Symbol | Error) compileSymbol(Context context)
    {
        // FIXME parameter mangling
        // TODO: Why are these in a separate paramContext? What breaks if we remove this?
        // TODO: Why can't IdCounter be global? Why do we need more than one?
        // TODO: I think we just need a dedicated id counter for "label that is never backend emitted".
        auto name = this.name.name(context.warmContext);
        auto paramContext = context.withLabelPrefix(
            "$(context.namespace.mangle)_$(this.name)");
        auto params = [.compile(param, paramContext)? for param in this.params];

        // It's nice to be able to reference the function
        // parameters in a typeof() in the return type.
        auto returnTypeNamespace = new ReturnTypeNamespace(context.namespace, params);
        auto returnTypeContext = context.withNamespace(returnTypeNamespace);

        if (this.isDeclaration)
        {
            (ASTSymbol | Error) ret() {
                this.ret.case {
                    ASTSymbol sym: return sym;
                    :auto_: return this.locRange.fail("Cannot use 'auto' return type for function declaration");
                }
            }
            auto ret = ret?;
            return new FunctionDeclaration(
                name, ret.compile(returnTypeContext)?.beType(ret.locRange)?, params);
        }

        // FIXME: nullptr_t
        // this.ret.case(Type type: type, :auto_: null);
        (nullable Type | Error) ret() {
            this.ret.case {
                ASTSymbol ret: return ret.compile(returnTypeContext)?.beType(ret.locRange)?;
                :auto_: return null;
            }
        }
        auto fun = new Function(
            name,
            ret?,
            params,
            this.statement, this.macroState, hasThisArg=false, this.locRange);

        fun.comment = this.comment;
        fun.quoteScope = context.quoteScope;

        (void | Error) inferReturnType() {
            this.ret.case {
                ASTSymbol ret: {}
                :auto_: fun.inferReturnType(context)?;
            }
        }

        if (auto functionScope = findParent!FunctionScope(context.namespace)) {
            auto spacerType = functionScope.framePlanner.spacerType(context.platform, capture=true);
            auto voidp = once new Pointer(new Void);
            auto latent = new LatentNestedFunction(fun);

            fun.contextType = new Pointer(spacerType);
            fun.uniqId = context.getLabel;

            /**
             * Dirty hack: this is not the final `fun.parent`.
             * To enable mutual recursion, fun.parent is patched again in ASTNestedFunctionDeclStatement
             * with a namespace that contains every function in a cluster.
             * We already set it here so that `inferReturnType` can do a sensible compile in the
             * auto return case. Auto return functions don't cluster anyways.
             */
            fun.parent = context.namespace;
            fun.resetMangleCache;
            inferReturnType?;

            context.compilingModule.track(fun);

            return latent;
        }

        fun.parent = context.namespace;
        fun.resetMangleCache;
        inferReturnType?;
        return fun;
    }

    override string repr() { return "ASTFunction($ret $name($params))"; }
}

(nullable ASTDeclaration | Error) parseFunction(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    auto comment = parser.parseLastComment;
    auto from = parser.from;
    mut uninitialized (ASTSymbol | :auto_) ret;
    if (parser.acceptIdentifier("auto")) {
        ret = :auto_;
    } else if (auto retType = lexicalContext.compiler.parseType(parser, lexicalContext)?) {
        ret = retType;
    } else {
        parser.revert;
        return null;
    }
    auto name = parser.parseIdentifierSymbol(lexicalContext)?;
    auto locRange = parser.to(from);
    auto name = name? else ({ parser.revert; return null; });
    if (name.reserved) {
        parser.revert;
        return null;
    }
    (nullable ASTSymbolDeclaration | Error) parseRest() {
        if (!parser.acceptToken(TokenType.lparen))
            return null;
        auto params = parseParameterList(parser, lexicalContext, variadic=false, thisAssignment=false)?;
        assert(!params.variadic);
        ASTParameter pick((ASTParameter | ASTThisAssignment) value) {
            value.case {
                ASTParameter p: return p;
                ASTThisAssignment a: assert(false);
            }
        }
        auto params = [pick(entry) for entry in params.params];
        ASTStatement stmt = lexicalContext.compiler.parseFunctionBody(parser, lexicalContext)?;
        return new ASTFunction(
            name, ret, params, isDeclaration=false, locRange, stmt,
            lexicalContext.macroState, comment);
    }
    if (auto ret = lexicalContext.compiler.parseTemplateStub(parser, lexicalContext, name, comment, &parseRest)?) {
        parser.commit;
        return ret;
    }
    if (auto ret = parseRest?) {
        parser.commit;
        return ret;
    }
    parser.revert;
    if (auto quote = name.instanceOf(ASTIdentifierQuote)) {
        lexicalContext.revertQuoteToken(quote.token, QuoteTokenCategory.identifier);
    }
    return null;
}

((ASTParameter | ASTThisAssignment)[] params, bool variadic | Error) parseParameterList(
    Parser parser, LexicalContext lexicalContext, bool variadic, bool thisAssignment)
{
    mut (ASTParameter | ASTThisAssignment)[] params;
    mut bool haveVariadic = false;
    mut bool hadDefaultValue = false;
    (nullable ASTSymbol | Error) parseDefaultValue() {
        mut nullable ASTSymbol defaultValue;
        if (parser.acceptToken(TokenType.equal)) {
            auto defaultValue = lexicalContext.compiler.parseExpression(parser, lexicalContext)?;
            if (!defaultValue) return parser.fail("default parameter value expected");
            hadDefaultValue = true;
            return defaultValue;
        } else if (hadDefaultValue) {
            return parser.fail("only default parameters allowed after default parameter");
        }
        return null;
    }
    while (!parser.acceptToken(TokenType.rparen)) {
        if (params.length > 0) {
            if (!parser.acceptToken(TokenType.comma)) {
                return parser.fail("',' or ')' expected");
            }
        }
        // foo(int a, )
        if (parser.acceptToken(TokenType.rparen)) break;

        auto from = parser.from;
        if (variadic) {
            parser.begin;
            if (parser.acceptToken3(TokenType.dot, TokenType.dot, TokenType.dot)
                && parser.acceptToken(TokenType.rparen)) {
                parser.commit;
                haveVariadic = true;
                break;
            }
            parser.revert;
        }
        if (thisAssignment && parser.acceptIdentifier("this") && parser.acceptToken(TokenType.dot))
        {
            string paramName = parser.parseIdentifier;
            auto defaultValue = parseDefaultValue?;
            params ~= ASTThisAssignment(paramName, defaultValue, parser.to(from));
            continue;
        }
        mut bool mutable;
        if (parser.acceptIdentifier("mut")) mutable = true;
        ASTSymbol argtype = lexicalContext.compiler.parseType(parser, lexicalContext)??
            else return parser.fail("parameter type expected");
        string paramName = parser.parseIdentifier;
        // parser.assert_(paramName.length > 0, "parameter name expected")?;
        auto defaultValue = parseDefaultValue?;

        params ~= ASTParameter(
            name=paramName,
            mutable,
            type=argtype,
            defaultValue=defaultValue,
            parser.to(from));
    }
    return (params, haveVariadic);
}
