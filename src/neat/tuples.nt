module neat.tuples;

macro import std.macro.listcomprehension;
macro import std.macro.quasiquoting;

import backend.base;
import helpers;
import neat.base;
import neat.expr;
import neat.hash;
import neat.util;

(Expression | fail Error) makeTuple(Context context, LocRange locRange, TupleType type, Expression[] fields) {
    assert(type.members.length == fields.length);

    auto newFields = [expr.take(context)? for expr in fields];
    return new TupleLiteral(type, ExprInfo(Lifetime.gifted), newFields);
}

class ASTTupleExpr : ASTSymbol
{
    (string name, ASTSymbol symbol)[] members;

    this(this.members, this.locRange) { }

    override (Expression | fail Error) compile(Context context) {
        (string name, Expression expr)[] fields = [
            (
                member.name,
                member.symbol.compile(context)?.beExpressionImplCall(context, member.symbol.locRange)?
            )
            for member in members];
        auto type = new TupleType([(member.name, member.expr.type) for member in fields]);

        return makeTuple(context, this.locRange, type, [field.expr for field in fields]);
    }

    override ASTSymbol quote(Quoter quoter) {
        ASTSymbol quote((string name, ASTSymbol sym) pair) {
            return quoter.compiler.astTupleLiteral([
                quoter.compiler.astStringLiteral(pair.name, __RANGE__),
                pair.sym.quote(quoter)], __RANGE__);
        }
        auto members = [quote(a) for a in this.members];
        return quoter.compilerCall("astTupleLiteral2", [
            quoter.compiler.astArrayLiteral(members, this.locRange),
        ], this.locRange);
    }
}

(nullable ASTSymbol | fail Error) parseTupleExpression(Parser parser, LexicalContext lexicalContext)
{
    parser.begin;
    auto from = parser.from?;
    if (!parser.accept("(")?) {
        parser.revert;
        return null;
    }
    if (auto tupleRet = parseTupleBody(parser, lexicalContext, allowOneSized=false, from)?) {
        parser.commit;
        return tupleRet;
    }
    parser.revert;
    return null;
}

(nullable ASTSymbol | fail Error) parseTupleBody(
    Parser parser, LexicalContext lexicalContext, bool allowOneSized, LocRange from)
{
    parser.begin;
    mut (string name, ASTSymbol symbol)[] members;
    while (!parser.accept(")")?)
    {
        auto memberFrom = parser.from?;
        if (members.length && !parser.accept(",")?) {
            // be a bit lenient for (bla bla)
            if (members.length == 1 && !allowOneSized) {
                parser.revert;
                return null;
            }
            return parser.to(memberFrom).fail("tuple: ',' expected");
        }
        if (mut auto member = lexicalContext.compiler.parseExpression(parser, lexicalContext)?) {
            mut string name = "";
            if (auto memberIdent = member.instanceOf(ASTIdentifier)) {
                if (!memberIdent.moduleLevel && parser.accept("=")?) {
                    name = memberIdent.name;
                    auto member_ = lexicalContext.compiler.parseExpression(parser, lexicalContext)?;
                    if (!member_)
                        return parser.to(memberFrom).fail("tuple: member expected");
                    member = member_.notNull;
                }
            }
            members ~= (name, member);
        } else {
            // (bla bla) still
            if (members.length <= 1) {
                parser.revert;
                return null;
            }
            return parser.to(memberFrom).fail("tuple: member expected");
        }
    }
    // (bla) is not a tuple, it's a paren expression
    if (members.length == 1) {
        if (allowOneSized && members[0].name.empty) {
            parser.commit;
            return members[0].symbol;
        } else {
            parser.revert;
            return null;
        }
    }
    parser.commit;
    return new ASTTupleExpr(members, parser.to(from));
}

class TupleMemberExpr : Expression
{
    LocRange locRange;

    Expression tuple;

    int index;

    this(this.locRange, this.tuple, this.index) {
        if (auto tuple = this.tuple.type.instanceOf(TupleType)) {
            // FIXME check in caller
            this.locRange.hardCheck(this.index >= 0 && this.index < tuple.members.length, "tuple index out of range");
            this.type = tuple.members[index].type;
        } else {
            // This should never happen!
            // TODO index overload on types
            this.locRange.hardCheck(false, "tuple index on non-tuple type");
        }
        this.info = this.tuple.info;
    }

    override int emit(Generator output) {
        // TODO free unused fields
        auto tuple = this.tuple.emit(output);
        return output.fun.field(this.tuple.type.emit(output.platform), tuple, index);
    }
    override void hash(Hash hash) {
        hash.adds("tuple_member");
        hash.addl(index);
        tuple.hash(hash);
    }
    override string repr() return "$(tuple.repr)[$index]";
}

// TODO merge with TupleMemberExpression somehow... mixin? static if (is(T == Reference))?
class TupleMemberRef : Reference
{
    LocRange locRange;

    Reference tuple;

    int index;

    this(this.locRange, this.tuple, this.index) {
        // FIXME we should check this earlier
        if (auto tuple = this.tuple.type.instanceOf(TupleType)) {
            this.locRange.hardCheck(this.index >= 0 && this.index < tuple.members.length, "tuple index out of range");
            this.type = tuple.members[index].type;
        } else {
            // This should never happen!
            // TODO index overload on types
            this.locRange.hardCheck(false, "tuple index on non-tuple type");
        }
        this.mutable = this.tuple.mutable;
        this.info = this.tuple.info;
    }

    override int emit(Generator output) {
        // TODO free unused fields
        auto tuple = this.tuple.emit(output);
        return output.fun.field(this.tuple.type.emit(output.platform), tuple, index);
    }
    override int emitLocation(Generator output) {
        auto tupleLocation = this.tuple.instanceOf(Reference).emitLocation(output);
        return output.fun.fieldOffset(this.tuple.type.emit(output.platform), tupleLocation, index);
    }
    override void hash(Hash hash) {
        hash.adds("tuple_member_ref");
        hash.addl(index);
        tuple.hash(hash);
    }
    override string repr() return "$(tuple.repr)[$index]";
}

class TupleType : Type
{
    (string name, Type type)[] members;

    this(this.members) {
        this.zeroInitializable = [
            all a.type.zeroInitializable for a in this.members];
        this.hasElaborateCopyConstructor = [
            any a.type.hasElaborateCopyConstructor for a in this.members];
    }

    override BackendType emit(Platform platform) {
        return new BackendStructType([member.type.emit(platform) for member in members]);
    }

    override bool same(Type type) {
        if (auto other = type.instanceOf(TupleType)) {
            return other.members.length == members.length && [
                all member.type.same(other.members[i].type) && member.name == other.members[i].name
                for i, member in members
            ];
        }
        return false;
    }

    override string repr() {
        string memberStr((string name, Type type) member) {
            if (member.name == "") return member.type.repr;
            return "$(member.type.repr) $(member.name)";
        }
        return "(" ~ [join with ", " member.memberStr for member in members] ~ ")";
    }

    override string mangle() {
        return "tuple_" ~ [join with "_" "$(member.name)_$(member.type.mangle)" for member in members];
    }

    override (nullable Symbol | fail Error) accessMember(
        Context context, nullable Expression base, string field, Protection _, LocRange locRange)
    {
        if (!base) return null;
        auto base = base.notNull;
        int index = [first cast(int) i for i, member in members where member.name == field else -1];
        // TODO return (Symbol | LookupError);
        if (index == -1) return null;
        // locRange.assert2(index != -1, "no such tuple field: " ~ field);
        if (auto ref_ = base.instanceOf(Reference)) {
            return new TupleMemberRef(locRange, ref_, index);
        }
        return new TupleMemberExpr(locRange, base, index);
    }

    // basically just like struct
    override (Expression | fail Error) copy(Context context, Expression source) {
        if (!hasElaborateCopyConstructor)
            return source;

        (nullable Expression | fail Error) do_(Expression source) {
            mut Expression[] exprs;
            for (int i, member in members) {
                auto sourceField = new TupleMemberExpr(__RANGE__, source, i);
                exprs ~= .copy(sourceField, context)?;
            }
            return new TupleLiteral(this, ExprInfo(Lifetime.gifted), exprs);
        }
        return context.compiler.exprWithTemporaryExpr(context.getLabel, source, &do_)?.notNull;
    }

    // also like struct
    override nullable Statement endLifetime(Context context, Expression expr)
    {
        auto compiler = context.compiler;

        (nullable Statement | fail Error) do_(Expression expr) {
            auto expr = new OverrideLifetimeExpr(expr, ExprInfo(Lifetime.none));
            auto context = context.withNamespace(
                compiler.exprAlias(context.namespace, "expr", expr));

            mut ASTStatement[] destructors;
            for (i in 0 .. members.length) {
                auto member = new TupleMemberExpr(__RANGE__, expr, cast(int) i);
                auto destroy = members[i].type.endLifetime(context, member);
                auto index = compiler.astIntLiteral(cast(int) i, __RANGE__);
                if (destroy) {
                    destructors ~= compiler.$stmt __destroy(expr[$index]);;
                }
            }
            if (!destructors.length) return null;
            ASTStatement body_ = compiler.astSequence(destructors, __RANGE__);

            return body_.compile(context)?.statement;
        }
        compiler.stmtWithTemporaryExpr(context.getLabel, expr, &do_).case {
            nullable Statement stmt: return stmt;
            Error err: assert(false);
        }
    }

    override nullable Expression implicitConvertTo(Context context, Expression source, Type target)
    {
        auto tupleTargetType = target.instanceOf(TupleType);
        if (!tupleTargetType || tupleTargetType.members.length != members.length)
            return null;
        auto tupleTargetType = tupleTargetType.notNull;

        // FIXME check target tuple names here, like in triviallyConvertsTo
        (nullable Expression | fail Error) do_(Expression source) {
            auto sourceMembers = [new TupleMemberExpr(__RANGE__, source, cast(int) i) for i, _ in members];
            auto convFields = [
                context.compiler.implicitConvertTo(context, member, tupleTargetType.members[i].type)
                for i, member in sourceMembers];

            if ([any !a for a in convFields]) return null;

            return makeTuple(
                context, __RANGE__, tupleTargetType, [a.notNull for a in convFields]);
        }
        context.compiler.exprWithTemporaryExpr(context.getLabel, source, &do_).case {
            nullable Expression ex: return ex;
            Error err: assert(false);
        }
    }

    // Tuple trivially converts to tuple if all the fields are the same type
    // and either have the same name or the first tuple field has no name.
    override bool triviallyConvertsTo(Type target)
    {
        auto tupleTargetType = target.instanceOf(TupleType);
        if (!tupleTargetType || tupleTargetType.members.length != members.length)
            return false;
        bool trivial((string name, Type type) first, (string name, Type type) second)
        {
            if (!first.type.triviallyConvertsTo(second.type)) return false;
            return first.name == second.name || first.name.empty;
        }
        return [all trivial(members[i], tupleTargetType.members[i]) for i in 0 .. members.length];
    }

    override (nullable Expression | fail Error) index(
        Context context, Expression base, Expression index, LocRange locRange)
    {
        // TODO refcounting
        auto indexExpr = index.instanceOf(IntLiteral);
        locRange.assert(!!indexExpr, "int literal expected for tuple access")?;
        return new TupleMemberExpr(locRange, base, indexExpr.value);
    }

    override (nullable Expression | fail Error) binaryOp(
        Context context, string op, Expression lhs, Expression rhs, LocRange locRange)
    {
        if (op == "==") {
            mut auto rhs = rhs;
            if (auto converted = context.compiler.implicitConvertTo(context, rhs, lhs.type)) {
                rhs = converted;
            } else {
                return null;
            }
            (nullable Expression | fail Error) do1(Expression lhs) {
                (nullable Expression | fail Error) do2(Expression rhs) {
                    mut auto result = context.compiler.boolLiteral(true);
                    for (i, member in members) {
                        auto lhsMember = new TupleMemberExpr(locRange, lhs, cast(int) i);
                        auto rhsMember = new TupleMemberExpr(locRange, rhs, cast(int) i);
                        // FIXME overload in expr or Compiler instead of laundering through ASTBinaryOp
                        auto memberEq = context.compiler.astBinaryOp(
                            "==",
                            new ASTSymbolHelper(lhsMember),
                            new ASTSymbolHelper(rhsMember), __RANGE__);
                        result = context.compiler.astBinaryOp(
                            "&&",
                            new ASTSymbolHelper(result),
                            memberEq, __RANGE__).compile(context)?.beExpression(__RANGE__)?;
                    }

                    return result;
                }
                return context.compiler.exprWithTemporaryExpr(context.getLabel, rhs, &do2);
            }
            return context.compiler.exprWithTemporaryExpr(context.getLabel, lhs, &do1);
        }
        return null;
    }

    override void hash(Hash hash) {
        hash.adds("tuple");
        hash.addl(this.members.length);
        [member.type.hash(hash) for member in this.members];
    }
}

class TupleLiteral : Expression
{
    Expression[] members;

    this(this.type, this.info, this.members) {
        auto tuple = this.type.instanceOf(TupleType).notNull;
        assert(this.members.length == tuple.members.length);
    }

    override int emit(Generator output) {
        auto type = this.type.emit(output.platform);
        return output.fun.structLiteral(
            type,
            [member.emit(output) for member in members]);
    }

    override void hash(Hash hash) {
        hash.adds("TupleLiteral");
        [member.hash(hash) for member in members];
    }

    override string repr() {
        return "{" ~ [join with ", " member.repr for member in members] ~ "}";
    }
}

/**
 * Tuple with pending member type
 */
class PendingTuple : PendingSymbol
{
    (string name, (PendingSymbol | Type) sym, LocRange locRange)[] members;

    this(this.members) { }

    override (Symbol | fail Error) resolve() {
        mut (string name, Type)[] result;
        for (int i, entry in members) {
            string name = entry.name;
            auto sym = entry.sym;
            result ~= (name, sym.case(
                Type t: t,
                PendingSymbol s: s.resolve?.beType(entry.locRange)?
            ));
        }
        return new TupleType(result);
    }
    override void hash(Hash hash) {
        hash.adds("tuple");
        hash.addl(this.members.length);
        for (member in this.members) {
            member.sym.case {
                PendingSymbol pending: pending.hash(hash);
                Type type: type.hash(hash);
            }
        }
    }
    override string repr() return "TODO PendingTuple";
}

class ASTTupleType : ASTSymbol
{
    (string name, ASTSymbol type)[] members;

    this(this.members, this.locRange) { }

    override (Symbol | fail Error) compile(Context context) {
        Symbol[] syms = [member.type.compile(context)? for member in this.members];
        if ([any s.instanceOf(PendingSymbol) for s in syms]) {
            mut (string name, (PendingSymbol | Type) sym, LocRange locRange)[] result;
            for (i, member in this.members) {
                if (auto ps = syms[i].instanceOf(PendingSymbol))
                    result ~= (member.name, ps, member.type.locRange);
                else
                    result ~= (member.name, syms[i].beType(member.type.locRange)?, member.type.locRange);
            }
            return new PendingTuple(result);
        }
        return new TupleType([
            (member.name, syms[i].beType(member.type.locRange)?)
            for i, member in this.members]);
    }

    override string repr() {
        string repr(ASTSymbol type, string name) {
            if (name.empty) return type.repr;
            return "$(type.repr) $name";
        }
        return "(" ~ [join with ", " repr(member.type, member.name) for member in members] ~ ")";
    }

    override ASTSymbol quote(Quoter quoter) {
        ASTSymbol quoteMember(typeof(members[0]) member) {
            with (quoter.compiler) return astTupleLiteral2([
                ("name", astStringLiteral(member.name, __RANGE__)),
                ("type", member.type.quote(quoter))], __RANGE__);
        }
        auto members = [a.quoteMember for a in this.members];
        return quoter.compilerCall("astTupleType", [
            quoter.compiler.astArrayLiteral(members, this.locRange),
        ], this.locRange);
    }
}
