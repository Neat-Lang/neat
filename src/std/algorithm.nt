module std.algorithm;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

/**
 * Maps a range onto a lambda.
 *
 * If the input range is `[x, y, z]`,
 * the output range is `[lambda(x), lambda(y), lambda(z)]`.
 */
template map(T, U) {
    auto map(T left, U right) {
        struct MapRange {
            T nextRange;
            U pred;
            bool empty() { return nextRange.empty; }
            typeof(pred(nextRange.front)) front() { return pred(nextRange.front); }
            MapRange next() { return MapRange(nextRange.next, pred); }
            static if (__traits(hasMember, init!T, "length")) {
                size_t length() { return nextRange.length; }
            }
        }
        return MapRange(left, right);
    }
}

unittest {
    auto a = (0 .. 5).map(a => a * 2);

    assert(a.length == 5);
    assert(a.array == [0, 2, 4, 6, 8]);
}

/**
 * Converts a range into an array.
 */
template array(T) {
    typeof(range.front)[] array(T range) {
        mut typeof(range.front)[] ret;
        for (a in range) ret ~= a;
        return ret;
    }
}

unittest {
    assert((0 .. 5).array == [0, 1, 2, 3, 4]);
}

/**
 * Filters a range by a condition.
 */
template filter(T, U) {
    auto filter(T left, U right) {
        struct FilterRange {
            T nextRange;
            U pred;
            bool empty() {
                skip;
                return nextRange.empty;
            }
            void skip() {
                while (!nextRange.empty && !pred(nextRange.front)) {
                    nextRange = nextRange.next;
                }
            }
            typeof(nextRange.front) front() { return nextRange.front; }
            FilterRange next() { return FilterRange(nextRange.next, pred); }
        }
        return FilterRange(left, right);
    }
}

unittest {
    auto a = (0 .. 10).filter(a => a > 4).array;

    assert(a == [5, 6, 7, 8, 9]);
}

/**
 * Applies a lambda repeatedly to an initial value and a value from a range, yielding the result at every step.
 */
template cumulativeFold(R, S, L) {
    auto cumulativeFold(R range, S seed, L lambda) {
        alias State = typeof(lambda(seed, range.front));
        struct CumulativeFoldRange {
            R range;
            State state;
            L lambda;
            bool empty() { return range.empty; }
            State front() { return state; }
            CumulativeFoldRange next() {
                auto next = range.next;
                if (next.empty) return CumulativeFoldRange(next, state, lambda);
                return CumulativeFoldRange(next, lambda(state, next.front), lambda);
            }
        }
        mut uninitialized State undefined;
        if (range.empty) return CumulativeFoldRange(range, undefined, lambda);
        return CumulativeFoldRange(range, lambda(seed, range.front), lambda);
    }
}

unittest {
    assert((1 .. 6).cumulativeFold(0, (a, b) => a + b).array == [1, 3, 6, 10, 15]);
}

/**
 * Returns true if any value in the range fulfills the condition.
 */
template any(T, U) {
    bool any(T left, U right) {
        for (a in left) if (right(a)) return true;
        return false;
    }
}

unittest {
    assert((0 .. 5).any(a => a == 3));
}

/**
 * Returns true if all values in the range fulfill the condition.
 */
template all(T, U) {
    bool all(T left, U right) {
        for (a in left) if (!right(a)) return false;
        return true;
    }
}

unittest {
    assert((0 .. 5).all(a => a < 5));
}

private template init(T) {
    T init() {
        mut uninitialized T t;
        return t;
    }
}

T sort(T, U)(T array, U smaller) {
    // immutable quicksort: sort offset array
    auto offsets = new size_t mut[](array.length);
    // initial ordering
    for (i in 0 .. offsets.length) offsets[i] = i;

    // ranges are right-inclusive here!
    void recurse(size_t left, size_t right) {
        if (left >= right) return;
        size_t pivotIndex = partition(left, right);
        recurse(left, pivotIndex - 1);
        recurse(pivotIndex + 1, right);
    }
    size_t partition(size_t left, size_t right) {
        alias sorted = i => array[offsets[i]];
        auto pivotValue = sorted(right);
        mut auto i = left;
        for (auto j in left .. right) {
            if (smaller(sorted(j), pivotValue)) {
                swap(i++, j);
            }
        }
        if (!smaller(sorted(i), pivotValue)) {
            swap(i, right);
        }
        return i;
    }
    void swap(size_t i, size_t j) {
        auto temp = offsets[i];
        offsets[i] = offsets[j];
        offsets[j] = temp;
    }
    recurse(0, array.length - 1);
    return [array[i] for i in offsets];
}

unittest {
    // quick xorshift rng
    mut long a = 23;
    int rand() {
        mut long x = a;
        x ^= x << 13;
        x ^= x >> 7;
        x ^= x << 17;
        a = x;
        return cast(int) x;
    }
    auto randomArray = [rand % i for i in 1 .. 10_000];
    auto sortedArray = randomArray.sort((a, b) => a < b);
    assert(sortedArray.length == randomArray.length);
    // quick checksum
    assert([sum a for a in randomArray] == [sum a for a in sortedArray]);
    for (i in 0 .. sortedArray.length - 1) {
        assert(sortedArray[i] <= sortedArray[i + 1]);
    }
}

/**
 * Reverse a mutable array in place.
 */
void reverse(T)(T mut[] arr) {
    for (i in 0 .. arr.length / 2) {
        auto var = arr[i];
        arr[i] = arr[$ - 1 - i];
        arr[$ - 1 - i] = var;
    }
}

unittest {
    int mut[] array = [2, 3, 4].dup;
    array.reverse;
    assert(array == [4, 3, 2]);
}

/**
 * Given an array, return the reverse.
 */
T[] reversed(T)(T[] arr) {
    return [arr[$ - 1 - i] for i in 0 .. arr.length];
}

unittest {
    assert([2, 3, 4].reversed == [4, 3, 2]);
}

/**
 * Given a range, returns a range of ranges consisting of the original range separated at element `element`.
 */
auto splitter(R, E)(R range, E element) {
    struct SplitterSegment {
        R range;
        E element;
        bool empty() return range.empty || range.front == element;
        typeof(range.front) front() return range.front;
        SplitterSegment next() return SplitterSegment(range.next, element);
    }
    struct Splitter {
        R range;
        E element;
        bool empty() return range.empty;
        SplitterSegment front() return SplitterSegment(range, element);
        Splitter next() {
            mut R next = range;
            while (!next.empty && next.front != element)
                next = next.next;
            if (next.empty) return Splitter(next, element);
            return Splitter(next.next, element);
        }
    }
    return Splitter(range, element);
}

unittest {
    assert([2, 3, 4, 5].splitter(4).map(a => a.array).array == [[2, 3], [5]]);
}

auto zip(R, S)(R first, S second) {
    struct ZipRange {
        R first;
        S second;
        bool empty() => first.empty || second.empty;
        (typeof(first.front), typeof(second.front)) front() => (first.front, second.front);
        ZipRange next() => ZipRange(first.next, second.next);
    }
    return ZipRange(first, second);
}

unittest {
    assert((0 .. 5).zip(3 .. 5).array == [(0, 3), (1, 4)]);
}
